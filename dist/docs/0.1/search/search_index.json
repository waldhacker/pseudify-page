{"config":{"indexing":"full","lang":["en","de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview todo","title":"Overview"},{"location":"#overview","text":"todo","title":"Overview"},{"location":"about/","text":"About the project The project was realized by Ralf Zimmermann, made possible by waldhacker UG (haftungsbeschr\u00e4nkt) and sponsored by the Bundesministerium f\u00fcr Bildung und Forschung . Many thanks also to the Prototype Fund and the Open Knowledge Foundation Deutschland e.V. for their support!","title":"About the project"},{"location":"about/#about-the-project","text":"The project was realized by Ralf Zimmermann, made possible by waldhacker UG (haftungsbeschr\u00e4nkt) and sponsored by the Bundesministerium f\u00fcr Bildung und Forschung . Many thanks also to the Prototype Fund and the Open Knowledge Foundation Deutschland e.V. for their support!","title":"About the project"},{"location":"development/","text":"Development todo","title":"Development"},{"location":"development/#development","text":"todo","title":"Development"},{"location":"license/","text":"License pseudify license (GPLv3) GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see <http://www.gnu.org/licenses/>. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"license/#pseudify-license-gplv3","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see <http://www.gnu.org/licenses/>. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.","title":"pseudify license (GPLv3)"},{"location":"versions/","text":"Versions current - Documentation 0.1 - Documentation","title":"Versions"},{"location":"versions/#versions","text":"current - Documentation 0.1 - Documentation","title":"Versions"},{"location":"whatToPseudonymize/","text":"What to pseudonymize? todo","title":"What to pseudonymize?"},{"location":"whatToPseudonymize/#what-to-pseudonymize","text":"todo","title":"What to pseudonymize?"},{"location":"setup/configuration/","text":"Configuration todo","title":"Configuration"},{"location":"setup/configuration/#configuration","text":"todo","title":"Configuration"},{"location":"setup/installation/","text":"Installation todo","title":"Installation"},{"location":"setup/installation/#installation","text":"todo","title":"Installation"},{"location":"usage/analyze/","text":"Analyze todo","title":"Analyze the database"},{"location":"usage/analyze/#analyze","text":"todo","title":"Analyze"},{"location":"usage/complexDatatypes/","text":"Complex datatypes todo","title":"Complex datatypes"},{"location":"usage/complexDatatypes/#complex-datatypes","text":"todo","title":"Complex datatypes"},{"location":"usage/predefinedApplicationProfiles/","text":"Predefined application profiles todo","title":"Predefined application profiles"},{"location":"usage/predefinedApplicationProfiles/#predefined-application-profiles","text":"todo","title":"Predefined application profiles"},{"location":"usage/pseudonymize/","text":"Pseudonymize todo","title":"Pseudonymize the database"},{"location":"usage/pseudonymize/#pseudonymize","text":"todo","title":"Pseudonymize"},{"location":"de/","text":"\u00dcberblick Features \ud83c\udf89 Analysiere und pseudonymisiere unterst\u00fctzte Datenbanken von beliebigen Applikationen \ud83c\udf89 Finde versteckte personenbezogene Daten \ud83c\udf89 Datenintegrit\u00e4t: gleiche Eingangsdaten erzeugen gleiche Pseudonyme \u00fcber alle Datenbankspalten hinweg \ud83c\udf89 Analysiere und pseudonymisiere einfach enkodierte Daten \ud83c\udf89 Analysiere und pseudonymisiere mehrfach enkodierte Daten \ud83c\udf89 Analysiere und pseudonymisiere komplexe Datenstrukturen wie JSON oder serialisierte PHP Daten \ud83c\udf89 Analysiere und pseudonymisiere dynamische Daten \ud83c\udf89 12 Built-in Dekodierer / Enkodierer \ud83c\udf89 Erweiterbarkeit mit eigenen Dekodierern / Enkodierern \ud83c\udf89 100+ Built-in lokalisierbare Fake-Datenformate dank FakerPHP \ud83c\udf89 Erweiterbarkeit mit eigenen Fake-Datenformaten \ud83c\udf89 Unterst\u00fctzung von 7 Built-in Datenbankplattformen dank Doctrine DBAL \ud83c\udf89 Erweiterbarkeit mit eigenen Datenbankplattformen \ud83c\udf89 Modellierung der Profile in PHP Unterst\u00fctzte Datenbanken MySQL doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image MySQL 5.1 \u2714 \u2714 * \u2714 MySQL 5.5 \u2714 \u2714 * \u2714 MySQL 5.6 \u2714 \u2714 \u2714 MySQL 5.7 \u2714 \u2714 \u2714 MySQL 8.0 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet MariaDB doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image MariaDB 10.2 \u2714 \u2714 \u2714 MariaDB 10.3 \u2714 \u2714 \u2714 MariaDB 10.4 \u2714 \u2714 \u2714 MariaDB 10.5 \u2714 \u2714 \u2714 MariaDB 10.6 \u2714 \u2714 \u2714 MariaDB 10.7 \u2714 \u2714 \u2714 MariaDB 10.8 \u2714 \u2714 \u2714 MariaDB 10.9 \u2714 \u2714 \u2714 PostgreSQL doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image PostgreSQL 9.4 \u2714 \u2714 * \u2714 PostgreSQL 9.5 \u2714 \u2714 \u2714 PostgreSQL 9.6 \u2714 \u2714 \u2714 PostgreSQL 10 \u2714 \u2714 \u2714 PostgreSQL 11 \u2714 \u2714 \u2714 PostgreSQL 12 \u2714 \u2714 \u2714 PostgreSQL 13 \u2714 \u2714 \u2714 PostgreSQL 14 \u2714 \u2714 \u2714 PostgreSQL 15 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet MS SQL Server doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image SQL Server 2014 \u2714 \u2714 * \u2714 SQL Server 2016 \u2714 \u2714 * \u2714 SQL Server 2017 \u2714 \u2714 \u2714 SQL Server 2019 \u2714 \u2714 \u2714 SQL Server 2022 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet SQLite doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image SQLite 1.x \u274c \u274c \u274c SQLite 2.x \u274c \u274c \u274c SQLite 3.x \u2714 \u2714 \u2714 Oracle doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image Oracle Database 11 \u2714 \u2714 * \u274c Oracle Database 12 \u2714 \u2714 * \u274c Oracle Database 19 \u2714 \u2714 * \u274c Oracle Database 21 \u2714 \u2714 * \u274c * theoretisch funktional, wurde aber nicht getestet -- IBM DB2 doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image DB2 9.x \u2753 \u2753 \u274c DB2 10.x \u2714 * \u2714 * \u274c DB2 11.x \u2714 * \u2714 * \u274c * theoretisch funktional, wurde aber nicht getestet","title":"\u00dcberblick"},{"location":"de/#uberblick","text":"","title":"\u00dcberblick"},{"location":"de/#features","text":"\ud83c\udf89 Analysiere und pseudonymisiere unterst\u00fctzte Datenbanken von beliebigen Applikationen \ud83c\udf89 Finde versteckte personenbezogene Daten \ud83c\udf89 Datenintegrit\u00e4t: gleiche Eingangsdaten erzeugen gleiche Pseudonyme \u00fcber alle Datenbankspalten hinweg \ud83c\udf89 Analysiere und pseudonymisiere einfach enkodierte Daten \ud83c\udf89 Analysiere und pseudonymisiere mehrfach enkodierte Daten \ud83c\udf89 Analysiere und pseudonymisiere komplexe Datenstrukturen wie JSON oder serialisierte PHP Daten \ud83c\udf89 Analysiere und pseudonymisiere dynamische Daten \ud83c\udf89 12 Built-in Dekodierer / Enkodierer \ud83c\udf89 Erweiterbarkeit mit eigenen Dekodierern / Enkodierern \ud83c\udf89 100+ Built-in lokalisierbare Fake-Datenformate dank FakerPHP \ud83c\udf89 Erweiterbarkeit mit eigenen Fake-Datenformaten \ud83c\udf89 Unterst\u00fctzung von 7 Built-in Datenbankplattformen dank Doctrine DBAL \ud83c\udf89 Erweiterbarkeit mit eigenen Datenbankplattformen \ud83c\udf89 Modellierung der Profile in PHP","title":"Features"},{"location":"de/#unterstutzte-datenbanken","text":"","title":"Unterst\u00fctzte Datenbanken"},{"location":"de/#mysql","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image MySQL 5.1 \u2714 \u2714 * \u2714 MySQL 5.5 \u2714 \u2714 * \u2714 MySQL 5.6 \u2714 \u2714 \u2714 MySQL 5.7 \u2714 \u2714 \u2714 MySQL 8.0 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet","title":"MySQL"},{"location":"de/#mariadb","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image MariaDB 10.2 \u2714 \u2714 \u2714 MariaDB 10.3 \u2714 \u2714 \u2714 MariaDB 10.4 \u2714 \u2714 \u2714 MariaDB 10.5 \u2714 \u2714 \u2714 MariaDB 10.6 \u2714 \u2714 \u2714 MariaDB 10.7 \u2714 \u2714 \u2714 MariaDB 10.8 \u2714 \u2714 \u2714 MariaDB 10.9 \u2714 \u2714 \u2714","title":"MariaDB"},{"location":"de/#postgresql","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image PostgreSQL 9.4 \u2714 \u2714 * \u2714 PostgreSQL 9.5 \u2714 \u2714 \u2714 PostgreSQL 9.6 \u2714 \u2714 \u2714 PostgreSQL 10 \u2714 \u2714 \u2714 PostgreSQL 11 \u2714 \u2714 \u2714 PostgreSQL 12 \u2714 \u2714 \u2714 PostgreSQL 13 \u2714 \u2714 \u2714 PostgreSQL 14 \u2714 \u2714 \u2714 PostgreSQL 15 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet","title":"PostgreSQL"},{"location":"de/#ms-sql-server","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image SQL Server 2014 \u2714 \u2714 * \u2714 SQL Server 2016 \u2714 \u2714 * \u2714 SQL Server 2017 \u2714 \u2714 \u2714 SQL Server 2019 \u2714 \u2714 \u2714 SQL Server 2022 \u2714 \u2714 \u2714 * theoretisch funktional, wurde aber nicht getestet","title":"MS SQL Server"},{"location":"de/#sqlite","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image SQLite 1.x \u274c \u274c \u274c SQLite 2.x \u274c \u274c \u274c SQLite 3.x \u2714 \u2714 \u2714","title":"SQLite"},{"location":"de/#oracle","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image Oracle Database 11 \u2714 \u2714 * \u274c Oracle Database 12 \u2714 \u2714 * \u274c Oracle Database 19 \u2714 \u2714 * \u274c Oracle Database 21 \u2714 \u2714 * \u274c * theoretisch funktional, wurde aber nicht getestet --","title":"Oracle"},{"location":"de/#ibm-db2","text":"doctrine dbal Unterst\u00fctzung pseudify Unterst\u00fctzung Treiber im docker image DB2 9.x \u2753 \u2753 \u274c DB2 10.x \u2714 * \u2714 * \u274c DB2 11.x \u2714 * \u2714 * \u274c * theoretisch funktional, wurde aber nicht getestet","title":"IBM DB2"},{"location":"de/about/","text":"\u00dcber das Projekt Das Projekt wurde umgesetzt von Ralf Zimmermann , erm\u00f6glicht durch die waldhacker UG (haftungsbeschr\u00e4nkt) und gef\u00f6rdert durch das Bundesministerium f\u00fcr Bildung und Forschung . Vielen Dank auch an den Prototype Fund und die Open Knowledge Foundation Deutschland e.V. f\u00fcr die Unterst\u00fctzung!","title":"\u00dcber das Projekt"},{"location":"de/about/#uber-das-projekt","text":"Das Projekt wurde umgesetzt von Ralf Zimmermann , erm\u00f6glicht durch die waldhacker UG (haftungsbeschr\u00e4nkt) und gef\u00f6rdert durch das Bundesministerium f\u00fcr Bildung und Forschung . Vielen Dank auch an den Prototype Fund und die Open Knowledge Foundation Deutschland e.V. f\u00fcr die Unterst\u00fctzung!","title":"\u00dcber das Projekt"},{"location":"de/development/","text":"Entwicklung Website Der Quellcode der Webseite befindet sich im Repository pseudify-page . Um die Webseite zu entwickeln, wird das Programm ddev ben\u00f6tigt. Starten der Webseite ddev start ddev launch Bauen der Webseite # 0.1 = current version ddev exec ../build/build.sh 0.1 Core Der Quellcode von pseudify befindet sich im Repository pseudify-core . Um pseudify zu entwickeln wird das Programm ddev ben\u00f6tigt. Das PHAR Archiv bauen docker run -it -v $(pwd):/data --workdir=/data \\ php:8.1-cli-alpine \\ sh -c '\\ apk update \\ && apk add bash rsync \\ && /bin/bash -c \"build/build-phar.sh\" \\ && chown -R '$(id -u)':'$(id -g)' .build/ \\ ' Das docker image bauen Dieser Schritt ben\u00f6tigt als Vorarbeit die Ausf\u00fchrung der Befehle unter \"Das PHAR Archiv bauen\". ./build/build-docker.sh Bauen von pseudify ddev start ddev exec composer install docker run -it -v $(pwd)/build/development/userdata/:/app -u $(id -u):$(id -g) \\ composer create-project waldhacker/pseudify-profile-templates --stability=dev --remove-vcs cp build/development/userdata/pseudify-profile-templates/tests/mariadb/10.5/.env build/development/userdata/pseudify-profile-templates/.env ddev exec 'rm -f ~/.pgpass ~/.my.cnf && mariadb -h mariadb_10_5 -uroot -p\"pseudify(!)w4ldh4ck3r\" pseudify_utf8mb4 < ../build/development/userdata/pseudify-profile-templates/tests/mariadb/10.5/pseudify_utf8mb4.sql' ddev exec bin/pseudify pseudify:debug:table_schema","title":"Entwicklung"},{"location":"de/development/#entwicklung","text":"","title":"Entwicklung"},{"location":"de/development/#website","text":"Der Quellcode der Webseite befindet sich im Repository pseudify-page . Um die Webseite zu entwickeln, wird das Programm ddev ben\u00f6tigt.","title":"Website"},{"location":"de/development/#starten-der-webseite","text":"ddev start ddev launch","title":"Starten der Webseite"},{"location":"de/development/#bauen-der-webseite","text":"# 0.1 = current version ddev exec ../build/build.sh 0.1","title":"Bauen der Webseite"},{"location":"de/development/#core","text":"Der Quellcode von pseudify befindet sich im Repository pseudify-core . Um pseudify zu entwickeln wird das Programm ddev ben\u00f6tigt.","title":"Core"},{"location":"de/development/#das-phar-archiv-bauen","text":"docker run -it -v $(pwd):/data --workdir=/data \\ php:8.1-cli-alpine \\ sh -c '\\ apk update \\ && apk add bash rsync \\ && /bin/bash -c \"build/build-phar.sh\" \\ && chown -R '$(id -u)':'$(id -g)' .build/ \\ '","title":"Das PHAR Archiv bauen"},{"location":"de/development/#das-docker-image-bauen","text":"Dieser Schritt ben\u00f6tigt als Vorarbeit die Ausf\u00fchrung der Befehle unter \"Das PHAR Archiv bauen\". ./build/build-docker.sh","title":"Das docker image bauen"},{"location":"de/development/#bauen-von-pseudify","text":"ddev start ddev exec composer install docker run -it -v $(pwd)/build/development/userdata/:/app -u $(id -u):$(id -g) \\ composer create-project waldhacker/pseudify-profile-templates --stability=dev --remove-vcs cp build/development/userdata/pseudify-profile-templates/tests/mariadb/10.5/.env build/development/userdata/pseudify-profile-templates/.env ddev exec 'rm -f ~/.pgpass ~/.my.cnf && mariadb -h mariadb_10_5 -uroot -p\"pseudify(!)w4ldh4ck3r\" pseudify_utf8mb4 < ../build/development/userdata/pseudify-profile-templates/tests/mariadb/10.5/pseudify_utf8mb4.sql' ddev exec bin/pseudify pseudify:debug:table_schema","title":"Bauen von pseudify"},{"location":"de/license/","text":"Lizenz pseudify license (GPLv3) GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: pseudify - the database pseudonymizer Copyright (C) 2022 waldhacker UG (haftungsbeschr\u00e4nkt) This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see <http://www.gnu.org/licenses/>. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.","title":"Lizenz"},{"location":"de/license/#lizenz","text":"","title":"Lizenz"},{"location":"de/versions/","text":"Versionen current - Dokumentation 0.1 - Dokumentation","title":"Versionen"},{"location":"de/versions/#versionen","text":"current - Dokumentation 0.1 - Dokumentation","title":"Versionen"},{"location":"de/whatToPseudonymize/","text":"Was sollte pseudonymisiert werden? todo","title":"Was sollte pseudonymisiert werden?"},{"location":"de/whatToPseudonymize/#was-sollte-pseudonymisiert-werden","text":"todo","title":"Was sollte pseudonymisiert werden?"},{"location":"de/setup/configuration/","text":"Konfiguration .env Die Grundkonfiguration von pseudify findet mittels Werten in einer .env Datei statt. Die Profile Templates beinhalten eine exemplarische .env Datei welche als Grundlage f\u00fcr die eigene Konfiguration verwendet werden kann. APP_SECRET Default: <leer> Pseudify cached die Eingangsdaten, um pro Pseudonymisierungslauf gleiche Pseudonyme f\u00fcr gleiche Eingangsdaten erzeugen zu k\u00f6nnen. Damit die zu pseudonymisierenden Eingangsdaten nicht im Klartext im Cache abgespeichert werden, werden sie zur Sicherheit mittels SHA-256 Hash-Algorithmus verarbeitet und dann abgespeichert. Damit von den SHA-256 Hashwerten im Cache keine R\u00fcckschl\u00fcsse auf die Eingangsdaten gezogen werden k\u00f6nnen, wird dringend empfohlen den Wert von APP_SECRET auf einen m\u00f6glichst langen zuf\u00e4lligen Wert zu setzen . Der Wert von APP_SECRET ist als Geheimnis zu behandeln , so wie ein Passwort. Beispiel APP_SECRET=6ba571b0a3e7150a4b7e5b918e81ce8f PSEUDIFY_FAKER_LOCALE Default: en_US Pseudify benutzt die FakerPHP/Faker Komponente , um die Pseudonyme zu generieren. Die Komponente erlaubt die Generierung von sprachspezifischen Werten . Unterst\u00fctzte Werte von PSEUDIFY_FAKER_LOCALE finden sich im FakerPHP/Faker Repository . Beispiel PSEUDIFY_FAKER_LOCALE=de_DE PSEUDIFY_DATABASE_DRIVER Default: pdo_mysql Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.driver Der Wert von PSEUDIFY_DATABASE_DRIVER muss ein unterst\u00fctzter Treiber der Doctrine DBAL Komponente sein. Der pseudify docker Container wird mit folgender Treiberunterst\u00fctzung ausgeliefert: pdo_mysql (A MySQL driver that uses the pdo_mysql PDO extension mysqli (A MySQL driver that uses the mysqli extension pdo_pgsql (A PostgreSQL driver that uses the pdo_pgsql PDO extension) pdo_sqlite (An SQLite driver that uses the pdo_sqlite PDO extension) sqlite3 (An SQLite driver that uses the sqlite3 extension) pdo_sqlsrv (A Microsoft SQL Server driver that uses pdo_sqlsrv PDO) sqlsrv (A Microsoft SQL Server driver that uses the sqlsrv PHP extension) Info Die Unterst\u00fctzung des oci8 Treibers f\u00fcr Oracle Datenbanken im docker Container ist in Vorbereitung (pull requests sind willkommen). Beispiel PSEUDIFY_DATABASE_DRIVER=pdo_mysql PSEUDIFY_DATABASE_HOST Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.host Der Hostname unter welchem der Datenbankserver erreichbar ist. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Beispiel PSEUDIFY_DATABASE_HOST=host.docker.internal PSEUDIFY_DATABASE_PORT Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.port Der Port unter welchem der Datenbankserver erreichbar ist. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Beispiel PSEUDIFY_DATABASE_PORT=3306 PSEUDIFY_DATABASE_USER Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.user Der Benutzername der Datenbank. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlite pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Beispiel PSEUDIFY_DATABASE_USER=pseudify PSEUDIFY_DATABASE_PASSWORD Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.password Das Passwort der Datenbank. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlite pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Beispiel PSEUDIFY_DATABASE_PASSWORD='super(!)sEcReT' PSEUDIFY_DATABASE_SCHEMA Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.dbname / doctrine.dbal.connections.default.path Der Name der Datenbank. Bei folgenden Treibern entspricht PSEUDIFY_DATABASE_SCHEMA dem Datenbanknamen: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Bei folgenden Treibern entspricht PSEUDIFY_DATABASE_SCHEMA dem Dateisystempfad zur Datenbank: pdo_sqlite sqlite3 Beispiel PSEUDIFY_DATABASE_SCHEMA=wordpress_prod PSEUDIFY_DATABASE_CHARSET Default: utf8mb4 Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.charset Der Zeichensatz, der bei der Verbindung zur Datenbank verwendet wird. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8 Beispiel PSEUDIFY_DATABASE_CHARSET=utf8mb4 PSEUDIFY_DATABASE_VERSION Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.server_version Doctrine wird mit verschiedenen Datenbankplattform-Implementierungen f\u00fcr einige Anbieter geliefert, um versionsspezifische Funktionen, Dialekte und Verhaltensweisen zu unterst\u00fctzen. Die Treiber erkennen automatisch die Plattformversion und instanziieren die entsprechende Plattformklasse. Wenn Du die automatische Erkennung der Datenbankplattform deaktivieren und die Implementierung der Plattformversion explizit ausw\u00e4hlen m\u00f6chtest, kannst Du dies mit dem Wert in PSEUDIFY_DATABASE_VERSION erledigen. Info Wenn Du eine MariaDB-Datenbank verwendest, solltest Du dem Wert PSEUDIFY_DATABASE_VERSION den Pr\u00e4fix mariadb- voranstellen (Beispiel: mariadb-10.2). Beispiel PSEUDIFY_DATABASE_VERSION=8.0 PSEUDIFY_DATABASE_SSL_INSECURE Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.options.TrustServerCertificate Wird der Wert von PSEUDIFY_DATABASE_SSL_INSECURE auf 1 gesetzt, so wird keine \u00dcberpr\u00fcfung des TLS-Zertifikats des Datenbankservers vorgenommen. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlsrv sqlsrv PSEUDIFY_DATABASE_SSL_INSECURE=1 Erweiterte Verbindungseinstellungen Wenn Du weitere Treiberoptionen konfigurieren musst, so kannst Du dies in der Datei config/configuration.yaml tun. Beispiele und Informationen f\u00fcr Treiberoptionen finden sich in folgenden Dokumenten: Symfony DoctrineBundle - Doctrine DBAL Configuration Doctrine DBAL- Connection Details Nach \u00c4nderungen an den Verbindungseinstellungen muss der Cache geleert werden pseudify cache:clear Multiple Verbindungskonfigurationen Es ist m\u00f6glich, mehrere Verbindungen zu konfigurieren. Als Standardverbindung wird die Verbindung mit dem Namen default verwendet . In der Datei config/configuration.yaml k\u00f6nnen weitere Verbindungen unter anderem Namen konfiguriert werden. doctrine: dbal: connections: myCustomConnection: driver: sqlsrv # ... Die konfigurierten Verbindungen k\u00f6nnen mit dem Parameter --connection verwendet werden pseudify pseudify:pseudonymize --connection myCustomConnection myPseudonymizationProfileName pseudify pseudify:debug:pseudonymize --connection myCustomConnection myPseudonymizationProfileName pseudify pseudify:analyze --connection myCustomConnection myAnalysisProfileName pseudify pseudify:debug:analyze --connection myCustomConnection myAnalysisProfileName pseudify pseudify:debug:table_schema --connection myCustomConnection Registrieren von benutzerdefinierten Datentypen Werden benutzerdefinierte Datentypen ben\u00f6tigt, so kannst Du diese auf Verbindungsebene in der Datei config/configuration.yaml definieren. Beispielimplementationen f\u00fcr benutzerdefinierte Datentypen finden sich in folgenden Dateien: src/Types/TYPO3/EnumType.php src/Types/TYPO3/SetType.php Diese benutzerdefinierten Datentypen k\u00f6nnen dann mittels Konfiguration in der Datei config/configuration.yaml verwendet werden doctrine: dbal: connections: default: types: enum: Waldhacker\\Pseudify\\Types\\TYPO3\\EnumType set: Waldhacker\\Pseudify\\Types\\TYPO3\\SetType mapping_types: enum: enum set: set Beispiele und Informationen f\u00fcr benutzerdefinierte Datentypen finden sich in folgenden Dokumenten: Symfony DoctrineBundle - Registering custom Mapping Types Symfony DoctrineBundle - Registering custom Mapping Types in the SchemaTool Doctrine DBAL - Custom Mapping Types Nach dem Hinzuf\u00fcgen benutzerdefinierter Datentypen muss der Cache geleert werden pseudify cache:clear Registrieren von benutzerdefinierten Faker-Formatierern Die FakerPHP/Faker Komponente bringt eine Menge vordefinierter Formatierer mit um diverse Datenformate zu generieren. Wenn Du benutzerdefinierte Formatierer verwenden m\u00f6chtest, so kannst Du die Implementierung am Beispiel des BobRossLipsumProvider abschauen. Der benutzerdefinierte Formatierer muss das Interface Waldhacker\\Pseudify\\Core\\Faker\\FakeDataProviderInterface implementieren, damit er ins System integriert wird. Wie Formatierer Daten generieren k\u00f6nnen l\u00e4sst sich am Besten anhand der Provider im FakerPHP/Faker Projekt abschauen. Nach dem Hinzuf\u00fcgen benutzerdefinierter Faker-Formatierern muss der Cache geleert werden pseudify cache:clear Registrieren von benutzerdefinierten Dekodierern / Enkodierern Das pseudify EncoderInterface ist kompatibel zum EncoderInterface und DecoderInterface der Symfony serializer Komponente . Wenn Du benutzerdefinierte Dekodierer / Enkodierer verwenden m\u00f6chtest, so kannst Du die Implementierung am Beispiel des Rot13Encoder abschauen. Der benutzerdefinierte Dekodierer / Enkodierer muss das Interface Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\EncoderInterface implementieren, damit er ins System integriert wird. Wie Dekodierer / Enkodierer Daten dekodieren und encodieren k\u00f6nnen l\u00e4sst sich am Besten anhand der Built-in Dekodierer / Enkodierer abschauen. Nach dem hinzuf\u00fcgen benutzerdefinierter Dekodierer / Enkodierer muss der Cache geleert werden pseudify cache:clear Note Benutzerdefinierte Dekodierer / Enkodierer sollten der Namenskonvention <Format>Encoder folgen (z.B. HexEncoder , Rot13Encoder uws.). Dies stellt sicher, dass Debug-Kommandos wie pseudify:debug:analyze die Namen der Dekodierer / Enkodierer gut darstellen k\u00f6nnen. Zugriff auf Host-Datenbankserver aus dem docker Container heraus M\u00f6chte man auf Datenbankserver, welche auf dem Host-System laufen, aus dem docker Container heraus zugreifen, so kann dies auf unterschiedlichen Wegen umgesetzt werden. Nachfolgend werden 3 beschrieben. add-host Variante F\u00fcge dem docker run Befehl den Parameter --add-host=host.docker.internal:host-gateway hinzu um innerhalb des docker Containers die IP-Adresse des docker gateways auf dem Host-System unter dem Hostnamen host.docker.internal zur Verf\u00fcgung zu stellen. Die Option PSEUDIFY_DATABASE_HOST in der .env Datei muss den Wert host.docker.internal erhalten. Note Damit diese Variante funktioniert, muss der Port des Datenbankservers auf dem docker gateway ge\u00f6ffnet sein. Beispiel .env: PSEUDIFY_DATABASE_HOST=host.docker.internal Befehl: docker run -it -v $(pwd):/data --add-host=host.docker.internal:host-gateway \\ ghcr.io/waldhacker/pseudify pseudify:debug:table_schema Host-IP Variante Die Option PSEUDIFY_DATABASE_HOST in der .env Datei muss die IP-Adresse des Host-Systems erhalten. Note Damit diese Variante funktioniert, muss der Port des Datenbankservers auf dieser IP des Host-Systems ge\u00f6ffnet sein. Beispiel .env: PSEUDIFY_DATABASE_HOST=192.168.178.31 Befehl: docker run -it -v $(pwd):/data ghcr.io/waldhacker/pseudify pseudify:debug:table_schema Geschwisterservice Variante Der Datenbankserver wird parallel zum pseudify Container mittels docker gestartet. Beide Container werden mit demselben docker Netzwerk verbunden und k\u00f6nnen somit untereinander kommunizieren. Beispiel Erzeugen des gemeinsamen docker Netzwerks (falls noch keines vorhanden ist) mit dem Namen pseudify-net : docker network create pseudify-net Started des Datenbankservers am Beispiel des MariaDB Containers . Der Datenbankserver wird gestartet und in das Netzwerk pseudify-net aufgenommen ( --network pseudify-net ). Dem Container wird der Name mariadb_10_5 gegeben ( --name mariadb_10_5 ), unter welchem die Datenbank dann f\u00fcr den pseudify Container erreichbar sein wird. Note Damit der Import der Testdatenbank ( -v $(pwd)/tests/mariadb/10.5:/docker-entrypoint-initdb.d ) korrekt funktioniert, muss der Befehl im Hauptverzeichnis der Profile Templates ausgef\u00fchrt werden. docker run --rm --detach \\ --network pseudify-net \\ --name mariadb_10_5 \\ --env MARIADB_USER=pseudify \\ --env MARIADB_PASSWORD='pseudify(!)w4ldh4ck3r' \\ --env MARIADB_ROOT_PASSWORD='pseudify(!)w4ldh4ck3r' \\ --env MARIADB_DATABASE=pseudify_utf8mb4 \\ -v $(pwd)/tests/mariadb/10.5:/docker-entrypoint-initdb.d \\ mariadb:10.5 cp tests/mariadb/10.5/.env .env .env: PSEUDIFY_DATABASE_HOST=mariadb_10_5 Befehl: docker run -it -v $(pwd):/data --network=pseudify-net \\ ghcr.io/waldhacker/pseudify pseudify:debug:table_schema \u00dcberblick \u00fcber die Konfiguration Es existieren Kommandos, um die konfiguration des Systems zu \u00fcberpr\u00fcfen pseudify:information Das Kommando pseudify pseudify:information listet: verf\u00fcgbare Profile, um die Datenbank zu analysieren ( Registered analyze profiles ) verf\u00fcgbare Profile, um die Datenbank zu pseudonymisieren ( Registered pseudonymize profiles ) registrierte Datentypen ( Registered doctrine types ) im System verf\u00fcgbare Datenbanktreiber ( Available built-in database drivers ) Informationen pro konfigurierte Verbindung ( Connection information for connection \"<connecntion name>\" ) Informationen welche Datenbank-Datentypen mit welchen Doctrine Implementierungen verkn\u00fcpft sind ( Registered doctrine database data type mappings ) Informationen \u00fcber die verwendeten Doctrine Treiber-Implementierungen und den verwendeten Systemtreiber ( Connection details ) $ pseudify pseudify:information Registered analyze profiles --------------------------- -------------- Profile name -------------- typo3Example test-profile -------------- Registered pseudonymize profiles -------------------------------- -------------- Profile name -------------- typo3Example test -------------- Registered doctrine types ------------------------- ---------------------- --------------------------------------------- Doctrine type name Doctrine type implementation ---------------------- --------------------------------------------- array Doctrine\\DBAL\\Types\\ArrayType ascii_string Doctrine\\DBAL\\Types\\AsciiStringType bigint Doctrine\\DBAL\\Types\\BigIntType binary Doctrine\\DBAL\\Types\\BinaryType blob Doctrine\\DBAL\\Types\\BlobType boolean Doctrine\\DBAL\\Types\\BooleanType date Doctrine\\DBAL\\Types\\DateType date_immutable Doctrine\\DBAL\\Types\\DateImmutableType dateinterval Doctrine\\DBAL\\Types\\DateIntervalType datetime Doctrine\\DBAL\\Types\\DateTimeType datetime_immutable Doctrine\\DBAL\\Types\\DateTimeImmutableType datetimetz Doctrine\\DBAL\\Types\\DateTimeTzType datetimetz_immutable Doctrine\\DBAL\\Types\\DateTimeTzImmutableType decimal Doctrine\\DBAL\\Types\\DecimalType float Doctrine\\DBAL\\Types\\FloatType guid Doctrine\\DBAL\\Types\\GuidType integer Doctrine\\DBAL\\Types\\IntegerType json Doctrine\\DBAL\\Types\\JsonType object Doctrine\\DBAL\\Types\\ObjectType simple_array Doctrine\\DBAL\\Types\\SimpleArrayType smallint Doctrine\\DBAL\\Types\\SmallIntType string Doctrine\\DBAL\\Types\\StringType text Doctrine\\DBAL\\Types\\TextType time Doctrine\\DBAL\\Types\\TimeType time_immutable Doctrine\\DBAL\\Types\\TimeImmutableType ---------------------- --------------------------------------------- Available built-in database drivers ----------------------------------- ------------ ------------------------------------------------------------------------------------ ------------------- Driver Description Installed version ------------ ------------------------------------------------------------------------------------ ------------------- MySQL / MariaDB ------------ ------------------------------------------------------------------------------------ ------------------- pdo_mysql A MySQL driver that uses the pdo_mysql PDO extension 8.1.14 mysqli A MySQL driver that uses the mysqli extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- PostgreSQL ------------ ------------------------------------------------------------------------------------ ------------------- pdo_pgsql A PostgreSQL driver that uses the pdo_pgsql PDO extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- SQLite ------------ ------------------------------------------------------------------------------------ ------------------- pdo_sqlite An SQLite driver that uses the pdo_sqlite PDO extension 8.1.14 sqlite3 An SQLite driver that uses the sqlite3 extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- SQL Server ------------ ------------------------------------------------------------------------------------ ------------------- pdo_sqlsrv A Microsoft SQL Server driver that uses pdo_sqlsrv PDO 5.10.1 sqlsrv A Microsoft SQL Server driver that uses the sqlsrv PHP extension 5.10.1 ------------ ------------------------------------------------------------------------------------ ------------------- Oracle Database ------------ ------------------------------------------------------------------------------------ ------------------- pdo_oci An Oracle driver that uses the pdo_oci PDO extension (not recommended by doctrine) N/A oci8 An Oracle driver that uses the oci8 PHP extension N/A ------------ ------------------------------------------------------------------------------------ ------------------- IBM DB2 ------------ ------------------------------------------------------------------------------------ ------------------- pdo_ibm An DB2 driver that uses the pdo_ibm PHP extension N/A ibm_db2 An DB2 driver that uses the ibm_db2 extension N/A ------------ ------------------------------------------------------------------------------------ ------------------- Connection information for connection \"default\" =============================================== Registered doctrine database data type mappings ----------------------------------------------- --------------- -------------------- ------------------------------------- Database type Doctrine type name Doctrine type implementation --------------- -------------------- ------------------------------------- bigint bigint Doctrine\\DBAL\\Types\\BigIntType binary binary Doctrine\\DBAL\\Types\\BinaryType blob blob Doctrine\\DBAL\\Types\\BlobType char string Doctrine\\DBAL\\Types\\StringType date date Doctrine\\DBAL\\Types\\DateType datetime datetime Doctrine\\DBAL\\Types\\DateTimeType decimal decimal Doctrine\\DBAL\\Types\\DecimalType double float Doctrine\\DBAL\\Types\\FloatType float float Doctrine\\DBAL\\Types\\FloatType int integer Doctrine\\DBAL\\Types\\IntegerType integer integer Doctrine\\DBAL\\Types\\IntegerType longblob blob Doctrine\\DBAL\\Types\\BlobType longtext text Doctrine\\DBAL\\Types\\TextType mediumblob blob Doctrine\\DBAL\\Types\\BlobType mediumint integer Doctrine\\DBAL\\Types\\IntegerType mediumtext text Doctrine\\DBAL\\Types\\TextType numeric decimal Doctrine\\DBAL\\Types\\DecimalType real float Doctrine\\DBAL\\Types\\FloatType set simple_array Doctrine\\DBAL\\Types\\SimpleArrayType smallint smallint Doctrine\\DBAL\\Types\\SmallIntType string string Doctrine\\DBAL\\Types\\StringType text text Doctrine\\DBAL\\Types\\TextType time time Doctrine\\DBAL\\Types\\TimeType timestamp datetime Doctrine\\DBAL\\Types\\DateTimeType tinyblob blob Doctrine\\DBAL\\Types\\BlobType tinyint boolean Doctrine\\DBAL\\Types\\BooleanType tinytext text Doctrine\\DBAL\\Types\\TextType varbinary binary Doctrine\\DBAL\\Types\\BinaryType varchar string Doctrine\\DBAL\\Types\\StringType year date Doctrine\\DBAL\\Types\\DateType json json Doctrine\\DBAL\\Types\\JsonType _text text Doctrine\\DBAL\\Types\\TextType --------------- -------------------- ------------------------------------- Connection details ------------------ --------------------------------------- ----------------------------------------- Name Value --------------------------------------- ----------------------------------------- Used connection implementation Doctrine\\DBAL\\Connection Used database driver implementation Doctrine\\DBAL\\Driver\\PDO\\MySQL\\Driver Used database platform implementation Doctrine\\DBAL\\Platforms\\MySQL80Platform Used database platform version 10.5 Used built-in database driver pdo_mysql (8.1.14) --------------------------------------- ----------------------------------------- debug:config DoctrineBundle Das Kommando listet die zusammengefasste Datenbankkonfiguration auf, welche aus der Core-Konfiguration und der benutzerdefinierten Konfiguration besteht. $ pseudify debug:config DoctrineBundle Current configuration for \"DoctrineBundle\" ========================================== doctrine: dbal: connections: default: driver: '%env(PSEUDIFY_DATABASE_DRIVER)%' host: '%env(PSEUDIFY_DATABASE_HOST)%' port: '%env(PSEUDIFY_DATABASE_PORT)%' user: '%env(PSEUDIFY_DATABASE_USER)%' password: '%env(PSEUDIFY_DATABASE_PASSWORD)%' dbname: '%env(PSEUDIFY_DATABASE_SCHEMA)%' path: '%env(PSEUDIFY_DATABASE_SCHEMA)%' charset: '%env(PSEUDIFY_DATABASE_CHARSET)%' server_version: '%env(PSEUDIFY_DATABASE_VERSION)%' options: TrustServerCertificate: '%env(PSEUDIFY_DATABASE_SSL_INSECURE)%' mapping_types: _text: text logging: false profiling: false profiling_collect_backtrace: false profiling_collect_schema_errors: true default_table_options: { } slaves: { } replicas: { } shards: { } types: { } debug:dotenv Das Kommando listet die Werte aus der .env Datei auf. $ pseudify debug:dotenv Dotenv Variables & Files ======================== Variables --------- ---------------------------- ----------------------- Variable Value ---------------------------- ----------------------- APP_ENV dev PSEUDIFY_DATABASE_CHARSET utf8mb4 PSEUDIFY_DATABASE_DRIVER pdo_mysql PSEUDIFY_DATABASE_HOST mariadb_10_5 PSEUDIFY_DATABASE_PASSWORD pseudify(!)w4ldh4ck3r PSEUDIFY_DATABASE_PORT 3306 PSEUDIFY_DATABASE_SCHEMA pseudify_utf8mb4 PSEUDIFY_DATABASE_USER pseudify PSEUDIFY_DATABASE_VERSION 10.5 ---------------------------- -----------------------","title":"Konfiguration"},{"location":"de/setup/configuration/#konfiguration","text":"","title":"Konfiguration"},{"location":"de/setup/configuration/#env","text":"Die Grundkonfiguration von pseudify findet mittels Werten in einer .env Datei statt. Die Profile Templates beinhalten eine exemplarische .env Datei welche als Grundlage f\u00fcr die eigene Konfiguration verwendet werden kann.","title":".env"},{"location":"de/setup/configuration/#app_secret","text":"Default: <leer> Pseudify cached die Eingangsdaten, um pro Pseudonymisierungslauf gleiche Pseudonyme f\u00fcr gleiche Eingangsdaten erzeugen zu k\u00f6nnen. Damit die zu pseudonymisierenden Eingangsdaten nicht im Klartext im Cache abgespeichert werden, werden sie zur Sicherheit mittels SHA-256 Hash-Algorithmus verarbeitet und dann abgespeichert. Damit von den SHA-256 Hashwerten im Cache keine R\u00fcckschl\u00fcsse auf die Eingangsdaten gezogen werden k\u00f6nnen, wird dringend empfohlen den Wert von APP_SECRET auf einen m\u00f6glichst langen zuf\u00e4lligen Wert zu setzen . Der Wert von APP_SECRET ist als Geheimnis zu behandeln , so wie ein Passwort.","title":"APP_SECRET"},{"location":"de/setup/configuration/#beispiel","text":"APP_SECRET=6ba571b0a3e7150a4b7e5b918e81ce8f","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_faker_locale","text":"Default: en_US Pseudify benutzt die FakerPHP/Faker Komponente , um die Pseudonyme zu generieren. Die Komponente erlaubt die Generierung von sprachspezifischen Werten . Unterst\u00fctzte Werte von PSEUDIFY_FAKER_LOCALE finden sich im FakerPHP/Faker Repository .","title":"PSEUDIFY_FAKER_LOCALE"},{"location":"de/setup/configuration/#beispiel_1","text":"PSEUDIFY_FAKER_LOCALE=de_DE","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_driver","text":"Default: pdo_mysql Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.driver Der Wert von PSEUDIFY_DATABASE_DRIVER muss ein unterst\u00fctzter Treiber der Doctrine DBAL Komponente sein. Der pseudify docker Container wird mit folgender Treiberunterst\u00fctzung ausgeliefert: pdo_mysql (A MySQL driver that uses the pdo_mysql PDO extension mysqli (A MySQL driver that uses the mysqli extension pdo_pgsql (A PostgreSQL driver that uses the pdo_pgsql PDO extension) pdo_sqlite (An SQLite driver that uses the pdo_sqlite PDO extension) sqlite3 (An SQLite driver that uses the sqlite3 extension) pdo_sqlsrv (A Microsoft SQL Server driver that uses pdo_sqlsrv PDO) sqlsrv (A Microsoft SQL Server driver that uses the sqlsrv PHP extension) Info Die Unterst\u00fctzung des oci8 Treibers f\u00fcr Oracle Datenbanken im docker Container ist in Vorbereitung (pull requests sind willkommen).","title":"PSEUDIFY_DATABASE_DRIVER"},{"location":"de/setup/configuration/#beispiel_2","text":"PSEUDIFY_DATABASE_DRIVER=pdo_mysql","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_host","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.host Der Hostname unter welchem der Datenbankserver erreichbar ist. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv","title":"PSEUDIFY_DATABASE_HOST"},{"location":"de/setup/configuration/#beispiel_3","text":"PSEUDIFY_DATABASE_HOST=host.docker.internal","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_port","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.port Der Port unter welchem der Datenbankserver erreichbar ist. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv","title":"PSEUDIFY_DATABASE_PORT"},{"location":"de/setup/configuration/#beispiel_4","text":"PSEUDIFY_DATABASE_PORT=3306","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_user","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.user Der Benutzername der Datenbank. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlite pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv","title":"PSEUDIFY_DATABASE_USER"},{"location":"de/setup/configuration/#beispiel_5","text":"PSEUDIFY_DATABASE_USER=pseudify","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_password","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.password Das Passwort der Datenbank. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlite pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv","title":"PSEUDIFY_DATABASE_PASSWORD"},{"location":"de/setup/configuration/#beispiel_6","text":"PSEUDIFY_DATABASE_PASSWORD='super(!)sEcReT'","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_schema","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.dbname / doctrine.dbal.connections.default.path Der Name der Datenbank. Bei folgenden Treibern entspricht PSEUDIFY_DATABASE_SCHEMA dem Datenbanknamen: pdo_mysql mysqli pdo_pgsql oci8 pdo_sqlsrv sqlsrv Bei folgenden Treibern entspricht PSEUDIFY_DATABASE_SCHEMA dem Dateisystempfad zur Datenbank: pdo_sqlite sqlite3","title":"PSEUDIFY_DATABASE_SCHEMA"},{"location":"de/setup/configuration/#beispiel_7","text":"PSEUDIFY_DATABASE_SCHEMA=wordpress_prod","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_charset","text":"Default: utf8mb4 Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.charset Der Zeichensatz, der bei der Verbindung zur Datenbank verwendet wird. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_mysql mysqli pdo_pgsql oci8","title":"PSEUDIFY_DATABASE_CHARSET"},{"location":"de/setup/configuration/#beispiel_8","text":"PSEUDIFY_DATABASE_CHARSET=utf8mb4","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_version","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.server_version Doctrine wird mit verschiedenen Datenbankplattform-Implementierungen f\u00fcr einige Anbieter geliefert, um versionsspezifische Funktionen, Dialekte und Verhaltensweisen zu unterst\u00fctzen. Die Treiber erkennen automatisch die Plattformversion und instanziieren die entsprechende Plattformklasse. Wenn Du die automatische Erkennung der Datenbankplattform deaktivieren und die Implementierung der Plattformversion explizit ausw\u00e4hlen m\u00f6chtest, kannst Du dies mit dem Wert in PSEUDIFY_DATABASE_VERSION erledigen. Info Wenn Du eine MariaDB-Datenbank verwendest, solltest Du dem Wert PSEUDIFY_DATABASE_VERSION den Pr\u00e4fix mariadb- voranstellen (Beispiel: mariadb-10.2).","title":"PSEUDIFY_DATABASE_VERSION"},{"location":"de/setup/configuration/#beispiel_9","text":"PSEUDIFY_DATABASE_VERSION=8.0","title":"Beispiel"},{"location":"de/setup/configuration/#pseudify_database_ssl_insecure","text":"Default: <leer> Wird aufgel\u00f6st zu Verbindungsparameter: doctrine.dbal.connections.default.options.TrustServerCertificate Wird der Wert von PSEUDIFY_DATABASE_SSL_INSECURE auf 1 gesetzt, so wird keine \u00dcberpr\u00fcfung des TLS-Zertifikats des Datenbankservers vorgenommen. Dieser Wert wird nur bei der Nutzung der folgenden Treiber verwendet: pdo_sqlsrv sqlsrv PSEUDIFY_DATABASE_SSL_INSECURE=1","title":"PSEUDIFY_DATABASE_SSL_INSECURE"},{"location":"de/setup/configuration/#erweiterte-verbindungseinstellungen","text":"Wenn Du weitere Treiberoptionen konfigurieren musst, so kannst Du dies in der Datei config/configuration.yaml tun. Beispiele und Informationen f\u00fcr Treiberoptionen finden sich in folgenden Dokumenten: Symfony DoctrineBundle - Doctrine DBAL Configuration Doctrine DBAL- Connection Details Nach \u00c4nderungen an den Verbindungseinstellungen muss der Cache geleert werden pseudify cache:clear","title":"Erweiterte Verbindungseinstellungen"},{"location":"de/setup/configuration/#multiple-verbindungskonfigurationen","text":"Es ist m\u00f6glich, mehrere Verbindungen zu konfigurieren. Als Standardverbindung wird die Verbindung mit dem Namen default verwendet . In der Datei config/configuration.yaml k\u00f6nnen weitere Verbindungen unter anderem Namen konfiguriert werden. doctrine: dbal: connections: myCustomConnection: driver: sqlsrv # ... Die konfigurierten Verbindungen k\u00f6nnen mit dem Parameter --connection verwendet werden pseudify pseudify:pseudonymize --connection myCustomConnection myPseudonymizationProfileName pseudify pseudify:debug:pseudonymize --connection myCustomConnection myPseudonymizationProfileName pseudify pseudify:analyze --connection myCustomConnection myAnalysisProfileName pseudify pseudify:debug:analyze --connection myCustomConnection myAnalysisProfileName pseudify pseudify:debug:table_schema --connection myCustomConnection","title":"Multiple Verbindungskonfigurationen"},{"location":"de/setup/configuration/#registrieren-von-benutzerdefinierten-datentypen","text":"Werden benutzerdefinierte Datentypen ben\u00f6tigt, so kannst Du diese auf Verbindungsebene in der Datei config/configuration.yaml definieren. Beispielimplementationen f\u00fcr benutzerdefinierte Datentypen finden sich in folgenden Dateien: src/Types/TYPO3/EnumType.php src/Types/TYPO3/SetType.php Diese benutzerdefinierten Datentypen k\u00f6nnen dann mittels Konfiguration in der Datei config/configuration.yaml verwendet werden doctrine: dbal: connections: default: types: enum: Waldhacker\\Pseudify\\Types\\TYPO3\\EnumType set: Waldhacker\\Pseudify\\Types\\TYPO3\\SetType mapping_types: enum: enum set: set Beispiele und Informationen f\u00fcr benutzerdefinierte Datentypen finden sich in folgenden Dokumenten: Symfony DoctrineBundle - Registering custom Mapping Types Symfony DoctrineBundle - Registering custom Mapping Types in the SchemaTool Doctrine DBAL - Custom Mapping Types Nach dem Hinzuf\u00fcgen benutzerdefinierter Datentypen muss der Cache geleert werden pseudify cache:clear","title":"Registrieren von benutzerdefinierten Datentypen"},{"location":"de/setup/configuration/#registrieren-von-benutzerdefinierten-faker-formatierern","text":"Die FakerPHP/Faker Komponente bringt eine Menge vordefinierter Formatierer mit um diverse Datenformate zu generieren. Wenn Du benutzerdefinierte Formatierer verwenden m\u00f6chtest, so kannst Du die Implementierung am Beispiel des BobRossLipsumProvider abschauen. Der benutzerdefinierte Formatierer muss das Interface Waldhacker\\Pseudify\\Core\\Faker\\FakeDataProviderInterface implementieren, damit er ins System integriert wird. Wie Formatierer Daten generieren k\u00f6nnen l\u00e4sst sich am Besten anhand der Provider im FakerPHP/Faker Projekt abschauen. Nach dem Hinzuf\u00fcgen benutzerdefinierter Faker-Formatierern muss der Cache geleert werden pseudify cache:clear","title":"Registrieren von benutzerdefinierten Faker-Formatierern"},{"location":"de/setup/configuration/#registrieren-von-benutzerdefinierten-dekodierern-enkodierern","text":"Das pseudify EncoderInterface ist kompatibel zum EncoderInterface und DecoderInterface der Symfony serializer Komponente . Wenn Du benutzerdefinierte Dekodierer / Enkodierer verwenden m\u00f6chtest, so kannst Du die Implementierung am Beispiel des Rot13Encoder abschauen. Der benutzerdefinierte Dekodierer / Enkodierer muss das Interface Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\EncoderInterface implementieren, damit er ins System integriert wird. Wie Dekodierer / Enkodierer Daten dekodieren und encodieren k\u00f6nnen l\u00e4sst sich am Besten anhand der Built-in Dekodierer / Enkodierer abschauen. Nach dem hinzuf\u00fcgen benutzerdefinierter Dekodierer / Enkodierer muss der Cache geleert werden pseudify cache:clear Note Benutzerdefinierte Dekodierer / Enkodierer sollten der Namenskonvention <Format>Encoder folgen (z.B. HexEncoder , Rot13Encoder uws.). Dies stellt sicher, dass Debug-Kommandos wie pseudify:debug:analyze die Namen der Dekodierer / Enkodierer gut darstellen k\u00f6nnen.","title":"Registrieren von benutzerdefinierten Dekodierern / Enkodierern"},{"location":"de/setup/configuration/#zugriff-auf-host-datenbankserver-aus-dem-docker-container-heraus","text":"M\u00f6chte man auf Datenbankserver, welche auf dem Host-System laufen, aus dem docker Container heraus zugreifen, so kann dies auf unterschiedlichen Wegen umgesetzt werden. Nachfolgend werden 3 beschrieben.","title":"Zugriff auf Host-Datenbankserver aus dem docker Container heraus"},{"location":"de/setup/configuration/#add-host-variante","text":"F\u00fcge dem docker run Befehl den Parameter --add-host=host.docker.internal:host-gateway hinzu um innerhalb des docker Containers die IP-Adresse des docker gateways auf dem Host-System unter dem Hostnamen host.docker.internal zur Verf\u00fcgung zu stellen. Die Option PSEUDIFY_DATABASE_HOST in der .env Datei muss den Wert host.docker.internal erhalten. Note Damit diese Variante funktioniert, muss der Port des Datenbankservers auf dem docker gateway ge\u00f6ffnet sein.","title":"add-host Variante"},{"location":"de/setup/configuration/#beispiel_10","text":".env: PSEUDIFY_DATABASE_HOST=host.docker.internal Befehl: docker run -it -v $(pwd):/data --add-host=host.docker.internal:host-gateway \\ ghcr.io/waldhacker/pseudify pseudify:debug:table_schema","title":"Beispiel"},{"location":"de/setup/configuration/#host-ip-variante","text":"Die Option PSEUDIFY_DATABASE_HOST in der .env Datei muss die IP-Adresse des Host-Systems erhalten. Note Damit diese Variante funktioniert, muss der Port des Datenbankservers auf dieser IP des Host-Systems ge\u00f6ffnet sein.","title":"Host-IP Variante"},{"location":"de/setup/configuration/#beispiel_11","text":".env: PSEUDIFY_DATABASE_HOST=192.168.178.31 Befehl: docker run -it -v $(pwd):/data ghcr.io/waldhacker/pseudify pseudify:debug:table_schema","title":"Beispiel"},{"location":"de/setup/configuration/#geschwisterservice-variante","text":"Der Datenbankserver wird parallel zum pseudify Container mittels docker gestartet. Beide Container werden mit demselben docker Netzwerk verbunden und k\u00f6nnen somit untereinander kommunizieren.","title":"Geschwisterservice Variante"},{"location":"de/setup/configuration/#beispiel_12","text":"Erzeugen des gemeinsamen docker Netzwerks (falls noch keines vorhanden ist) mit dem Namen pseudify-net : docker network create pseudify-net Started des Datenbankservers am Beispiel des MariaDB Containers . Der Datenbankserver wird gestartet und in das Netzwerk pseudify-net aufgenommen ( --network pseudify-net ). Dem Container wird der Name mariadb_10_5 gegeben ( --name mariadb_10_5 ), unter welchem die Datenbank dann f\u00fcr den pseudify Container erreichbar sein wird. Note Damit der Import der Testdatenbank ( -v $(pwd)/tests/mariadb/10.5:/docker-entrypoint-initdb.d ) korrekt funktioniert, muss der Befehl im Hauptverzeichnis der Profile Templates ausgef\u00fchrt werden. docker run --rm --detach \\ --network pseudify-net \\ --name mariadb_10_5 \\ --env MARIADB_USER=pseudify \\ --env MARIADB_PASSWORD='pseudify(!)w4ldh4ck3r' \\ --env MARIADB_ROOT_PASSWORD='pseudify(!)w4ldh4ck3r' \\ --env MARIADB_DATABASE=pseudify_utf8mb4 \\ -v $(pwd)/tests/mariadb/10.5:/docker-entrypoint-initdb.d \\ mariadb:10.5 cp tests/mariadb/10.5/.env .env .env: PSEUDIFY_DATABASE_HOST=mariadb_10_5 Befehl: docker run -it -v $(pwd):/data --network=pseudify-net \\ ghcr.io/waldhacker/pseudify pseudify:debug:table_schema","title":"Beispiel"},{"location":"de/setup/configuration/#uberblick-uber-die-konfiguration","text":"Es existieren Kommandos, um die konfiguration des Systems zu \u00fcberpr\u00fcfen","title":"\u00dcberblick \u00fcber die Konfiguration"},{"location":"de/setup/configuration/#pseudifyinformation","text":"Das Kommando pseudify pseudify:information listet: verf\u00fcgbare Profile, um die Datenbank zu analysieren ( Registered analyze profiles ) verf\u00fcgbare Profile, um die Datenbank zu pseudonymisieren ( Registered pseudonymize profiles ) registrierte Datentypen ( Registered doctrine types ) im System verf\u00fcgbare Datenbanktreiber ( Available built-in database drivers ) Informationen pro konfigurierte Verbindung ( Connection information for connection \"<connecntion name>\" ) Informationen welche Datenbank-Datentypen mit welchen Doctrine Implementierungen verkn\u00fcpft sind ( Registered doctrine database data type mappings ) Informationen \u00fcber die verwendeten Doctrine Treiber-Implementierungen und den verwendeten Systemtreiber ( Connection details ) $ pseudify pseudify:information Registered analyze profiles --------------------------- -------------- Profile name -------------- typo3Example test-profile -------------- Registered pseudonymize profiles -------------------------------- -------------- Profile name -------------- typo3Example test -------------- Registered doctrine types ------------------------- ---------------------- --------------------------------------------- Doctrine type name Doctrine type implementation ---------------------- --------------------------------------------- array Doctrine\\DBAL\\Types\\ArrayType ascii_string Doctrine\\DBAL\\Types\\AsciiStringType bigint Doctrine\\DBAL\\Types\\BigIntType binary Doctrine\\DBAL\\Types\\BinaryType blob Doctrine\\DBAL\\Types\\BlobType boolean Doctrine\\DBAL\\Types\\BooleanType date Doctrine\\DBAL\\Types\\DateType date_immutable Doctrine\\DBAL\\Types\\DateImmutableType dateinterval Doctrine\\DBAL\\Types\\DateIntervalType datetime Doctrine\\DBAL\\Types\\DateTimeType datetime_immutable Doctrine\\DBAL\\Types\\DateTimeImmutableType datetimetz Doctrine\\DBAL\\Types\\DateTimeTzType datetimetz_immutable Doctrine\\DBAL\\Types\\DateTimeTzImmutableType decimal Doctrine\\DBAL\\Types\\DecimalType float Doctrine\\DBAL\\Types\\FloatType guid Doctrine\\DBAL\\Types\\GuidType integer Doctrine\\DBAL\\Types\\IntegerType json Doctrine\\DBAL\\Types\\JsonType object Doctrine\\DBAL\\Types\\ObjectType simple_array Doctrine\\DBAL\\Types\\SimpleArrayType smallint Doctrine\\DBAL\\Types\\SmallIntType string Doctrine\\DBAL\\Types\\StringType text Doctrine\\DBAL\\Types\\TextType time Doctrine\\DBAL\\Types\\TimeType time_immutable Doctrine\\DBAL\\Types\\TimeImmutableType ---------------------- --------------------------------------------- Available built-in database drivers ----------------------------------- ------------ ------------------------------------------------------------------------------------ ------------------- Driver Description Installed version ------------ ------------------------------------------------------------------------------------ ------------------- MySQL / MariaDB ------------ ------------------------------------------------------------------------------------ ------------------- pdo_mysql A MySQL driver that uses the pdo_mysql PDO extension 8.1.14 mysqli A MySQL driver that uses the mysqli extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- PostgreSQL ------------ ------------------------------------------------------------------------------------ ------------------- pdo_pgsql A PostgreSQL driver that uses the pdo_pgsql PDO extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- SQLite ------------ ------------------------------------------------------------------------------------ ------------------- pdo_sqlite An SQLite driver that uses the pdo_sqlite PDO extension 8.1.14 sqlite3 An SQLite driver that uses the sqlite3 extension 8.1.14 ------------ ------------------------------------------------------------------------------------ ------------------- SQL Server ------------ ------------------------------------------------------------------------------------ ------------------- pdo_sqlsrv A Microsoft SQL Server driver that uses pdo_sqlsrv PDO 5.10.1 sqlsrv A Microsoft SQL Server driver that uses the sqlsrv PHP extension 5.10.1 ------------ ------------------------------------------------------------------------------------ ------------------- Oracle Database ------------ ------------------------------------------------------------------------------------ ------------------- pdo_oci An Oracle driver that uses the pdo_oci PDO extension (not recommended by doctrine) N/A oci8 An Oracle driver that uses the oci8 PHP extension N/A ------------ ------------------------------------------------------------------------------------ ------------------- IBM DB2 ------------ ------------------------------------------------------------------------------------ ------------------- pdo_ibm An DB2 driver that uses the pdo_ibm PHP extension N/A ibm_db2 An DB2 driver that uses the ibm_db2 extension N/A ------------ ------------------------------------------------------------------------------------ ------------------- Connection information for connection \"default\" =============================================== Registered doctrine database data type mappings ----------------------------------------------- --------------- -------------------- ------------------------------------- Database type Doctrine type name Doctrine type implementation --------------- -------------------- ------------------------------------- bigint bigint Doctrine\\DBAL\\Types\\BigIntType binary binary Doctrine\\DBAL\\Types\\BinaryType blob blob Doctrine\\DBAL\\Types\\BlobType char string Doctrine\\DBAL\\Types\\StringType date date Doctrine\\DBAL\\Types\\DateType datetime datetime Doctrine\\DBAL\\Types\\DateTimeType decimal decimal Doctrine\\DBAL\\Types\\DecimalType double float Doctrine\\DBAL\\Types\\FloatType float float Doctrine\\DBAL\\Types\\FloatType int integer Doctrine\\DBAL\\Types\\IntegerType integer integer Doctrine\\DBAL\\Types\\IntegerType longblob blob Doctrine\\DBAL\\Types\\BlobType longtext text Doctrine\\DBAL\\Types\\TextType mediumblob blob Doctrine\\DBAL\\Types\\BlobType mediumint integer Doctrine\\DBAL\\Types\\IntegerType mediumtext text Doctrine\\DBAL\\Types\\TextType numeric decimal Doctrine\\DBAL\\Types\\DecimalType real float Doctrine\\DBAL\\Types\\FloatType set simple_array Doctrine\\DBAL\\Types\\SimpleArrayType smallint smallint Doctrine\\DBAL\\Types\\SmallIntType string string Doctrine\\DBAL\\Types\\StringType text text Doctrine\\DBAL\\Types\\TextType time time Doctrine\\DBAL\\Types\\TimeType timestamp datetime Doctrine\\DBAL\\Types\\DateTimeType tinyblob blob Doctrine\\DBAL\\Types\\BlobType tinyint boolean Doctrine\\DBAL\\Types\\BooleanType tinytext text Doctrine\\DBAL\\Types\\TextType varbinary binary Doctrine\\DBAL\\Types\\BinaryType varchar string Doctrine\\DBAL\\Types\\StringType year date Doctrine\\DBAL\\Types\\DateType json json Doctrine\\DBAL\\Types\\JsonType _text text Doctrine\\DBAL\\Types\\TextType --------------- -------------------- ------------------------------------- Connection details ------------------ --------------------------------------- ----------------------------------------- Name Value --------------------------------------- ----------------------------------------- Used connection implementation Doctrine\\DBAL\\Connection Used database driver implementation Doctrine\\DBAL\\Driver\\PDO\\MySQL\\Driver Used database platform implementation Doctrine\\DBAL\\Platforms\\MySQL80Platform Used database platform version 10.5 Used built-in database driver pdo_mysql (8.1.14) --------------------------------------- -----------------------------------------","title":"pseudify:information"},{"location":"de/setup/configuration/#debugconfig-doctrinebundle","text":"Das Kommando listet die zusammengefasste Datenbankkonfiguration auf, welche aus der Core-Konfiguration und der benutzerdefinierten Konfiguration besteht. $ pseudify debug:config DoctrineBundle Current configuration for \"DoctrineBundle\" ========================================== doctrine: dbal: connections: default: driver: '%env(PSEUDIFY_DATABASE_DRIVER)%' host: '%env(PSEUDIFY_DATABASE_HOST)%' port: '%env(PSEUDIFY_DATABASE_PORT)%' user: '%env(PSEUDIFY_DATABASE_USER)%' password: '%env(PSEUDIFY_DATABASE_PASSWORD)%' dbname: '%env(PSEUDIFY_DATABASE_SCHEMA)%' path: '%env(PSEUDIFY_DATABASE_SCHEMA)%' charset: '%env(PSEUDIFY_DATABASE_CHARSET)%' server_version: '%env(PSEUDIFY_DATABASE_VERSION)%' options: TrustServerCertificate: '%env(PSEUDIFY_DATABASE_SSL_INSECURE)%' mapping_types: _text: text logging: false profiling: false profiling_collect_backtrace: false profiling_collect_schema_errors: true default_table_options: { } slaves: { } replicas: { } shards: { } types: { }","title":"debug:config DoctrineBundle"},{"location":"de/setup/configuration/#debugdotenv","text":"Das Kommando listet die Werte aus der .env Datei auf. $ pseudify debug:dotenv Dotenv Variables & Files ======================== Variables --------- ---------------------------- ----------------------- Variable Value ---------------------------- ----------------------- APP_ENV dev PSEUDIFY_DATABASE_CHARSET utf8mb4 PSEUDIFY_DATABASE_DRIVER pdo_mysql PSEUDIFY_DATABASE_HOST mariadb_10_5 PSEUDIFY_DATABASE_PASSWORD pseudify(!)w4ldh4ck3r PSEUDIFY_DATABASE_PORT 3306 PSEUDIFY_DATABASE_SCHEMA pseudify_utf8mb4 PSEUDIFY_DATABASE_USER pseudify PSEUDIFY_DATABASE_VERSION 10.5 ---------------------------- -----------------------","title":"debug:dotenv"},{"location":"de/setup/installation/","text":"Installation Pseudify kann in 2 Varianten verwendet werden mittels docker container (empfohlen) mittels phar Archiv docker Image (empfohlen) Abh\u00e4ngigkeiten Folgende Komponenten m\u00fcssen installiert werden: docker Der docker container enth\u00e4lt alle ben\u00f6tigten Abh\u00e4ngigkeiten, um pseudify mit allen unterst\u00fctzten Datenbanktypen auszuf\u00fchren. Starte mit den Profile Templates Profile Templates Die Profile Templates beinhalten die Grundkonfiguration f\u00fcr pseudify und liefern Basisprofile f\u00fcr diverse Applikationen. Sie sind die ideale Grundlage, um die Pseudonymisierung Deiner Applikation zu modellieren. Download der \"Profile Templates\": docker run -it -v $(pwd):/app -u $(id -u):$(id -g) \\ composer create-project --no-dev --remove-vcs waldhacker/pseudify-profile-templates . Die .env erzeugen und editieren cp .env.example .env Testen ob alles funktioniert docker run -it -v $(pwd):/data \\ ghcr.io/waldhacker/pseudify pseudify:information PHAR Archiv Abh\u00e4ngigkeiten Wird das PHAR Archiv verwendet, so m\u00fcssen die ben\u00f6tigten Abh\u00e4ngigkeiten manuell installiert werden. Folgende Komponenten m\u00fcssen installiert werden: PHP 8.1 Folgende PHP-Erweiterungen m\u00fcssen installiert werden, je nachdem welche Datenbanktypen verwendet werden: pdo_mysql (A MySQL driver that uses the pdo_mysql PDO extension) mysqli (A MySQL driver that uses the mysqli extension) pdo_pgsql (A PostgreSQL driver that uses the pdo_pgsql PDO extension) pdo_sqlite (An SQLite driver that uses the pdo_sqlite PDO extension) sqlite3 (An SQLite driver that uses the sqlite3 extension) pdo_sqlsrv (A Microsoft SQL Server driver that uses pdo_sqlsrv PDO) Microsoft ODBC Driver for SQL Server sqlsrv (A Microsoft SQL Server driver that uses the sqlsrv PHP extension) Microsoft ODBC Driver for SQL Server pdo_oci (An Oracle driver that uses the pdo_oci PDO extension (not recommended by doctrine)) oci8 (An Oracle driver that uses the oci8 PHP extension) pdo_ibm (An DB2 driver that uses the pdo_ibm PHP extension) ibm_db2 (An DB2 driver that uses the ibm_db2 extension) Starte mit den Profile Templates Profile Templates Die Profile Templates beinhalten die Grundkonfiguration f\u00fcr pseudify und liefern Basisprofile f\u00fcr diverse Applikationen. Sie sind die ideale Grundlage, um die Pseudonymisierung Deiner Applikation zu modellieren. Download der \"Profile Templates\": docker run -it -v $(pwd):/app -u $(id -u):$(id -g) \\ composer create-project --no-dev --remove-vcs waldhacker/pseudify-profile-templates . Das PHAR Archiv in denselben Ordner herunterladen, in dem die pseudify Profile aus dem vorherigen Schritt installiert wurden. curl -sLo pseudify https://github.com/waldhacker/pseudify-core/releases/latest/download/pseudify.phar chmod u+x pseudify Die .env erzeugen und editieren cp .env.example .env Testen ob alles funktioniert ./pseudify pseudify:information alternativer Installationsort Das pseudify PHAR Archiv kann auch an einem anderen Ort (z.B. global unter /usr/bin/pseudify ) installiert werden. Mit dem Parameter --data kann pseudify der Pfad zu den pseudify Profilen, welche verwendet werden sollen, mitgeteilt werden. /usr/bin/pseudify --data /home/project/path/to/pseudify-profile-templates pseudify:information","title":"Installation"},{"location":"de/setup/installation/#installation","text":"Pseudify kann in 2 Varianten verwendet werden mittels docker container (empfohlen) mittels phar Archiv","title":"Installation"},{"location":"de/setup/installation/#docker-image-empfohlen","text":"Abh\u00e4ngigkeiten Folgende Komponenten m\u00fcssen installiert werden: docker Der docker container enth\u00e4lt alle ben\u00f6tigten Abh\u00e4ngigkeiten, um pseudify mit allen unterst\u00fctzten Datenbanktypen auszuf\u00fchren. Starte mit den Profile Templates Profile Templates Die Profile Templates beinhalten die Grundkonfiguration f\u00fcr pseudify und liefern Basisprofile f\u00fcr diverse Applikationen. Sie sind die ideale Grundlage, um die Pseudonymisierung Deiner Applikation zu modellieren. Download der \"Profile Templates\": docker run -it -v $(pwd):/app -u $(id -u):$(id -g) \\ composer create-project --no-dev --remove-vcs waldhacker/pseudify-profile-templates . Die .env erzeugen und editieren cp .env.example .env Testen ob alles funktioniert docker run -it -v $(pwd):/data \\ ghcr.io/waldhacker/pseudify pseudify:information","title":"docker Image (empfohlen)"},{"location":"de/setup/installation/#phar-archiv","text":"Abh\u00e4ngigkeiten Wird das PHAR Archiv verwendet, so m\u00fcssen die ben\u00f6tigten Abh\u00e4ngigkeiten manuell installiert werden. Folgende Komponenten m\u00fcssen installiert werden: PHP 8.1 Folgende PHP-Erweiterungen m\u00fcssen installiert werden, je nachdem welche Datenbanktypen verwendet werden: pdo_mysql (A MySQL driver that uses the pdo_mysql PDO extension) mysqli (A MySQL driver that uses the mysqli extension) pdo_pgsql (A PostgreSQL driver that uses the pdo_pgsql PDO extension) pdo_sqlite (An SQLite driver that uses the pdo_sqlite PDO extension) sqlite3 (An SQLite driver that uses the sqlite3 extension) pdo_sqlsrv (A Microsoft SQL Server driver that uses pdo_sqlsrv PDO) Microsoft ODBC Driver for SQL Server sqlsrv (A Microsoft SQL Server driver that uses the sqlsrv PHP extension) Microsoft ODBC Driver for SQL Server pdo_oci (An Oracle driver that uses the pdo_oci PDO extension (not recommended by doctrine)) oci8 (An Oracle driver that uses the oci8 PHP extension) pdo_ibm (An DB2 driver that uses the pdo_ibm PHP extension) ibm_db2 (An DB2 driver that uses the ibm_db2 extension) Starte mit den Profile Templates Profile Templates Die Profile Templates beinhalten die Grundkonfiguration f\u00fcr pseudify und liefern Basisprofile f\u00fcr diverse Applikationen. Sie sind die ideale Grundlage, um die Pseudonymisierung Deiner Applikation zu modellieren. Download der \"Profile Templates\": docker run -it -v $(pwd):/app -u $(id -u):$(id -g) \\ composer create-project --no-dev --remove-vcs waldhacker/pseudify-profile-templates . Das PHAR Archiv in denselben Ordner herunterladen, in dem die pseudify Profile aus dem vorherigen Schritt installiert wurden. curl -sLo pseudify https://github.com/waldhacker/pseudify-core/releases/latest/download/pseudify.phar chmod u+x pseudify Die .env erzeugen und editieren cp .env.example .env Testen ob alles funktioniert ./pseudify pseudify:information alternativer Installationsort Das pseudify PHAR Archiv kann auch an einem anderen Ort (z.B. global unter /usr/bin/pseudify ) installiert werden. Mit dem Parameter --data kann pseudify der Pfad zu den pseudify Profilen, welche verwendet werden sollen, mitgeteilt werden. /usr/bin/pseudify --data /home/project/path/to/pseudify-profile-templates pseudify:information","title":"PHAR Archiv"},{"location":"de/usage/analyze/","text":"Analysieren Die Analyse modellieren Info Alle in diesem Tutorial beschriebenen Modellierungen kannst Du Dir mit Kommentaren im Testordner der Profile Templates (TestAnalyzeProfile.php) anschauen. Einen \u00dcberblick verschaffen Um einen \u00dcberblick \u00fcber die Daten in der Datenbank zu bekommen, kann das Kommando pseudify:debug:table_schema verwendet werden. Du kannst aber nat\u00fcrlich auch jedes andere Tool Deiner Wahl dazu verwenden. $ pseudify pseudify:debug:table_schema wh_log ------ -------------------- --------- --------------------------------------------------------------------------------------------------------- column type data example -------------------- --------- --------------------------------------------------------------------------------------------------------- id integer 6 log_type string foo log_data blob 613a323a7b693a303b733a33383a223466623a313434373a646566623a396434373a613265303a613336613a313064333a66... log_message text {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} ip string 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 -------------------- --------- --------------------------------------------------------------------------------------------------------- wh_meta_data ------------ --------------------- --------- --------------------------------------------------------------------------------------------------------- column type data example --------------------- --------- --------------------------------------------------------------------------------------------------------- id integer 5 meta_data blob 1f8b08000000000000036592dd6ea33010855f65657159116ca0818922f52fca6ea5d52a4bab46bd89066c821b302c769246... --------------------- --------- --------------------------------------------------------------------------------------------------------- wh_user ------- -------------------- --------- ---------------------------------------------------------------------------------------------- column type data example -------------------- --------- ---------------------------------------------------------------------------------------------- id integer 5 username string howell.damien password string $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs first_name string Mckayla last_name string Stoltenberg email string cassin.bernadette@example.net city string South Wilfordland -------------------- --------- ---------------------------------------------------------------------------------------------- wh_user_session --------------- ------------------- --------- -------------------------------------------------------------------- column type data example ------------------- --------- -------------------------------------------------------------------- id integer 5 session_data blob a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";} session_data_json text {\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}} ------------------- --------- -------------------------------------------------------------------- Das Kommando gibt nacheinander alle Tabellen der Datenbank aus und listet deren Spalten auf. In der Spalte column befindet sich der Name der Datenbankspalte. In der Spalte type steht ein menschenlesbarer Name des Datentyps der Datenbankspalte. In der Spalte data example befindet sich der jeweils l\u00e4ngste Datensatz, welcher in der Datenbank in dieser Datenbankspalte gefunden werden kann. Nach 100 Zeichen werden die Daten abgeschnitten. Halte Ausschauen nach personenbezogenen Daten, welche Du pseudonymisieren m\u00f6chtest. Suche nach Namen, Benutzernamen, Passw\u00f6rtern, Adressen, E-Mail-Adressen, IP-Adressen, Telefonnummern, ID-Nummern wie Versicherungsnummern, Profildaten wie Gr\u00f6\u00dfe oder Gewicht usw. Info Falls Du Anregungen brauchst, dann lies das Kapitel Was sollte pseudonymisiert werden? Merke Dir am besten die Spalten mit direkt sichtbaren personenbezogenen Daten, also die Spalten welche Daten im Klartext enthalten und nicht Spalten mit komplexeren Datenstrukturen wie JSON (z.B. die Spalte wh_log.log_message ) oder Spalten in denen die Daten in enkodierter Form vorliegen (z.B. die Spalte wh_log.log_data ). Im Beispiel w\u00e4ren die bevorzugten Spalten: wh_log.ip wh_user.username wh_user.password wh_user.first_name wh_user.last_name wh_user.email wh_user.city Ein \"Analyze Profile\" modellieren Ein \"Profile\" anlegen Lege im Ordner src/Profiles eine PHP Datei mit einem beliebigen Namen an. Im Beispiel wird die Datei TestAnalyzeProfile.php genannt. Die Datei bekommt folgenden Inhalt: <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); return $tableDefinition; } } Die Methode getIdentifier() muss eine eindeutige Bezeichnung Deines Profils wiedergeben und sollte nur aus Buchstaben, Zahlen oder den Zeichen - und _ bestehen und darf keine Leerzeichen enthalten. Nach der Erzeugung des Profils muss der Cache geleert werden $ pseudify cache:clear Der Befehl pseudify pseudify:debug:analyze test-profile gibt Dir nun bereits Informationen \u00fcber Dein Profil aus $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ------- -------- --------------- ----------------- Table column data decoders data collectors ------- -------- --------------- ----------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Quelldaten definieren Info Das \"Analyze Profile\" ist dazu da, um herauszufinden in welchen \"unbeleuchteten\" Ecken der Datenbank sich personenbezogene Daten verstecken. Wir verwenden darum die uns bereits bekannten personenbezogene Daten, welche wir im ersten Schritt identifiziert haben, um sie in der restlichen Datenbank aufzusp\u00fcren. Wir haben personenbezogene Daten in folgenden Spalten identifiziert: wh_log.ip wh_user.username wh_user.password wh_user.first_name wh_user.last_name wh_user.email wh_user.city Du musst pseudify nun mitteilen, dass Du die Daten in diesen Spalten als Quelldaten verwenden m\u00f6chtest. Dazu erweiterst Du die Methode getTableDefinition() im Profil public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ; return $tableDefinition; } Mit der Methode addSourceTable() sagst Du pseudify, in welcher Datenbanktabelle und in welchen Datenbankspalten die Quelldaten gesammelt werden sollen. Pseudify wird dann automatisch in allen anderen Datenbankspalten der Datenbanktabellen nach Vorkommen der Quelldaten suchen und diese ausgeben. Zuvor standen in der Ausgabe des Kommandos pseudify:debug:analyze test-profile unter Search data in this tables alle Datenbanktabellen und alle Datenbankspalten. Nun werden dort nur noch die Datenbanktabellen und deren Datenbankspalten aufgelistet, welche nicht als Quelldaten mittels addSourceTable() definiert wurden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Enkodierte Daten als Quelldaten Es kommt vor, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss w\u00e4hrend der Analyse dekodiert werden, um ihn als Quelldaten verwenden zu k\u00f6nnen. \u00c4hnlich wie unter \"Enkodierte Daten durchsuchen\" beschrieben k\u00f6nnen auch die Datenbankspalten der Quelldaten dekodiert werden. Der Methode SourceColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Note Wie unter \"Mehrfach enkodierte Daten durchsuchen\" beschrieben kann auch hier der ChainedEncoder verwendet werden, um mehrfach enkodierte Daten zu dekodieren. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_test_table', columns: [ SourceColumn::create(identifier: 'wh_test_column', dataType: SourceColumn::DATA_TYPE_HEX), ]) ; return $tableDefinition; } } Du siehst unter Collect search data from this tables nun, dass unter data decoders der Datenbankspalte session_data_json der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des HexEncoder dekodiert werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ----------------- -------------------------- --------------- ---------------------- Table column data decoders data collectors ----------------- -------------------------- --------------- ---------------------- wh_test_table wh_test_column (text) Hex default (scalar data) ----------------- -------------------------- --------------- ---------------------- Search data in this tables -------------------------- ----------------- --------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- --------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- --------------------- --------------- ----------------------- Alternativ kann die ausgeschriebene Variante ->setEncoder(encoder: new HexEncoder()) verwendet werden: <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_test_table', columns: [ SourceColumn::create(identifier: 'wh_test_column')->setEncoder(encoder: new HexEncoder()), ]) ; return $tableDefinition; } } Suche optimieren Ohne weitere Definition wird pseudify die Quelldaten in allen Datenbanktabellen und deren Datenbankspalten suchen, welche nicht als Quelldaten mittels addSourceTable() bzw. addColumn() definiert wurden. Damit die Analyse nicht unn\u00f6tig lange dauert, kann die Suche optimiert werden. Ziel ist es in der Regel, nur \"Text\" (Strings) zu durchsuchen. Datentypen ausschlie\u00dfen Du kannst Spalten mit bestimmten Datentypen von der Suche ausschlie\u00dfen, um die Suchzeit zu verk\u00fcrzen. Es macht z.B. in den meisten F\u00e4llen keinen Sinn, Datenbankspalten vom Typ integer zu durchsuchen. Datentypen lassen sich auf Tabellenebene ausschlie\u00dfen oder global f\u00fcr alle Tabellen. Sobald auf Tabellenebene Datentypen ausgeschlossen werden, werden auf dieser Tabelle die global ausgeschlossenen Datentypen nicht zus\u00e4tzlich ausgeschlossen. Info Die Namen der Datentypen kannst Du im Quellcode des Doctrine Projekts finden, z.B.: string , integer , datetime etc. Info Es existiert die Konstante TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES , welche alle Datentypen enth\u00e4lt, die in der Regel nicht durchsucht werden m\u00fcssen. Datentypen auf Tabellenebene ausschlie\u00dfen Um in der Tabelle wh_meta_data alle Spalten mit dem Datentyp integer von der Suche auszuschlie\u00dfen, musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: 'wh_meta_data', excludeColumnTypes: [ 'integer' ]) ; return $tableDefinition; } Die Methode addTargetTable() teilt der automatischen Tabellenkonfiguration mit, dass Du die Tabelle wh_meta_data speziell konfigurieren m\u00f6chtest. Im Parameter excludeColumnTypes kann ein Array von Datentypen \u00fcbergeben werden, welche bei der Suche ausgeschlossen werden sollen. Datentypen global ausschlie\u00dfen Um global in allen Tabellen alle Spalten mit dem Datentyp integer von der Suche auszuschlie\u00dfen, musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->excludeTargetColumnTypes(columnTypes: [ 'integer' ]) ; return $tableDefinition; } Die Methode excludeTargetColumnTypes() teilt der automatischen Tabellenkonfiguration mit, dass in allen Tabellen (welche keine speziellen Ausschl\u00fcsse definiert bekommen haben) alle Spalten vom Datentyp integer von der Suche ausgeschlossen werden sollen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass alle integer Spalten verschwunden sind. Du wirst in der Regel folgende Zeile im Profil integrieren wollen, um global alle Datentypen auszuschlie\u00dfen, bei denen es wenig Sinn macht sie zu durchsuchen : ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) Datenbankspalten ausschlie\u00dfen Die automatische Tabellenkonfiguration wird immer zuerst Datenbankspalten von der Suche ausschlie\u00dfen, welche anhand des Datentyps ausgeschlossen wurden. Zus\u00e4tzlich kannst Du im Profil auf Tabellenebene definieren, dass Datenbankspalten anhand ihres Namens von der Suche ausgeschlossen werden sollen. Dazu musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->addTargetTable(table: 'wh_log', excludeColumns: [ 'log_message', ]) ; return $tableDefinition; } Die Methode addTargetTable() teilt der automatischen Tabellenkonfiguration mit, dass Du die Tabelle wh_log speziell konfigurieren m\u00f6chtest. Im Parameter excludeColumns kann ein Array von Spaltennamen \u00fcbergeben werden, welche bei der Suche ausgeschlossen werden sollen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass die Spalte log_message der Tabelle wh_log verschwunden ist. Tabellen ausschlie\u00dfen Du kannst ganze Tabellen von der Suche ausschlie\u00dfen, um die Suchzeit zu verk\u00fcrzen. Die kann mit der Methode excludeTargetTables() erledigt werden. public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->excludeTargetTables(tables: [ 'wh_user', ]) ; return $tableDefinition; } Wie Du siehst, wird die Tabelle wh_user nicht mehr unter Search data in this tables aufgelistet. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ -------- ------------- --------------- ----------------------- Table column data decoders data collectors -------- ------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) -------- ------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- ---------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- ---------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_data_plaintext (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_meta_data meta_data_plaintext (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- ---------------------------- --------------- ----------------------- In den auszuschlie\u00dfenden Tabellennamen k\u00f6nnen regul\u00e4re Ausdr\u00fccke verwendet werden, z.B.: wh_user.* . Somit ist es z.B. m\u00f6glich, mehrere Tabellen auf einmal auszuschlie\u00dfen: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->excludeTargetTables(tables: [ 'wh_user.*', ]) ; return $tableDefinition; } Wie Du siehst, werden die Tabellen wh_user und die Tabelle wh_user_session nicht mehr unter Search data in this tables aufgelistet. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ -------- ------------- --------------- ----------------------- Table column data decoders data collectors -------- ------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) -------- ------------- --------------- ----------------------- Search data in this tables -------------------------- -------------- ---------------------------- --------------- ----------------------- Table column data decoders special data decoders -------------- ---------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_data_plaintext (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_meta_data meta_data_plaintext (blob) Scalar no further processing -------------- ---------------------------- --------------- ----------------------- Enkodierte Daten durchsuchen Es kommt vor, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss w\u00e4hrend der Analyse dekodiert werden. In unserem Beispiel enth\u00e4lt die Datenbankspalte log_data der Tabelle wh_log und die Datenbankspalte meta_data der Tabelle wh_meta_data enkodierte Daten. Wie diese Daten enkodiert sind, musst Du anhand des Quellcodes oder der Dokumentation der Applikation, welche die Datenbank verwendet, herausfinden. In unserem Beispiel sind die Daten der Datenbankspalte log_data (mit log_type = bar ) wie folgt kodiert. Datenbankdaten: 613a323a7b693a303b733a31353a223133322e3138382e3234312e313535223b733a343a2275736572223b4f3a383a22737464436c617373223a353a7b733a383a22757365724e616d65223b733a373a22637972696c3036223b733a383a226c6173744e616d65223b733a383a22486f6d656e69636b223b733a353a22656d61696c223b733a32313a22636c696e746f6e3434406578616d706c652e6e6574223b733a323a226964223b693a39313b733a343a2275736572223b523a333b7d7d Kodierung durch die Applikation: $plaintext = 'a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}'; $logData = bin2hex($plaintext); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Hierzu kann der Definition einer Datenbankspalte ( TargetColumn::create() ) der Datentyp (Parameter dataType ) \u00fcbergeben werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX), ] )) ; return $tableDefinition; } } Der Methode TargetColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Dies ist gleichbedeutend mit der ausgeschriebenen Variante ->setEncoder(encoder: new HexEncoder()) : <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data')->setEncoder(encoder: new HexEncoder()), ] )) ; return $tableDefinition; } } Beim Durchsuchen der Datenbankspalte log_data wird pseudify die Daten der Datenbankspalte dann immer mittels der Methode decode() des HexEncoder verarbeiten und anschlie\u00dfend das Resultat durchsuchen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_data (blob) Hex no further processing wh_log log_type (string) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte log_data der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des HexEncoder dekodiert werden. Mehrfach enkodierte Daten durchsuchen Es kommt vor, dass Daten in Datenbankspalten in mehrfach enkodierter Form abgespeichert sind. In unserem Beispiel sind die Daten der Datenbankspalte meta_data so kodiert: $plaintext = 'a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}'; $meta_data = bin2hex(gzencode($plaintext, 5, ZLIB_ENCODING_GZIP)); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform in ein Bin\u00e4rformat umgewandelt werden und dann m\u00fcssen die Bin\u00e4rdaten noch im ZLIB-Format dekomprimiert werden. Um mehrfache Dekodierung durchzuf\u00fchren, kann der ChainedEncoder verwendet werden. Mit dem ChainedEncoder k\u00f6nnen mehrere Dekodierer konfiguriert werden, welche dann der Reihe nach die Daten dekodieren. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_meta_data', columns: [ TargetColumn::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ] )) ; return $tableDefinition; } } Beim Durchsuchen der Datenbankspalte meta_data der Tabelle wh_meta_data wird pseudify die Daten der Datenbankspalte dann zuerst mittels der Methode decode() des HexEncoder und dann mittels der Methode decode() des GzEncodeEncoder verarbeiten und anschlie\u00dfend das Resultat durchsuchen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_meta_data meta_data (blob) Hex>GzEncode no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte wh_meta_data die Namen Hex>GzEncode aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden und dann mittels des GzEncodeEncoder. Unterschiedlich enkodierte Daten durchsuchen Es kommt vor, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Anhand von Bedingungen speichern Applikationen die Daten in anderen Formen ab. In unserem Beispiel sind die Daten der Datenbankspalte log_data wie folgt kodiert, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Datenbankdaten: 613a323a7b693a303b733a31353a223133322e3138382e3234312e313535223b733a343a2275736572223b4f3a383a22737464436c617373223a353a7b733a383a22757365724e616d65223b733a373a22637972696c3036223b733a383a226c6173744e616d65223b733a383a22486f6d656e69636b223b733a353a22656d61696c223b733a32313a22636c696e746f6e3434406578616d706c652e6e6574223b733a323a226964223b693a39313b733a343a2275736572223b523a333b7d7d Kodierung durch die Applikation: $plaintext = 'a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}'; $logData = bin2hex($plaintext); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Die Daten der Datenbankspalte log_data sind wie folgt kodiert, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. Datenbankdaten: 65794a3163325679546d46745a534936496e4a76626d46735a4738784e534973496d567459576c73496a6f6962574e6a624856795a5335765a6d5673615746415a586868625842735a53356a623230694c434a7359584e30546d46745a534936496b746c5a577870626d63694c434a7063434936496a457a4d6a45364e54646d597a6f304e6a42694f6d51305a4441365a44677a5a6a706a4d6a41774f6a52694f6d5978597a676966513d3d Kodierung durch die Applikation: $plaintext = '{\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}'; $logData = bin2hex(base64_encode($logDataPlaintext)); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden und dann im Base64-Format dekodiert werden. In beiden F\u00e4llen ( log_type == foo und log_type == bar ) k\u00f6nnen die Daten zuerst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Wenn die Datenbankspalte log_type == foo enth\u00e4lt, m\u00fcssen die Daten dann zus\u00e4tzlich noch base64 dekodiert werden. Dies kann wie folgt modelliert werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'decode conditional log data', processor: function (TargetDataDecoderContext $context): void { $row = $context->getDatebaseRow(); if ('foo' !== $row['log_type']) { return; } $data = $context->getDecodedData(); $encoder = new Base64Encoder(); $logData = $encoder->decode(data: $data); $context->setDecodedData(decodedData: $logData); } )), ] )) ; return $tableDefinition; } } Mit der Methode addDataProcessing() k\u00f6nnen zus\u00e4tzlich zur Dekodierung der Daten weitere manuelle Datentransformationen programmiert werden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ TargetDataDecoderContext aufgerufen. Durch den TargetDataDecoderContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird Mit der Methode setDecodedData() k\u00f6nnen manuell prozessierte Daten an pseudify \u00fcbergeben werden. Diese manuell prozessierte Daten werden dann von der Analyse durchsucht. In unserem Beispiel ermitteln wir anhand des Wertes der Datenbankspalte log_type ob die Daten noch weiter mittels base64 dekodiert werden m\u00fcssen. Ist der Wert von log_type nicht foo , so wird durch das return Statement nichts weiter prozessiert. Ist der Wert von log_type gleich foo , so werden die Daten mittels des Base64Encoder() dekodiert und durch die Methode setDecodedData() an pseudify zur\u00fcckgeschrieben. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------------- wh_log log_data (blob) Hex decode conditional log data wh_log log_type (string) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte wh_log der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden. Unter special data decoders wird das DataProcessing mit der Identifizierung decode conditional log data aufgelistet. Dies signalisiert Dir, dass nach der Dekodierung der Daten die Daten zus\u00e4tzlich mittels dieses DataProcessing verarbeitet werden. Json Daten normalisieren Liegen zu durchsuchende Daten im JSON-Format in der Datenbank, so m\u00f6chtest Du diese wahrscheinlich normalisieren, um sie f\u00fcr pseudify sinnvoll durchsuchbar zu machen. Beispielsweise werden UTF-8 Zeichen im JSON-Format maskiert, ein \u00d6 ist im JSON-Format durch die Zeichenkette \\u00d6 maskiert. Beispieldatensatz: \"{\"oldRecord\":{\"bodytext\":\"<p>In 2023 sind folgende \\u00d6ffentlichkeitsaktionen geplant:<\\/p>\"}}\" Angenommen pseudify soll nach dem Vorkommen des Wortes \u00d6ffentlichkeitsaktionen suchen, so wird pseudify dies im Beispieldatensatz durch die Maskierung nicht finden. Um den JSON-String zu normalisieren und ihn so aussehen zu lassen: \"{\"oldRecord\":{\"bodytext\":\"<p>In 2023 sind folgende \u00d6ffentlichkeitsaktionen geplant:</p>\"}}\" existiert das DataProcessing namens normalizedJsonString() . Das Hinzuf\u00fcgen dieses DataProcessing mittels ->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()) zu einer Datenbankspalte, welche JSON Datenstrukturen enth\u00e4lt, normalisiert den JSON-String und macht ihn f\u00fcr pseudify durchsuchbar. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_message')->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()), ] )) ; return $tableDefinition; } } Nicht-Skalare Quelldaten definieren Manchmal ist es notwendig, Daten aus komplexen Datenstrukturen als Quelldaten zu definieren. Als Beispiel m\u00f6chten wir Daten aus der Datenbankspalte session_data_json der Tabelle wh_user_session verwenden, um sie als Quelldaten zu verwenden. session_data_json enth\u00e4lt einen String im JSON-Format. In diesem gibt es eine Eigenschaft namens data bestehend aus einem Array mit der Eigenschaft last_ip welche wir als Quelldaten verwenden m\u00f6chten. {\"data\": {\"last_ip\":\"107.66.23.195\"}} Der Methode SourceColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Note Wie unter \"Mehrfach enkodierte Daten durchsuchen\" beschrieben kann auch hier der ChainedEncoder verwendet werden, um mehrfach enkodierte Daten zu dekodieren. Mit der Methode addDataProcessing() kann nun definiert werden, welche Daten aus der dekodierten Datenstruktur extrahiert werden sollen, um sie als Quelldaten zu verwenden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ SourceDataCollectorContext aufgerufen. Durch den SourceDataCollectorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird Mit der Methode addCollectedData() k\u00f6nnen die extrahierten Daten als Quelldaten an pseudify \u00fcbergeben werden. Die Methode addCollectedData() kann beliebig oft verwendet werden, um beliebige viele Quelldaten an pseudify zu \u00fcbergeben. Der Methode addCollectedData() kann entweder ein String \u00fcbergeben werden , oder ein eindimensionales Array. Wird ein Array \u00fcbergeben, so werden alle darin befindlichen skalaren Daten extrahiert und als Quelldaten an pseudify \u00fcbergeben. Info Wird kein DataProcessing definiert, so wird automatisch das Standard-DataProcessing SourceDataCollectorPreset::scalarData() verwendet. Dieses sammelt die Daten aus einer Datenbankspalte nur dann, wenn der Inhalt gr\u00f6\u00dfer oder gleich 3 Zeichen lang ist. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\SourceDataCollectorContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_user_session', columns: [ SourceColumn::create(identifier: 'session_data_json', dataType: SourceColumn::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'extract ip address', processor: function (SourceDataCollectorContext $context): void { $data = $context->getDecodedData(); $context->addCollectedData(data: $data['data']['last_ip']); } )), ]) ; return $tableDefinition; } } Du siehst unter Collect search data from this tables nun, dass unter data decoders der Datenbankspalte session_data_json der Name Json aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des JsonEncoder dekodiert werden. Unter data collectors wird das DataProcessing mit der Identifizierung extract ip address aufgelistet. Dies signalisiert Dir, dass nach der Dekodierung der Daten die Daten zus\u00e4tzlich mittels dieses DataProcessing gesammelt werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ----------------- -------------------------- --------------- -------------------- Table column data decoders data collectors ----------------- -------------------------- --------------- -------------------- wh_user_session session_data_json (text) Json extract ip address ----------------- -------------------------- --------------- -------------------- Search data in this tables -------------------------- ----------------- --------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- --------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- --------------------- --------------- ----------------------- Benutzerdefinierte Quelldaten definieren Es ist m\u00f6glich benutzerdefinierte Quelldaten zu definieren die sich nicht aus Datenbankspalten beziehen. Mit der Methode addSourceString() k\u00f6nnen Strings als Quelldaten definiert werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->addSourceString(string: 'example.com') ->addSourceString(string: 'regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}') // ... ; return $tableDefinition; } } Du siehst unter Search for this strings nun die benutzerdefinierten Strings nach denen in der Datenbank gesucht wird. Alternativ zu statischen Werten ist es m\u00f6glich, regul\u00e4re Ausdr\u00fccke f\u00fcr die Suche zu verwenden. Ein regul\u00e4rer Ausdruck muss durch den Pr\u00e4fix regex: gekennzeichnet werden und der PCRE-Regex-Syntax folgen. Mit regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3} kann beispielsweise nach IPv4 Adressen gesucht werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search for this strings ----------------------- ------------------------------------- String ------------------------------------- example.com regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3} ------------------------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Ein \"Analyze Profile\" ausf\u00fchren Ein \"Analyze Profile\" kann mit dem Kommando pseudify:analyze <profil-name> ausgef\u00fchrt werden. $ pseudify pseudify:analyze test-profile 1224/1224 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100% < 1 sec/< 1 sec 4.0 MiB summary ======= ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ source data seems to be in ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ __custom__.__custom__ 132.188.241.155 wh_log.ip __custom__.__custom__ 155.215.67.191 wh_log.ip __custom__.__custom__ 243.202.241.67 wh_log.ip __custom__.__custom__ 132.188.241.155 wh_log.log_data __custom__.__custom__ 155.215.67.191 wh_log.log_data __custom__.__custom__ 243.202.241.67 wh_log.log_data __custom__.__custom__ example.com wh_log.log_data __custom__.__custom__ example.com wh_log.log_message __custom__.__custom__ 139.81.0.139 wh_meta_data.meta_data __custom__.__custom__ 187.135.239.239 wh_meta_data.meta_data __custom__.__custom__ 197.110.248.18 wh_meta_data.meta_data __custom__.__custom__ 20.1.58.149 wh_meta_data.meta_data __custom__.__custom__ 239.27.57.12 wh_meta_data.meta_data __custom__.__custom__ 244.166.32.78 wh_meta_data.meta_data __custom__.__custom__ 83.243.216.115 wh_meta_data.meta_data __custom__.__custom__ example.com wh_meta_data.meta_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data __custom__.__custom__ 197.110.248.18 wh_user_session.session_data __custom__.__custom__ 244.166.32.78 wh_user_session.session_data wh_user.city Dorothyfort wh_meta_data.meta_data wh_user.city North Elenamouth wh_meta_data.meta_data wh_user.city South Wilfordland wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_log.log_data wh_user.email mcclure.ofelia@example.com wh_log.log_message wh_user.email cassin.bernadette@example.net wh_meta_data.meta_data wh_user.email conn.abigale@example.net wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_meta_data.meta_data wh_user.first_name Donato wh_meta_data.meta_data wh_user.first_name Maybell wh_meta_data.meta_data wh_user.first_name Mckayla wh_meta_data.meta_data wh_user.last_name Keeling wh_log.log_data wh_user.last_name Anderson wh_meta_data.meta_data wh_user.last_name Keeling wh_meta_data.meta_data wh_user.last_name Stoltenberg wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs wh_meta_data.meta_data wh_user.username georgiana59 wh_log.log_data wh_user.username georgiana59 wh_log.log_message wh_user.username georgiana59 wh_meta_data.meta_data wh_user.username howell.damien wh_meta_data.meta_data wh_user.username hpagac wh_meta_data.meta_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.ip wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.ip wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.log_data wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.log_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_meta_data.meta_data wh_user_session.session_data_json 197.110.248.18 wh_meta_data.meta_data wh_user_session.session_data_json 244.166.32.78 wh_meta_data.meta_data wh_user_session.session_data_json 107.66.23.195 wh_user_session.session_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data wh_user_session.session_data_json 197.110.248.18 wh_user_session.session_data wh_user_session.session_data_json 244.166.32.78 wh_user_session.session_data wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ Note Je nach Gr\u00f6\u00dfe der Datenbank kann die Analyse in Sekunden oder erst in Stunden fertig sein. Da Analysen in der Regel nur selten durchgef\u00fchrt werden, z.B. um mit den gesammelten Informationen die Pseudonymisierung zu modellieren, haben wir entscheiden, dass eine etwas l\u00e4ngere Laufzeit einer Analyse vertretbar ist. Die erste Zeile der Analyse gibt an, wie viele Daten bereits analysiert wurden und wie viele insgesamt analysiert werden ( 1148/1148 ). Es folgt ein Fortschrittsbalken und eine prozentuale Angabe des Fortschritts. Danach wird die Laufzeit und die gesch\u00e4tzte Gesamtzeit der Analyse ausgegeben. Zum Schluss wird der bisher maximale Speicherverbrauch ausgegeben. Die Zusammenfassung der Analyse listet letztendlich auf, welche Quelldaten (Spalte data ) aus welcher Quell-Datenbankspalte (Spalte source ) sich in welchen Datenbankspalten wiederfinden (Spalte seems to be in ). Wenn in der Spalte source ein __custom__.__custom__ steht so bedeutet dies, dass die Quelldaten nicht aus einer Datenbankspalte stammen, sondern mittels addSourceString() definiert wurden. Wenn Dir bisher noch nicht bekannt war, dass sich in einer Datenbankspalte unter seems to be in gewisse Quelldaten befinden, dann kannst Du Dir nun diese Datenbankspalten genauer anschauen und sie in die Modellierung der Pseudonymisierung mit aufnehmen. Info Wenn viele Datenbanktabellen und Spalten existieren, dann kann die Ausgabe der Analyse sehr lang werden und vielleicht nicht in den Buffer Deines Terminals passen. In diesem Fall lohnt es sich, die Ausgabe in eine Datei zu schreiben. pseudify --no-ansi pseudify:debug:analyze test-profile > analysis.log Erweiterte Informationen ausgeben F\u00fcr die Fehlersuche oder die Verfeinerung des Analyseprofils kann es sinnvoll sein zu sehen, welche Daten pseudify in den Datenbankdaten gefunden hat. Daf\u00fcr kann das Kommando pseudify:analyze mit dem Parameter --verbose aufgerufen werden: pseudify pseudify:analyze <profil-name> --verbose Nun werden die Quelldaten aufgelistet (wh_log.ip ( 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 )) und die Fundstelle (wh_meta_data.meta_data (...ip\";s:37:\" 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 \";}\";}s:4:...)) Die Anzahl der Zeichen, die vor und nach der Fundstelle ausgegeben werden, k\u00f6nnen mit der Methode setTargetDataFrameCuttingLength() definiert werden. Standardm\u00e4\u00dfig werden 10 Zeichen vor und nach einer Fundstelle ausgegeben. Wird der Wert auf 0 gesetzt, so wird vor und nach der Fundstelle nichts abgeschnitten und Du bekommst den vollst\u00e4ndigen Datenbankinhalt ausgegeben. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->setTargetDataFrameCuttingLength(length: 15); return $tableDefinition; } }","title":"Analysiere die Datenbank"},{"location":"de/usage/analyze/#analysieren","text":"","title":"Analysieren"},{"location":"de/usage/analyze/#die-analyse-modellieren","text":"Info Alle in diesem Tutorial beschriebenen Modellierungen kannst Du Dir mit Kommentaren im Testordner der Profile Templates (TestAnalyzeProfile.php) anschauen.","title":"Die Analyse modellieren"},{"location":"de/usage/analyze/#einen-uberblick-verschaffen","text":"Um einen \u00dcberblick \u00fcber die Daten in der Datenbank zu bekommen, kann das Kommando pseudify:debug:table_schema verwendet werden. Du kannst aber nat\u00fcrlich auch jedes andere Tool Deiner Wahl dazu verwenden. $ pseudify pseudify:debug:table_schema wh_log ------ -------------------- --------- --------------------------------------------------------------------------------------------------------- column type data example -------------------- --------- --------------------------------------------------------------------------------------------------------- id integer 6 log_type string foo log_data blob 613a323a7b693a303b733a33383a223466623a313434373a646566623a396434373a613265303a613336613a313064333a66... log_message text {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} ip string 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 -------------------- --------- --------------------------------------------------------------------------------------------------------- wh_meta_data ------------ --------------------- --------- --------------------------------------------------------------------------------------------------------- column type data example --------------------- --------- --------------------------------------------------------------------------------------------------------- id integer 5 meta_data blob 1f8b08000000000000036592dd6ea33010855f65657159116ca0818922f52fca6ea5d52a4bab46bd89066c821b302c769246... --------------------- --------- --------------------------------------------------------------------------------------------------------- wh_user ------- -------------------- --------- ---------------------------------------------------------------------------------------------- column type data example -------------------- --------- ---------------------------------------------------------------------------------------------- id integer 5 username string howell.damien password string $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs first_name string Mckayla last_name string Stoltenberg email string cassin.bernadette@example.net city string South Wilfordland -------------------- --------- ---------------------------------------------------------------------------------------------- wh_user_session --------------- ------------------- --------- -------------------------------------------------------------------- column type data example ------------------- --------- -------------------------------------------------------------------- id integer 5 session_data blob a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";} session_data_json text {\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}} ------------------- --------- -------------------------------------------------------------------- Das Kommando gibt nacheinander alle Tabellen der Datenbank aus und listet deren Spalten auf. In der Spalte column befindet sich der Name der Datenbankspalte. In der Spalte type steht ein menschenlesbarer Name des Datentyps der Datenbankspalte. In der Spalte data example befindet sich der jeweils l\u00e4ngste Datensatz, welcher in der Datenbank in dieser Datenbankspalte gefunden werden kann. Nach 100 Zeichen werden die Daten abgeschnitten. Halte Ausschauen nach personenbezogenen Daten, welche Du pseudonymisieren m\u00f6chtest. Suche nach Namen, Benutzernamen, Passw\u00f6rtern, Adressen, E-Mail-Adressen, IP-Adressen, Telefonnummern, ID-Nummern wie Versicherungsnummern, Profildaten wie Gr\u00f6\u00dfe oder Gewicht usw. Info Falls Du Anregungen brauchst, dann lies das Kapitel Was sollte pseudonymisiert werden? Merke Dir am besten die Spalten mit direkt sichtbaren personenbezogenen Daten, also die Spalten welche Daten im Klartext enthalten und nicht Spalten mit komplexeren Datenstrukturen wie JSON (z.B. die Spalte wh_log.log_message ) oder Spalten in denen die Daten in enkodierter Form vorliegen (z.B. die Spalte wh_log.log_data ). Im Beispiel w\u00e4ren die bevorzugten Spalten: wh_log.ip wh_user.username wh_user.password wh_user.first_name wh_user.last_name wh_user.email wh_user.city","title":"Einen \u00dcberblick verschaffen"},{"location":"de/usage/analyze/#ein-analyze-profile-modellieren","text":"","title":"Ein \"Analyze Profile\" modellieren"},{"location":"de/usage/analyze/#ein-profile-anlegen","text":"Lege im Ordner src/Profiles eine PHP Datei mit einem beliebigen Namen an. Im Beispiel wird die Datei TestAnalyzeProfile.php genannt. Die Datei bekommt folgenden Inhalt: <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); return $tableDefinition; } } Die Methode getIdentifier() muss eine eindeutige Bezeichnung Deines Profils wiedergeben und sollte nur aus Buchstaben, Zahlen oder den Zeichen - und _ bestehen und darf keine Leerzeichen enthalten. Nach der Erzeugung des Profils muss der Cache geleert werden $ pseudify cache:clear Der Befehl pseudify pseudify:debug:analyze test-profile gibt Dir nun bereits Informationen \u00fcber Dein Profil aus $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ------- -------- --------------- ----------------- Table column data decoders data collectors ------- -------- --------------- ----------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- -----------------------","title":"Ein \"Profile\" anlegen"},{"location":"de/usage/analyze/#quelldaten-definieren","text":"Info Das \"Analyze Profile\" ist dazu da, um herauszufinden in welchen \"unbeleuchteten\" Ecken der Datenbank sich personenbezogene Daten verstecken. Wir verwenden darum die uns bereits bekannten personenbezogene Daten, welche wir im ersten Schritt identifiziert haben, um sie in der restlichen Datenbank aufzusp\u00fcren. Wir haben personenbezogene Daten in folgenden Spalten identifiziert: wh_log.ip wh_user.username wh_user.password wh_user.first_name wh_user.last_name wh_user.email wh_user.city Du musst pseudify nun mitteilen, dass Du die Daten in diesen Spalten als Quelldaten verwenden m\u00f6chtest. Dazu erweiterst Du die Methode getTableDefinition() im Profil public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ; return $tableDefinition; } Mit der Methode addSourceTable() sagst Du pseudify, in welcher Datenbanktabelle und in welchen Datenbankspalten die Quelldaten gesammelt werden sollen. Pseudify wird dann automatisch in allen anderen Datenbankspalten der Datenbanktabellen nach Vorkommen der Quelldaten suchen und diese ausgeben. Zuvor standen in der Ausgabe des Kommandos pseudify:debug:analyze test-profile unter Search data in this tables alle Datenbanktabellen und alle Datenbankspalten. Nun werden dort nur noch die Datenbanktabellen und deren Datenbankspalten aufgelistet, welche nicht als Quelldaten mittels addSourceTable() definiert wurden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- -----------------------","title":"Quelldaten definieren"},{"location":"de/usage/analyze/#enkodierte-daten-als-quelldaten","text":"Es kommt vor, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss w\u00e4hrend der Analyse dekodiert werden, um ihn als Quelldaten verwenden zu k\u00f6nnen. \u00c4hnlich wie unter \"Enkodierte Daten durchsuchen\" beschrieben k\u00f6nnen auch die Datenbankspalten der Quelldaten dekodiert werden. Der Methode SourceColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Note Wie unter \"Mehrfach enkodierte Daten durchsuchen\" beschrieben kann auch hier der ChainedEncoder verwendet werden, um mehrfach enkodierte Daten zu dekodieren. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_test_table', columns: [ SourceColumn::create(identifier: 'wh_test_column', dataType: SourceColumn::DATA_TYPE_HEX), ]) ; return $tableDefinition; } } Du siehst unter Collect search data from this tables nun, dass unter data decoders der Datenbankspalte session_data_json der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des HexEncoder dekodiert werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ----------------- -------------------------- --------------- ---------------------- Table column data decoders data collectors ----------------- -------------------------- --------------- ---------------------- wh_test_table wh_test_column (text) Hex default (scalar data) ----------------- -------------------------- --------------- ---------------------- Search data in this tables -------------------------- ----------------- --------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- --------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- --------------------- --------------- ----------------------- Alternativ kann die ausgeschriebene Variante ->setEncoder(encoder: new HexEncoder()) verwendet werden: <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_test_table', columns: [ SourceColumn::create(identifier: 'wh_test_column')->setEncoder(encoder: new HexEncoder()), ]) ; return $tableDefinition; } }","title":"Enkodierte Daten als Quelldaten"},{"location":"de/usage/analyze/#suche-optimieren","text":"Ohne weitere Definition wird pseudify die Quelldaten in allen Datenbanktabellen und deren Datenbankspalten suchen, welche nicht als Quelldaten mittels addSourceTable() bzw. addColumn() definiert wurden. Damit die Analyse nicht unn\u00f6tig lange dauert, kann die Suche optimiert werden. Ziel ist es in der Regel, nur \"Text\" (Strings) zu durchsuchen.","title":"Suche optimieren"},{"location":"de/usage/analyze/#datentypen-ausschlieen","text":"Du kannst Spalten mit bestimmten Datentypen von der Suche ausschlie\u00dfen, um die Suchzeit zu verk\u00fcrzen. Es macht z.B. in den meisten F\u00e4llen keinen Sinn, Datenbankspalten vom Typ integer zu durchsuchen. Datentypen lassen sich auf Tabellenebene ausschlie\u00dfen oder global f\u00fcr alle Tabellen. Sobald auf Tabellenebene Datentypen ausgeschlossen werden, werden auf dieser Tabelle die global ausgeschlossenen Datentypen nicht zus\u00e4tzlich ausgeschlossen. Info Die Namen der Datentypen kannst Du im Quellcode des Doctrine Projekts finden, z.B.: string , integer , datetime etc. Info Es existiert die Konstante TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES , welche alle Datentypen enth\u00e4lt, die in der Regel nicht durchsucht werden m\u00fcssen.","title":"Datentypen ausschlie\u00dfen"},{"location":"de/usage/analyze/#datentypen-auf-tabellenebene-ausschlieen","text":"Um in der Tabelle wh_meta_data alle Spalten mit dem Datentyp integer von der Suche auszuschlie\u00dfen, musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: 'wh_meta_data', excludeColumnTypes: [ 'integer' ]) ; return $tableDefinition; } Die Methode addTargetTable() teilt der automatischen Tabellenkonfiguration mit, dass Du die Tabelle wh_meta_data speziell konfigurieren m\u00f6chtest. Im Parameter excludeColumnTypes kann ein Array von Datentypen \u00fcbergeben werden, welche bei der Suche ausgeschlossen werden sollen.","title":"Datentypen auf Tabellenebene ausschlie\u00dfen"},{"location":"de/usage/analyze/#datentypen-global-ausschlieen","text":"Um global in allen Tabellen alle Spalten mit dem Datentyp integer von der Suche auszuschlie\u00dfen, musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->excludeTargetColumnTypes(columnTypes: [ 'integer' ]) ; return $tableDefinition; } Die Methode excludeTargetColumnTypes() teilt der automatischen Tabellenkonfiguration mit, dass in allen Tabellen (welche keine speziellen Ausschl\u00fcsse definiert bekommen haben) alle Spalten vom Datentyp integer von der Suche ausgeschlossen werden sollen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass alle integer Spalten verschwunden sind. Du wirst in der Regel folgende Zeile im Profil integrieren wollen, um global alle Datentypen auszuschlie\u00dfen, bei denen es wenig Sinn macht sie zu durchsuchen : ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES)","title":"Datentypen global ausschlie\u00dfen"},{"location":"de/usage/analyze/#datenbankspalten-ausschlieen","text":"Die automatische Tabellenkonfiguration wird immer zuerst Datenbankspalten von der Suche ausschlie\u00dfen, welche anhand des Datentyps ausgeschlossen wurden. Zus\u00e4tzlich kannst Du im Profil auf Tabellenebene definieren, dass Datenbankspalten anhand ihres Namens von der Suche ausgeschlossen werden sollen. Dazu musst Du die Methode getTableDefinition() im Profil erweitern: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->addTargetTable(table: 'wh_log', excludeColumns: [ 'log_message', ]) ; return $tableDefinition; } Die Methode addTargetTable() teilt der automatischen Tabellenkonfiguration mit, dass Du die Tabelle wh_log speziell konfigurieren m\u00f6chtest. Im Parameter excludeColumns kann ein Array von Spaltennamen \u00fcbergeben werden, welche bei der Suche ausgeschlossen werden sollen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass die Spalte log_message der Tabelle wh_log verschwunden ist.","title":"Datenbankspalten ausschlie\u00dfen"},{"location":"de/usage/analyze/#tabellen-ausschlieen","text":"Du kannst ganze Tabellen von der Suche ausschlie\u00dfen, um die Suchzeit zu verk\u00fcrzen. Die kann mit der Methode excludeTargetTables() erledigt werden. public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->excludeTargetTables(tables: [ 'wh_user', ]) ; return $tableDefinition; } Wie Du siehst, wird die Tabelle wh_user nicht mehr unter Search data in this tables aufgelistet. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ -------- ------------- --------------- ----------------------- Table column data decoders data collectors -------- ------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) -------- ------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- ---------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- ---------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_data_plaintext (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_meta_data meta_data_plaintext (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- ---------------------------- --------------- ----------------------- In den auszuschlie\u00dfenden Tabellennamen k\u00f6nnen regul\u00e4re Ausdr\u00fccke verwendet werden, z.B.: wh_user.* . Somit ist es z.B. m\u00f6glich, mehrere Tabellen auf einmal auszuschlie\u00dfen: public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->excludeTargetTables(tables: [ 'wh_user.*', ]) ; return $tableDefinition; } Wie Du siehst, werden die Tabellen wh_user und die Tabelle wh_user_session nicht mehr unter Search data in this tables aufgelistet. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ -------- ------------- --------------- ----------------------- Table column data decoders data collectors -------- ------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) -------- ------------- --------------- ----------------------- Search data in this tables -------------------------- -------------- ---------------------------- --------------- ----------------------- Table column data decoders special data decoders -------------- ---------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_data_plaintext (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_meta_data meta_data_plaintext (blob) Scalar no further processing -------------- ---------------------------- --------------- -----------------------","title":"Tabellen ausschlie\u00dfen"},{"location":"de/usage/analyze/#enkodierte-daten-durchsuchen","text":"Es kommt vor, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss w\u00e4hrend der Analyse dekodiert werden. In unserem Beispiel enth\u00e4lt die Datenbankspalte log_data der Tabelle wh_log und die Datenbankspalte meta_data der Tabelle wh_meta_data enkodierte Daten. Wie diese Daten enkodiert sind, musst Du anhand des Quellcodes oder der Dokumentation der Applikation, welche die Datenbank verwendet, herausfinden. In unserem Beispiel sind die Daten der Datenbankspalte log_data (mit log_type = bar ) wie folgt kodiert. Datenbankdaten: 613a323a7b693a303b733a31353a223133322e3138382e3234312e313535223b733a343a2275736572223b4f3a383a22737464436c617373223a353a7b733a383a22757365724e616d65223b733a373a22637972696c3036223b733a383a226c6173744e616d65223b733a383a22486f6d656e69636b223b733a353a22656d61696c223b733a32313a22636c696e746f6e3434406578616d706c652e6e6574223b733a323a226964223b693a39313b733a343a2275736572223b523a333b7d7d Kodierung durch die Applikation: $plaintext = 'a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}'; $logData = bin2hex($plaintext); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Hierzu kann der Definition einer Datenbankspalte ( TargetColumn::create() ) der Datentyp (Parameter dataType ) \u00fcbergeben werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX), ] )) ; return $tableDefinition; } } Der Methode TargetColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Dies ist gleichbedeutend mit der ausgeschriebenen Variante ->setEncoder(encoder: new HexEncoder()) : <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data')->setEncoder(encoder: new HexEncoder()), ] )) ; return $tableDefinition; } } Beim Durchsuchen der Datenbankspalte log_data wird pseudify die Daten der Datenbankspalte dann immer mittels der Methode decode() des HexEncoder verarbeiten und anschlie\u00dfend das Resultat durchsuchen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_data (blob) Hex no further processing wh_log log_type (string) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte log_data der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des HexEncoder dekodiert werden.","title":"Enkodierte Daten durchsuchen"},{"location":"de/usage/analyze/#mehrfach-enkodierte-daten-durchsuchen","text":"Es kommt vor, dass Daten in Datenbankspalten in mehrfach enkodierter Form abgespeichert sind. In unserem Beispiel sind die Daten der Datenbankspalte meta_data so kodiert: $plaintext = 'a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}'; $meta_data = bin2hex(gzencode($plaintext, 5, ZLIB_ENCODING_GZIP)); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform in ein Bin\u00e4rformat umgewandelt werden und dann m\u00fcssen die Bin\u00e4rdaten noch im ZLIB-Format dekomprimiert werden. Um mehrfache Dekodierung durchzuf\u00fchren, kann der ChainedEncoder verwendet werden. Mit dem ChainedEncoder k\u00f6nnen mehrere Dekodierer konfiguriert werden, welche dann der Reihe nach die Daten dekodieren. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_meta_data', columns: [ TargetColumn::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ] )) ; return $tableDefinition; } } Beim Durchsuchen der Datenbankspalte meta_data der Tabelle wh_meta_data wird pseudify die Daten der Datenbankspalte dann zuerst mittels der Methode decode() des HexEncoder und dann mittels der Methode decode() des GzEncodeEncoder verarbeiten und anschlie\u00dfend das Resultat durchsuchen. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_meta_data meta_data (blob) Hex>GzEncode no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte wh_meta_data die Namen Hex>GzEncode aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden und dann mittels des GzEncodeEncoder.","title":"Mehrfach enkodierte Daten durchsuchen"},{"location":"de/usage/analyze/#unterschiedlich-enkodierte-daten-durchsuchen","text":"Es kommt vor, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Anhand von Bedingungen speichern Applikationen die Daten in anderen Formen ab. In unserem Beispiel sind die Daten der Datenbankspalte log_data wie folgt kodiert, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Datenbankdaten: 613a323a7b693a303b733a31353a223133322e3138382e3234312e313535223b733a343a2275736572223b4f3a383a22737464436c617373223a353a7b733a383a22757365724e616d65223b733a373a22637972696c3036223b733a383a226c6173744e616d65223b733a383a22486f6d656e69636b223b733a353a22656d61696c223b733a32313a22636c696e746f6e3434406578616d706c652e6e6574223b733a323a226964223b693a39313b733a343a2275736572223b523a333b7d7d Kodierung durch die Applikation: $plaintext = 'a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}'; $logData = bin2hex($plaintext); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Die Daten der Datenbankspalte log_data sind wie folgt kodiert, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. Datenbankdaten: 65794a3163325679546d46745a534936496e4a76626d46735a4738784e534973496d567459576c73496a6f6962574e6a624856795a5335765a6d5673615746415a586868625842735a53356a623230694c434a7359584e30546d46745a534936496b746c5a577870626d63694c434a7063434936496a457a4d6a45364e54646d597a6f304e6a42694f6d51305a4441365a44677a5a6a706a4d6a41774f6a52694f6d5978597a676966513d3d Kodierung durch die Applikation: $plaintext = '{\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}'; $logData = bin2hex(base64_encode($logDataPlaintext)); Damit pseudify die Daten ( $plaintext ) durchsuchen kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden und dann im Base64-Format dekodiert werden. In beiden F\u00e4llen ( log_type == foo und log_type == bar ) k\u00f6nnen die Daten zuerst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Wenn die Datenbankspalte log_type == foo enth\u00e4lt, m\u00fcssen die Daten dann zus\u00e4tzlich noch base64 dekodiert werden. Dies kann wie folgt modelliert werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'decode conditional log data', processor: function (TargetDataDecoderContext $context): void { $row = $context->getDatebaseRow(); if ('foo' !== $row['log_type']) { return; } $data = $context->getDecodedData(); $encoder = new Base64Encoder(); $logData = $encoder->decode(data: $data); $context->setDecodedData(decodedData: $logData); } )), ] )) ; return $tableDefinition; } } Mit der Methode addDataProcessing() k\u00f6nnen zus\u00e4tzlich zur Dekodierung der Daten weitere manuelle Datentransformationen programmiert werden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ TargetDataDecoderContext aufgerufen. Durch den TargetDataDecoderContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird Mit der Methode setDecodedData() k\u00f6nnen manuell prozessierte Daten an pseudify \u00fcbergeben werden. Diese manuell prozessierte Daten werden dann von der Analyse durchsucht. In unserem Beispiel ermitteln wir anhand des Wertes der Datenbankspalte log_type ob die Daten noch weiter mittels base64 dekodiert werden m\u00fcssen. Ist der Wert von log_type nicht foo , so wird durch das return Statement nichts weiter prozessiert. Ist der Wert von log_type gleich foo , so werden die Daten mittels des Base64Encoder() dekodiert und durch die Methode setDecodedData() an pseudify zur\u00fcckgeschrieben. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------------- wh_log log_data (blob) Hex decode conditional log data wh_log log_type (string) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- ----------------------------- Du siehst unter Search data in this tables nun, dass unter data decoders der Datenbankspalte wh_log der Name Hex aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden. Unter special data decoders wird das DataProcessing mit der Identifizierung decode conditional log data aufgelistet. Dies signalisiert Dir, dass nach der Dekodierung der Daten die Daten zus\u00e4tzlich mittels dieses DataProcessing verarbeitet werden.","title":"Unterschiedlich enkodierte Daten durchsuchen"},{"location":"de/usage/analyze/#json-daten-normalisieren","text":"Liegen zu durchsuchende Daten im JSON-Format in der Datenbank, so m\u00f6chtest Du diese wahrscheinlich normalisieren, um sie f\u00fcr pseudify sinnvoll durchsuchbar zu machen. Beispielsweise werden UTF-8 Zeichen im JSON-Format maskiert, ein \u00d6 ist im JSON-Format durch die Zeichenkette \\u00d6 maskiert. Beispieldatensatz: \"{\"oldRecord\":{\"bodytext\":\"<p>In 2023 sind folgende \\u00d6ffentlichkeitsaktionen geplant:<\\/p>\"}}\" Angenommen pseudify soll nach dem Vorkommen des Wortes \u00d6ffentlichkeitsaktionen suchen, so wird pseudify dies im Beispieldatensatz durch die Maskierung nicht finden. Um den JSON-String zu normalisieren und ihn so aussehen zu lassen: \"{\"oldRecord\":{\"bodytext\":\"<p>In 2023 sind folgende \u00d6ffentlichkeitsaktionen geplant:</p>\"}}\" existiert das DataProcessing namens normalizedJsonString() . Das Hinzuf\u00fcgen dieses DataProcessing mittels ->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()) zu einer Datenbankspalte, welche JSON Datenstrukturen enth\u00e4lt, normalisiert den JSON-String und macht ihn f\u00fcr pseudify durchsuchbar. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_message')->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()), ] )) ; return $tableDefinition; } }","title":"Json Daten normalisieren"},{"location":"de/usage/analyze/#nicht-skalare-quelldaten-definieren","text":"Manchmal ist es notwendig, Daten aus komplexen Datenstrukturen als Quelldaten zu definieren. Als Beispiel m\u00f6chten wir Daten aus der Datenbankspalte session_data_json der Tabelle wh_user_session verwenden, um sie als Quelldaten zu verwenden. session_data_json enth\u00e4lt einen String im JSON-Format. In diesem gibt es eine Eigenschaft namens data bestehend aus einem Array mit der Eigenschaft last_ip welche wir als Quelldaten verwenden m\u00f6chten. {\"data\": {\"last_ip\":\"107.66.23.195\"}} Der Methode SourceColumn::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Note Wie unter \"Mehrfach enkodierte Daten durchsuchen\" beschrieben kann auch hier der ChainedEncoder verwendet werden, um mehrfach enkodierte Daten zu dekodieren. Mit der Methode addDataProcessing() kann nun definiert werden, welche Daten aus der dekodierten Datenstruktur extrahiert werden sollen, um sie als Quelldaten zu verwenden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ SourceDataCollectorContext aufgerufen. Durch den SourceDataCollectorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird Mit der Methode addCollectedData() k\u00f6nnen die extrahierten Daten als Quelldaten an pseudify \u00fcbergeben werden. Die Methode addCollectedData() kann beliebig oft verwendet werden, um beliebige viele Quelldaten an pseudify zu \u00fcbergeben. Der Methode addCollectedData() kann entweder ein String \u00fcbergeben werden , oder ein eindimensionales Array. Wird ein Array \u00fcbergeben, so werden alle darin befindlichen skalaren Daten extrahiert und als Quelldaten an pseudify \u00fcbergeben. Info Wird kein DataProcessing definiert, so wird automatisch das Standard-DataProcessing SourceDataCollectorPreset::scalarData() verwendet. Dieses sammelt die Daten aus einer Datenbankspalte nur dann, wenn der Inhalt gr\u00f6\u00dfer oder gleich 3 Zeichen lang ist. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\SourceDataCollectorContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\SourceColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_user_session', columns: [ SourceColumn::create(identifier: 'session_data_json', dataType: SourceColumn::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'extract ip address', processor: function (SourceDataCollectorContext $context): void { $data = $context->getDecodedData(); $context->addCollectedData(data: $data['data']['last_ip']); } )), ]) ; return $tableDefinition; } } Du siehst unter Collect search data from this tables nun, dass unter data decoders der Datenbankspalte session_data_json der Name Json aufgelistet wird. Dies signalisiert Dir, dass die Daten mittels des JsonEncoder dekodiert werden. Unter data collectors wird das DataProcessing mit der Identifizierung extract ip address aufgelistet. Dies signalisiert Dir, dass nach der Dekodierung der Daten die Daten zus\u00e4tzlich mittels dieses DataProcessing gesammelt werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ ----------------- -------------------------- --------------- -------------------- Table column data decoders data collectors ----------------- -------------------------- --------------- -------------------- wh_user_session session_data_json (text) Json extract ip address ----------------- -------------------------- --------------- -------------------- Search data in this tables -------------------------- ----------------- --------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- --------------------- --------------- ----------------------- wh_log id (integer) Scalar no further processing wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_log ip (string) Scalar no further processing wh_meta_data id (integer) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user id (integer) Scalar no further processing wh_user username (string) Scalar no further processing wh_user password (string) Scalar no further processing wh_user first_name (string) Scalar no further processing wh_user last_name (string) Scalar no further processing wh_user email (string) Scalar no further processing wh_user city (string) Scalar no further processing wh_user_session id (integer) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing ----------------- --------------------- --------------- -----------------------","title":"Nicht-Skalare Quelldaten definieren"},{"location":"de/usage/analyze/#benutzerdefinierte-quelldaten-definieren","text":"Es ist m\u00f6glich benutzerdefinierte Quelldaten zu definieren die sich nicht aus Datenbankspalten beziehen. Mit der Methode addSourceString() k\u00f6nnen Strings als Quelldaten definiert werden. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addSourceTable(table: 'wh_log', columns: [ 'ip', ]) ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->addSourceString(string: 'example.com') ->addSourceString(string: 'regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}') // ... ; return $tableDefinition; } } Du siehst unter Search for this strings nun die benutzerdefinierten Strings nach denen in der Datenbank gesucht wird. Alternativ zu statischen Werten ist es m\u00f6glich, regul\u00e4re Ausdr\u00fccke f\u00fcr die Suche zu verwenden. Ein regul\u00e4rer Ausdruck muss durch den Pr\u00e4fix regex: gekennzeichnet werden und der PCRE-Regex-Syntax folgen. Mit regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3} kann beispielsweise nach IPv4 Adressen gesucht werden. $ pseudify pseudify:debug:analyze test-profile Analyzer profile \"test-profile\" =============================== Basis configuration ------------------- ----------------------------------------------- ------- Key Value ----------------------------------------------- ------- Shown characters before and after the finding 10 ----------------------------------------------- ------- Collect search data from this tables ------------------------------------ --------- --------------------- --------------- ----------------------- Table column data decoders data collectors --------- --------------------- --------------- ----------------------- wh_log ip (string) Scalar default (scalar data) wh_user username (string) Scalar default (scalar data) wh_user password (string) Scalar default (scalar data) wh_user first_name (string) Scalar default (scalar data) wh_user last_name (string) Scalar default (scalar data) wh_user email (string) Scalar default (scalar data) wh_user city (string) Scalar default (scalar data) --------- --------------------- --------------- ----------------------- Search for this strings ----------------------- ------------------------------------- String ------------------------------------- example.com regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3} ------------------------------------- Search data in this tables -------------------------- ----------------- -------------------------- --------------- ----------------------- Table column data decoders special data decoders ----------------- -------------------------- --------------- ----------------------- wh_log log_type (string) Scalar no further processing wh_log log_data (blob) Scalar no further processing wh_log log_message (text) Scalar no further processing wh_meta_data meta_data (blob) Scalar no further processing wh_user_session session_data (blob) Scalar no further processing wh_user_session session_data_json (text) Scalar no further processing ----------------- -------------------------- --------------- -----------------------","title":"Benutzerdefinierte Quelldaten definieren"},{"location":"de/usage/analyze/#ein-analyze-profile-ausfuhren","text":"Ein \"Analyze Profile\" kann mit dem Kommando pseudify:analyze <profil-name> ausgef\u00fchrt werden. $ pseudify pseudify:analyze test-profile 1224/1224 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100% < 1 sec/< 1 sec 4.0 MiB summary ======= ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ source data seems to be in ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ __custom__.__custom__ 132.188.241.155 wh_log.ip __custom__.__custom__ 155.215.67.191 wh_log.ip __custom__.__custom__ 243.202.241.67 wh_log.ip __custom__.__custom__ 132.188.241.155 wh_log.log_data __custom__.__custom__ 155.215.67.191 wh_log.log_data __custom__.__custom__ 243.202.241.67 wh_log.log_data __custom__.__custom__ example.com wh_log.log_data __custom__.__custom__ example.com wh_log.log_message __custom__.__custom__ 139.81.0.139 wh_meta_data.meta_data __custom__.__custom__ 187.135.239.239 wh_meta_data.meta_data __custom__.__custom__ 197.110.248.18 wh_meta_data.meta_data __custom__.__custom__ 20.1.58.149 wh_meta_data.meta_data __custom__.__custom__ 239.27.57.12 wh_meta_data.meta_data __custom__.__custom__ 244.166.32.78 wh_meta_data.meta_data __custom__.__custom__ 83.243.216.115 wh_meta_data.meta_data __custom__.__custom__ example.com wh_meta_data.meta_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data __custom__.__custom__ 197.110.248.18 wh_user_session.session_data __custom__.__custom__ 244.166.32.78 wh_user_session.session_data wh_user.city Dorothyfort wh_meta_data.meta_data wh_user.city North Elenamouth wh_meta_data.meta_data wh_user.city South Wilfordland wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_log.log_data wh_user.email mcclure.ofelia@example.com wh_log.log_message wh_user.email cassin.bernadette@example.net wh_meta_data.meta_data wh_user.email conn.abigale@example.net wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_meta_data.meta_data wh_user.first_name Donato wh_meta_data.meta_data wh_user.first_name Maybell wh_meta_data.meta_data wh_user.first_name Mckayla wh_meta_data.meta_data wh_user.last_name Keeling wh_log.log_data wh_user.last_name Anderson wh_meta_data.meta_data wh_user.last_name Keeling wh_meta_data.meta_data wh_user.last_name Stoltenberg wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs wh_meta_data.meta_data wh_user.username georgiana59 wh_log.log_data wh_user.username georgiana59 wh_log.log_message wh_user.username georgiana59 wh_meta_data.meta_data wh_user.username howell.damien wh_meta_data.meta_data wh_user.username hpagac wh_meta_data.meta_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.ip wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.ip wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.log_data wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.log_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_meta_data.meta_data wh_user_session.session_data_json 197.110.248.18 wh_meta_data.meta_data wh_user_session.session_data_json 244.166.32.78 wh_meta_data.meta_data wh_user_session.session_data_json 107.66.23.195 wh_user_session.session_data wh_user_session.session_data_json 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data wh_user_session.session_data_json 197.110.248.18 wh_user_session.session_data wh_user_session.session_data_json 244.166.32.78 wh_user_session.session_data wh_user_session.session_data_json 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data ----------------------------------- ---------------------------------------------------------------------------------------------- ------------------------------ Note Je nach Gr\u00f6\u00dfe der Datenbank kann die Analyse in Sekunden oder erst in Stunden fertig sein. Da Analysen in der Regel nur selten durchgef\u00fchrt werden, z.B. um mit den gesammelten Informationen die Pseudonymisierung zu modellieren, haben wir entscheiden, dass eine etwas l\u00e4ngere Laufzeit einer Analyse vertretbar ist. Die erste Zeile der Analyse gibt an, wie viele Daten bereits analysiert wurden und wie viele insgesamt analysiert werden ( 1148/1148 ). Es folgt ein Fortschrittsbalken und eine prozentuale Angabe des Fortschritts. Danach wird die Laufzeit und die gesch\u00e4tzte Gesamtzeit der Analyse ausgegeben. Zum Schluss wird der bisher maximale Speicherverbrauch ausgegeben. Die Zusammenfassung der Analyse listet letztendlich auf, welche Quelldaten (Spalte data ) aus welcher Quell-Datenbankspalte (Spalte source ) sich in welchen Datenbankspalten wiederfinden (Spalte seems to be in ). Wenn in der Spalte source ein __custom__.__custom__ steht so bedeutet dies, dass die Quelldaten nicht aus einer Datenbankspalte stammen, sondern mittels addSourceString() definiert wurden. Wenn Dir bisher noch nicht bekannt war, dass sich in einer Datenbankspalte unter seems to be in gewisse Quelldaten befinden, dann kannst Du Dir nun diese Datenbankspalten genauer anschauen und sie in die Modellierung der Pseudonymisierung mit aufnehmen. Info Wenn viele Datenbanktabellen und Spalten existieren, dann kann die Ausgabe der Analyse sehr lang werden und vielleicht nicht in den Buffer Deines Terminals passen. In diesem Fall lohnt es sich, die Ausgabe in eine Datei zu schreiben. pseudify --no-ansi pseudify:debug:analyze test-profile > analysis.log","title":"Ein \"Analyze Profile\" ausf\u00fchren"},{"location":"de/usage/analyze/#erweiterte-informationen-ausgeben","text":"F\u00fcr die Fehlersuche oder die Verfeinerung des Analyseprofils kann es sinnvoll sein zu sehen, welche Daten pseudify in den Datenbankdaten gefunden hat. Daf\u00fcr kann das Kommando pseudify:analyze mit dem Parameter --verbose aufgerufen werden: pseudify pseudify:analyze <profil-name> --verbose Nun werden die Quelldaten aufgelistet (wh_log.ip ( 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 )) und die Fundstelle (wh_meta_data.meta_data (...ip\";s:37:\" 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 \";}\";}s:4:...)) Die Anzahl der Zeichen, die vor und nach der Fundstelle ausgegeben werden, k\u00f6nnen mit der Methode setTargetDataFrameCuttingLength() definiert werden. Standardm\u00e4\u00dfig werden 10 Zeichen vor und nach einer Fundstelle ausgegeben. Wird der Wert auf 0 gesetzt, so wird vor und nach der Fundstelle nichts abgeschnitten und Du bekommst den vollst\u00e4ndigen Datenbankinhalt ausgegeben. <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->setTargetDataFrameCuttingLength(length: 15); return $tableDefinition; } }","title":"Erweiterte Informationen ausgeben"},{"location":"de/usage/complexDatatypes/","text":"Komplexe Datentypen PHP - serialisierte Daten verarbeiten PHP Datenstrukturen lassen sich mittels der Funktion serialize() in eine speicherbare Repr\u00e4sentation transformieren. Ein PHP Array kann serialisiert werden, um es z.B. in der Datenbank abzuspeichern. $array = [ 'key1' => 'value1', 'key2' => 'value2', ]; echo serialize($array); // output: a:2:{s:4:\"key1\";s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";} Diese Datenstruktur kann sp\u00e4ter mit der Funktion unserialize() wieder in eine PHP Datenstruktur umgewandelt werden. Eine Beschreibung des Datenformats findet man im PHP Quellcode und teilweise in der PHP Dokumentation . W\u00e4hrend die Arbeit mit einfachen Datenstrukturen wie Strings oder Arrays f\u00fcr pseudify recht einfach w\u00e4re, so wird die Arbeit mit serialisierten PHP Objekten schwieriger. use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; echo serialize(new SimpleObject('baz1', 'baz2', 'baz3')); // output: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"\\x00Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\\x00privateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";}` Ein serialisiertes PHP Objekt O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"\\x00Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\\x00privateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";} l\u00e4sst sich von PHP nur de-serialisieren, wenn der PHP autoloader Zugriff auf die entsprechenden Quellcodedateien hat, in welcher das Objekt definiert ist. Pseudify muss aber ohne den Quellcode irgendwelcher Applikationen lauff\u00e4hig sein. Wie k\u00f6nnen wir nun gezielt z.B. den Wert der Eigenschaft publicMember ( baz3 ) pseudonymisieren, ohne fehleranf\u00e4llige Suchen-und-Ersetzen Strategien auf den Text anwenden zu m\u00fcssen (z.B. mit wilden regul\u00e4ren Ausdr\u00fccken)? F\u00fcr diesen Anwendungsfall bietet Dir pseudify den SerializedEncoder ! Mit dem SerializedEncoder ist es Dir m\u00f6glich eine serialisierte Datenstruktur in einen AST umzuwandeln, diesen zu manipulieren und den AST dann wieder in eine serialisierte Datenstruktur zur\u00fcckzuschreiben. Lasst uns ein paar Beispiele anschauen Integer <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 1; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: i:1; serialized data AST: IntegerNode { -content: 1 } Float <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 1.1; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: d:1.1000000000000001; serialized data AST: FloatNode { -content: 1.1 } Boolean <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = true; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: b:1; serialized data AST: BooleanNode { -content: true } NULL <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = null; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: N; serialized data AST: NullNode { } String <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 'How nice is this!'; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: s:17:\"How nice is this!\"; serialized data AST: StringNode { -content: \"How nice is this!\" } Arrays <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['how', 'nice']; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:2:{i:0;s:3:\"how\";i:1;s:4:\"nice\";} serialized data AST: ArrayNode { -properties: array:2 [ 0 => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: StringNode { #parentNode: ArrayElementNode {} -content: \"nice\" } -key: IntegerNode { -content: 1 } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'key2' => 'nice']; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:2:{s:4:\"key1\";s:3:\"how\";s:4:\"key2\";s:4:\"nice\";} serialized data AST: ArrayNode { -properties: array:2 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } \"key2\" => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: StringNode { -content: \"key2\" } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'nice', null, 99 => 123]; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:4:{s:4:\"key1\";s:3:\"how\";i:0;s:4:\"nice\";i:1;N;i:99;i:123;} serialized data AST: ArrayNode { -properties: array:4 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } 0 => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: NullNode { } -key: IntegerNode { -content: 1 } } 99 => ArrayElementNode { -content: IntegerNode { -content: 123 } -key: IntegerNode { -content: 99 } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'nice', 'key2' => ['is', 'this']]; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); ArrayNode { -properties: array:3 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } 0 => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: IntegerNode { -content: 0 } } \"key2\" => ArrayElementNode { -content: ArrayNode { -properties: array:2 [ 0 => ArrayElementNode { -content: StringNode { -content: \"is\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: StringNode { -content: \"this\" } -key: IntegerNode { -content: 1 } } ] } -key: StringNode { -content: \"key2\" } } ] } Objekte <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = new \\Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject('baz1', 'baz2', 'baz3'); $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";} serialized data AST: ObjectNode { -properties: array:3 [ \"privateMember\" => AttributeNode { -content: StringNode { -content: \"baz1\" } -propertyName: \"privateMember\" -scope: \"private\" -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } \"protectedMember\" => AttributeNode { -content: StringNode { -content: \"baz2\" } -propertyName: \"protectedMember\" -scope: \"protected\" -className: \"*\" } \"publicMember\" => AttributeNode { -content: StringNode { -content: \"baz3\" } -propertyName: \"publicMember\" -scope: \"public\" -className: null } ] -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = new \\Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject(null, null, ['key1' => 'value1']); $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";N;s:18:\"*protectedMember\";N;s:12:\"publicMember\";a:1:{s:4:\"key1\";s:6:\"value1\";}} serialized data AST: ObjectNode { -properties: array:3 [ \"privateMember\" => AttributeNode { -content: NullNode { } -propertyName: \"privateMember\" -scope: \"private\" -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } \"protectedMember\" => AttributeNode { -content: NullNode { } -propertyName: \"protectedMember\" -scope: \"protected\" -className: \"*\" } \"publicMember\" => AttributeNode { -content: ArrayNode { -properties: array:1 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"value1\" } -key: StringNode { -content: \"key1\" } } ] } -propertyName: \"publicMember\" -scope: \"public\" -className: null } ] -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } Daten erzeugen / manipulieren Info Die verf\u00fcgbaren Methoden der einzelnen Node-Implementierungen kannst Du Dir im Repository anschauen . Skalare Werte Skalare Werte zu erzeugen, ist einfach. Es muss nur eine neue Instanz des entsprechenden Datentyps erzeugt werden: Integer <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 1; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 1 Float <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 123.321; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 123.321 Boolean <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = true; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: true Null <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = null; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: NULL String <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 'how nice'; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 'how nice' Arrays Das Array sieht so aus: [ 0 => 'value1', 'key2' => 'value2', 'key3' => [ 0 => 'value3', 'key4' => 'value4' ] ]; get the node value for array key 0 <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for array key 0 $value = $node->getPropertyContent(identifier: 0)->getValue(); echo var_export($value, true) . PHP_EOL; 'value1' get the node value for array key 'key2' <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for array key 'key2' $value = $node->getPropertyContent(identifier: 'key2')->getValue(); echo var_export($value, true) . PHP_EOL; 'value2' get all array keys of the first array level <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Serialized\\Node\\ArrayElementNode; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get all array keys of the first array level $value = array_map(fn(ArrayElementNode $elementNode): string|int => $elementNode->getPropertyName(), $node->getContent()); echo var_export($value, true) . PHP_EOL; array ( 0 => 0, 'key2' => 'key2', 'key3' => 'key3', ) replace 'value1' (key 0) with 'new value' <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value1' (key 0) with 'new value' $newValue = 'new value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->replaceProperty(identifier: 0, property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}} new data: a:3:{i:0;s:9:\"new value\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}} replace 'value4' (key 'key3' => 'key4') with 'newer value' <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value4' (key 'key3' => 'key4') with 'newer value' $newValue = 'newer value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->getPropertyContent(identifier: 'key3')->replaceProperty(identifier: 'key4', property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}} new data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:11:\"newer value\";}} Objekte Das Objekt sieht so aus: class SimpleObject { private $privateMember; protected $protectedMember; public $publicMember; public function __construct($privateMember, $protectedMember, $publicMember) { $this->privateMember = $privateMember; $this->protectedMember = $protectedMember; $this->publicMember = $publicMember; } } get the node value for class member 'privateMember' ('value1') <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'privateMember' ('value1') $value = $node->getPropertyContent(identifier: 'privateMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value1' get the node value for class member 'protectedMember' ('value2') <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'protectedMember' ('value2) $value = $node->getPropertyContent(identifier: 'protectedMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value2' get the node value for class member 'publicMember' ('value3') <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'publicMember' ('value3) $value = $node->getPropertyContent(identifier: 'publicMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value3' get all (direct) class member names <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Serialized\\Node\\AttributeNode; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get all (direct) class member names $value = array_map(fn(AttributeNode $attributeNode): string => $attributeNode->getPropertyName(), $node->getContent()); echo var_export($value, true) . PHP_EOL; array ( 'privateMember' => 'privateMember', 'protectedMember' => 'protectedMember', 'publicMember' => 'publicMember', ) replace 'value3' ('publicMember') with 'newer value' <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value3' ('publicMember') with 'newer value' $newValue = 'newer value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->replaceProperty(identifier: 'publicMember', property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:6:\"value1\";s:18:\"*protectedMember\";s:6:\"value2\";s:12:\"publicMember\";s:6:\"value3\";} new data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:6:\"value1\";s:18:\"*protectedMember\";s:6:\"value2\";s:12:\"publicMember\";s:11:\"newer value\";}","title":"Komplexe Datentypen"},{"location":"de/usage/complexDatatypes/#komplexe-datentypen","text":"","title":"Komplexe Datentypen"},{"location":"de/usage/complexDatatypes/#php-serialisierte-daten-verarbeiten","text":"PHP Datenstrukturen lassen sich mittels der Funktion serialize() in eine speicherbare Repr\u00e4sentation transformieren. Ein PHP Array kann serialisiert werden, um es z.B. in der Datenbank abzuspeichern. $array = [ 'key1' => 'value1', 'key2' => 'value2', ]; echo serialize($array); // output: a:2:{s:4:\"key1\";s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";} Diese Datenstruktur kann sp\u00e4ter mit der Funktion unserialize() wieder in eine PHP Datenstruktur umgewandelt werden. Eine Beschreibung des Datenformats findet man im PHP Quellcode und teilweise in der PHP Dokumentation . W\u00e4hrend die Arbeit mit einfachen Datenstrukturen wie Strings oder Arrays f\u00fcr pseudify recht einfach w\u00e4re, so wird die Arbeit mit serialisierten PHP Objekten schwieriger. use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; echo serialize(new SimpleObject('baz1', 'baz2', 'baz3')); // output: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"\\x00Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\\x00privateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";}` Ein serialisiertes PHP Objekt O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"\\x00Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\\x00privateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";} l\u00e4sst sich von PHP nur de-serialisieren, wenn der PHP autoloader Zugriff auf die entsprechenden Quellcodedateien hat, in welcher das Objekt definiert ist. Pseudify muss aber ohne den Quellcode irgendwelcher Applikationen lauff\u00e4hig sein. Wie k\u00f6nnen wir nun gezielt z.B. den Wert der Eigenschaft publicMember ( baz3 ) pseudonymisieren, ohne fehleranf\u00e4llige Suchen-und-Ersetzen Strategien auf den Text anwenden zu m\u00fcssen (z.B. mit wilden regul\u00e4ren Ausdr\u00fccken)? F\u00fcr diesen Anwendungsfall bietet Dir pseudify den SerializedEncoder ! Mit dem SerializedEncoder ist es Dir m\u00f6glich eine serialisierte Datenstruktur in einen AST umzuwandeln, diesen zu manipulieren und den AST dann wieder in eine serialisierte Datenstruktur zur\u00fcckzuschreiben.","title":"PHP - serialisierte Daten verarbeiten"},{"location":"de/usage/complexDatatypes/#lasst-uns-ein-paar-beispiele-anschauen","text":"","title":"Lasst uns ein paar Beispiele anschauen"},{"location":"de/usage/complexDatatypes/#integer","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 1; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: i:1; serialized data AST: IntegerNode { -content: 1 }","title":"Integer"},{"location":"de/usage/complexDatatypes/#float","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 1.1; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: d:1.1000000000000001; serialized data AST: FloatNode { -content: 1.1 }","title":"Float"},{"location":"de/usage/complexDatatypes/#boolean","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = true; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: b:1; serialized data AST: BooleanNode { -content: true }","title":"Boolean"},{"location":"de/usage/complexDatatypes/#null","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = null; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: N; serialized data AST: NullNode { }","title":"NULL"},{"location":"de/usage/complexDatatypes/#string","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = 'How nice is this!'; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: s:17:\"How nice is this!\"; serialized data AST: StringNode { -content: \"How nice is this!\" }","title":"String"},{"location":"de/usage/complexDatatypes/#arrays","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['how', 'nice']; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:2:{i:0;s:3:\"how\";i:1;s:4:\"nice\";} serialized data AST: ArrayNode { -properties: array:2 [ 0 => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: StringNode { #parentNode: ArrayElementNode {} -content: \"nice\" } -key: IntegerNode { -content: 1 } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'key2' => 'nice']; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:2:{s:4:\"key1\";s:3:\"how\";s:4:\"key2\";s:4:\"nice\";} serialized data AST: ArrayNode { -properties: array:2 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } \"key2\" => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: StringNode { -content: \"key2\" } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'nice', null, 99 => 123]; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: a:4:{s:4:\"key1\";s:3:\"how\";i:0;s:4:\"nice\";i:1;N;i:99;i:123;} serialized data AST: ArrayNode { -properties: array:4 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } 0 => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: NullNode { } -key: IntegerNode { -content: 1 } } 99 => ArrayElementNode { -content: IntegerNode { -content: 123 } -key: IntegerNode { -content: 99 } } ] } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = ['key1' => 'how', 'nice', 'key2' => ['is', 'this']]; $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); ArrayNode { -properties: array:3 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"how\" } -key: StringNode { -content: \"key1\" } } 0 => ArrayElementNode { -content: StringNode { -content: \"nice\" } -key: IntegerNode { -content: 0 } } \"key2\" => ArrayElementNode { -content: ArrayNode { -properties: array:2 [ 0 => ArrayElementNode { -content: StringNode { -content: \"is\" } -key: IntegerNode { -content: 0 } } 1 => ArrayElementNode { -content: StringNode { -content: \"this\" } -key: IntegerNode { -content: 1 } } ] } -key: StringNode { -content: \"key2\" } } ] }","title":"Arrays"},{"location":"de/usage/complexDatatypes/#objekte","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = new \\Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject('baz1', 'baz2', 'baz3'); $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:4:\"baz1\";s:18:\"*protectedMember\";s:4:\"baz2\";s:12:\"publicMember\";s:4:\"baz3\";} serialized data AST: ObjectNode { -properties: array:3 [ \"privateMember\" => AttributeNode { -content: StringNode { -content: \"baz1\" } -propertyName: \"privateMember\" -scope: \"private\" -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } \"protectedMember\" => AttributeNode { -content: StringNode { -content: \"baz2\" } -propertyName: \"protectedMember\" -scope: \"protected\" -className: \"*\" } \"publicMember\" => AttributeNode { -content: StringNode { -content: \"baz3\" } -propertyName: \"publicMember\" -scope: \"public\" -className: null } ] -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } <?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $data = new \\Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject(null, null, ['key1' => 'value1']); $serializedData = serialize($data); $encoder = new SerializedEncoder(); $serializedDataAST = $encoder->decode(data: $serializedData); echo 'serialized data: ' . $serializedData . PHP_EOL . PHP_EOL; echo 'serialized data AST:' . PHP_EOL . PHP_EOL; dump($serializedDataAST); serialized data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";N;s:18:\"*protectedMember\";N;s:12:\"publicMember\";a:1:{s:4:\"key1\";s:6:\"value1\";}} serialized data AST: ObjectNode { -properties: array:3 [ \"privateMember\" => AttributeNode { -content: NullNode { } -propertyName: \"privateMember\" -scope: \"private\" -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" } \"protectedMember\" => AttributeNode { -content: NullNode { } -propertyName: \"protectedMember\" -scope: \"protected\" -className: \"*\" } \"publicMember\" => AttributeNode { -content: ArrayNode { -properties: array:1 [ \"key1\" => ArrayElementNode { -content: StringNode { -content: \"value1\" } -key: StringNode { -content: \"key1\" } } ] } -propertyName: \"publicMember\" -scope: \"public\" -className: null } ] -className: \"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\" }","title":"Objekte"},{"location":"de/usage/complexDatatypes/#daten-erzeugen-manipulieren","text":"Info Die verf\u00fcgbaren Methoden der einzelnen Node-Implementierungen kannst Du Dir im Repository anschauen .","title":"Daten erzeugen / manipulieren"},{"location":"de/usage/complexDatatypes/#skalare-werte","text":"Skalare Werte zu erzeugen, ist einfach. Es muss nur eine neue Instanz des entsprechenden Datentyps erzeugt werden:","title":"Skalare Werte"},{"location":"de/usage/complexDatatypes/#integer_1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 1; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 1","title":"Integer"},{"location":"de/usage/complexDatatypes/#float_1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 123.321; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 123.321","title":"Float"},{"location":"de/usage/complexDatatypes/#boolean_1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = true; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: true","title":"Boolean"},{"location":"de/usage/complexDatatypes/#null_1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = null; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: NULL","title":"Null"},{"location":"de/usage/complexDatatypes/#string_1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = 'how nice'; $node = $encoder->decode(data: serialize($data)); echo 'get the node value: ' . var_export($node->getValue(), true) . PHP_EOL; get the node value: 'how nice'","title":"String"},{"location":"de/usage/complexDatatypes/#arrays_1","text":"Das Array sieht so aus: [ 0 => 'value1', 'key2' => 'value2', 'key3' => [ 0 => 'value3', 'key4' => 'value4' ] ];","title":"Arrays"},{"location":"de/usage/complexDatatypes/#get-the-node-value-for-array-key-0","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for array key 0 $value = $node->getPropertyContent(identifier: 0)->getValue(); echo var_export($value, true) . PHP_EOL; 'value1'","title":"get the node value for array key 0"},{"location":"de/usage/complexDatatypes/#get-the-node-value-for-array-key-key2","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for array key 'key2' $value = $node->getPropertyContent(identifier: 'key2')->getValue(); echo var_export($value, true) . PHP_EOL; 'value2'","title":"get the node value for array key 'key2'"},{"location":"de/usage/complexDatatypes/#get-all-array-keys-of-the-first-array-level","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Serialized\\Node\\ArrayElementNode; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get all array keys of the first array level $value = array_map(fn(ArrayElementNode $elementNode): string|int => $elementNode->getPropertyName(), $node->getContent()); echo var_export($value, true) . PHP_EOL; array ( 0 => 0, 'key2' => 'key2', 'key3' => 'key3', )","title":"get all array keys of the first array level"},{"location":"de/usage/complexDatatypes/#replace-value1-key-0-with-new-value","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value1' (key 0) with 'new value' $newValue = 'new value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->replaceProperty(identifier: 0, property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}} new data: a:3:{i:0;s:9:\"new value\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}}","title":"replace 'value1' (key 0) with 'new value'"},{"location":"de/usage/complexDatatypes/#replace-value4-key-key3-key4-with-newer-value","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; $encoder = new SerializedEncoder(); $data = [0 => 'value1', 'key2' => 'value2', 'key3' => [0 => 'value3', 'key4' => 'value4']]; $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value4' (key 'key3' => 'key4') with 'newer value' $newValue = 'newer value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->getPropertyContent(identifier: 'key3')->replaceProperty(identifier: 'key4', property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:6:\"value4\";}} new data: a:3:{i:0;s:6:\"value1\";s:4:\"key2\";s:6:\"value2\";s:4:\"key3\";a:2:{i:0;s:6:\"value3\";s:4:\"key4\";s:11:\"newer value\";}}","title":"replace 'value4' (key 'key3' =&gt; 'key4') with 'newer value'"},{"location":"de/usage/complexDatatypes/#objekte_1","text":"Das Objekt sieht so aus: class SimpleObject { private $privateMember; protected $protectedMember; public $publicMember; public function __construct($privateMember, $protectedMember, $publicMember) { $this->privateMember = $privateMember; $this->protectedMember = $protectedMember; $this->publicMember = $publicMember; } }","title":"Objekte"},{"location":"de/usage/complexDatatypes/#get-the-node-value-for-class-member-privatemember-value1","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'privateMember' ('value1') $value = $node->getPropertyContent(identifier: 'privateMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value1'","title":"get the node value for class member 'privateMember' ('value1')"},{"location":"de/usage/complexDatatypes/#get-the-node-value-for-class-member-protectedmember-value2","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'protectedMember' ('value2) $value = $node->getPropertyContent(identifier: 'protectedMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value2'","title":"get the node value for class member 'protectedMember' ('value2')"},{"location":"de/usage/complexDatatypes/#get-the-node-value-for-class-member-publicmember-value3","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get the node value for class member 'publicMember' ('value3) $value = $node->getPropertyContent(identifier: 'publicMember')->getValue(); echo var_export($value, true) . PHP_EOL; 'value3'","title":"get the node value for class member 'publicMember' ('value3')"},{"location":"de/usage/complexDatatypes/#get-all-direct-class-member-names","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Serialized\\Node\\AttributeNode; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); echo PHP_EOL; // get all (direct) class member names $value = array_map(fn(AttributeNode $attributeNode): string => $attributeNode->getPropertyName(), $node->getContent()); echo var_export($value, true) . PHP_EOL; array ( 'privateMember' => 'privateMember', 'protectedMember' => 'protectedMember', 'publicMember' => 'publicMember', )","title":"get all (direct) class member names"},{"location":"de/usage/complexDatatypes/#replace-value3-publicmember-with-newer-value","text":"<?php use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject; $encoder = new SerializedEncoder(); $data = new SimpleObject('value1', 'value2', 'value3'); $node = $encoder->decode(data: serialize($data)); $originalSerializedData = $encoder->encode(data: $node); echo PHP_EOL; // replace 'value3' ('publicMember') with 'newer value' $newValue = 'newer value'; $newValueNode = $encoder->decode(data: serialize($newValue)); $node->replaceProperty(identifier: 'publicMember', property: $newValueNode); $newSerializedData = $encoder->encode(data: $node); echo 'original data: ' . $originalSerializedData . PHP_EOL; echo 'new data: ' . $newSerializedData . PHP_EOL; original data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:6:\"value1\";s:18:\"*protectedMember\";s:6:\"value2\";s:12:\"publicMember\";s:6:\"value3\";} new data: O:86:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObject\":3:{s:101:\"Waldhacker\\Pseudify\\Core\\Tests\\Unit\\Processor\\Encoder\\Serialized\\Fixtures\\SimpleObjectprivateMember\";s:6:\"value1\";s:18:\"*protectedMember\";s:6:\"value2\";s:12:\"publicMember\";s:11:\"newer value\";}","title":"replace 'value3' ('publicMember') with 'newer value'"},{"location":"de/usage/predefinedApplicationProfiles/","text":"Vordefinierte Applikationsprofile In den pseudify \"Profile Templates\" befinden sich vordefinierte Profile f\u00fcr verschiedenen Applikationen wie TYPO3 und Wordpress. Note Diese vordefinierten Profile sind nicht vollst\u00e4ndig und werden st\u00e4ndig weiterentwickelt. Bitte steuert Verbesserungen bei! Ihr habt Profile f\u00fcr andere Softwareprodukte gebaut? Super, bitte contributed diese zum Projekt! Wir und die Community freuen uns \u00fcber jede Form von Beteiligung, die dazu beitr\u00e4gt das Internet sicherer zu machen.","title":"Vordefinierte Applikationsprofile"},{"location":"de/usage/predefinedApplicationProfiles/#vordefinierte-applikationsprofile","text":"In den pseudify \"Profile Templates\" befinden sich vordefinierte Profile f\u00fcr verschiedenen Applikationen wie TYPO3 und Wordpress. Note Diese vordefinierten Profile sind nicht vollst\u00e4ndig und werden st\u00e4ndig weiterentwickelt. Bitte steuert Verbesserungen bei! Ihr habt Profile f\u00fcr andere Softwareprodukte gebaut? Super, bitte contributed diese zum Projekt! Wir und die Community freuen uns \u00fcber jede Form von Beteiligung, die dazu beitr\u00e4gt das Internet sicherer zu machen.","title":"Vordefinierte Applikationsprofile"},{"location":"de/usage/pseudonymize/","text":"Pseudonymisieren Die Pseudonymisierung modellieren Info Alle in diesem Tutorial beschriebenen Modellierungen kannst Du Dir mit Kommentaren im Testordner der Profile Templates (TestPseudonymizeProfile.php) anschauen. Einen \u00dcberblick verschaffen Um die Pseudonymisierung modellieren zu k\u00f6nnen, musst Du genau wissen, in welchen Datenbankspalten sich die Daten befinden welche Du pseudonymisieren m\u00f6chtest. Pseudify liefert Dir f\u00fcr diese Aufgabe Werkzeuge, welche im Kapitel Analysieren dokumentiert sind. Wir analysieren die Datenbank mit folgendem Profil (siehe Kapitel Analysieren ): <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderPreset; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition->setTargetDataFrameCuttingLength(length: 0); $tableDefinition ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->addSourceString(string: 'regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}') ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'decode conditional log data', processor: function (TargetDataDecoderContext $context): void { $row = $context->getDatebaseRow(); if ('foo' !== $row['log_type']) { return; } $data = $context->getDecodedData(); $encoder = new Base64Encoder(); $logData = $encoder->decode(data: $data); $context->setDecodedData(decodedData: $logData); } )), TargetColumn::create(identifier: 'log_message')->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()), ] )) ->addTargetTable(table: TargetTable::create(identifier: 'wh_meta_data', columns: [ TargetColumn::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ] )) ; return $tableDefinition; } } Bereits bekannt ist uns, dass sich in der Tabelle wh_user in den Spalten username , password , first_name , last_name , email , city Daten befinden, welche pseudonymisiert werden sollen. Diese Daten liegen in skalarer Form vor. Sie m\u00fcssen also nicht dekodiert werden. Die Analyse liefert uns nun die Fundstellen in der Datenbank und zeigt uns die betreffenden Datenstrukturen an: $ pseudify pseudify:analyze test-profile -vv wh_user.username (hpagac) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.first_name (Donato) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.last_name (Keeling) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) wh_user.last_name (Keeling) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.email (mcclure.ofelia@example.com) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) wh_user.email (mcclure.ofelia@example.com) -> wh_log.log_message ({\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"}) wh_user.email (mcclure.ofelia@example.com) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.city (North Elenamouth) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.username (georgiana59) -> wh_log.log_data (a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}}) wh_user.username (georgiana59) -> wh_log.log_message ({\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"}) wh_user.username (georgiana59) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.first_name (Maybell) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.last_name (Anderson) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.email (cassin.bernadette@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.city (South Wilfordland) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_log.ip (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) __custom__.__custom__ (155.215.67.191) -> wh_log.log_data ({\"userName\":\"stark.judd\",\"email\":\"srowe@example.net\",\"lastName\":\"Boyer\",\"ip\":\"155.215.67.191\"}) __custom__.__custom__ (155.215.67.191) -> wh_log.ip (155.215.67.191) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_log.log_data (a:2:{i:0;s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:12:\"freida.mante\";s:8:\"lastName\";s:5:\"Tromp\";s:5:\"email\";s:23:\"lafayette64@example.net\";s:2:\"id\";i:10;s:4:\"user\";R:3;}}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_log.ip (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) __custom__.__custom__ (243.202.241.67) -> wh_log.log_data (a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}}) __custom__.__custom__ (243.202.241.67) -> wh_log.ip (243.202.241.67) __custom__.__custom__ (132.188.241.155) -> wh_log.log_data (a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}) __custom__.__custom__ (132.188.241.155) -> wh_log.ip (132.188.241.155) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) __custom__.__custom__ (139.81.0.139) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) __custom__.__custom__ (187.135.239.239) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) __custom__.__custom__ (20.1.58.149) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) __custom__.__custom__ (197.110.248.18) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (83.243.216.115) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) __custom__.__custom__ (239.27.57.12) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}}) __custom__.__custom__ (107.66.23.195) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:13:\"107.66.23.195\";}) __custom__.__custom__ (107.66.23.195) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"107.66.23.195\"}}) __custom__.__custom__ (244.166.32.78) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}) __custom__.__custom__ (244.166.32.78) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"244.166.32.78\"}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}}) __custom__.__custom__ (197.110.248.18) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}) __custom__.__custom__ (197.110.248.18) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"197.110.248.18\"}}) 1209/1209 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100% < 1 sec/< 1 sec 4.0 MiB summary ======= ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- source data seems to be in ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- __custom__.__custom__ 132.188.241.155 wh_log.ip __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.ip __custom__.__custom__ 155.215.67.191 wh_log.ip __custom__.__custom__ 243.202.241.67 wh_log.ip __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.ip __custom__.__custom__ 132.188.241.155 wh_log.log_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.log_data __custom__.__custom__ 155.215.67.191 wh_log.log_data __custom__.__custom__ 243.202.241.67 wh_log.log_data __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.log_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_meta_data.meta_data __custom__.__custom__ 139.81.0.139 wh_meta_data.meta_data __custom__.__custom__ 187.135.239.239 wh_meta_data.meta_data __custom__.__custom__ 197.110.248.18 wh_meta_data.meta_data __custom__.__custom__ 20.1.58.149 wh_meta_data.meta_data __custom__.__custom__ 239.27.57.12 wh_meta_data.meta_data __custom__.__custom__ 244.166.32.78 wh_meta_data.meta_data __custom__.__custom__ 83.243.216.115 wh_meta_data.meta_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data __custom__.__custom__ 197.110.248.18 wh_user_session.session_data __custom__.__custom__ 244.166.32.78 wh_user_session.session_data __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data_json __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data_json __custom__.__custom__ 197.110.248.18 wh_user_session.session_data_json __custom__.__custom__ 244.166.32.78 wh_user_session.session_data_json __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data_json wh_user.city Dorothyfort wh_meta_data.meta_data wh_user.city North Elenamouth wh_meta_data.meta_data wh_user.city South Wilfordland wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_log.log_data wh_user.email mcclure.ofelia@example.com wh_log.log_message wh_user.email cassin.bernadette@example.net wh_meta_data.meta_data wh_user.email conn.abigale@example.net wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_meta_data.meta_data wh_user.first_name Donato wh_meta_data.meta_data wh_user.first_name Maybell wh_meta_data.meta_data wh_user.first_name Mckayla wh_meta_data.meta_data wh_user.last_name Keeling wh_log.log_data wh_user.last_name Anderson wh_meta_data.meta_data wh_user.last_name Keeling wh_meta_data.meta_data wh_user.last_name Stoltenberg wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs wh_meta_data.meta_data wh_user.username georgiana59 wh_log.log_data wh_user.username georgiana59 wh_log.log_message wh_user.username georgiana59 wh_meta_data.meta_data wh_user.username howell.damien wh_meta_data.meta_data wh_user.username hpagac wh_meta_data.meta_data ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- Wir k\u00f6nnen anhand der Analyseergebnisse folgende Datenstrukturen und Inhalte erkennen: Tabelle: wh_user.username Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Benutzername Beispiel: georgiana59 Tabelle: wh_user.password Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Passwort-Hash Beispiel: $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs Tabelle: wh_user.first_name Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Vorname Beispiel: Mckayla Tabelle: wh_user.last_name Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Nachname Beispiel: Keeling Tabelle: wh_user.email Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: E-Mail Beispiel: mcclure.ofelia@example.com Tabelle: wh_user.city Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Stadt Beispiel: North Elenamouth Tabelle: wh_meta_data.meta_data Datenkodierung: Hex > GzEncode Datentyp: serialisierte PHP-Daten Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, Stadt, Passwort, IPv4, IPv6 Beispiel: a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}} Tabelle: wh_log.log_data (logType == foo) Datenkodierung: Hex Datentyp: JSON Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, IPv4, IPv6 Beispiel: {\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"} Tabelle: wh_log.log_data (logType == bar) Datenkodierung: Hex > Base64 Datentyp: serialisierte PHP-Daten Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, IPv4, IPv6 Beispiel: a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}} Tabelle: wh_log.log_message (logType == foo) Datenkodierung: Skalar Datentyp: JSON Beinhaltet: Benutzername, E-Mail Beispiel: {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} Tabelle: wh_log.log_message (logType == bar) Datenkodierung: Skalar Datentyp: JSON Beinhaltet: Benutzername, Nachname Beispiel: {\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"} Tabelle: wh_log.ip Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: IPv4, IPv6 Beispiel: 155.215.67.191 Tabelle: wh_user_session.session_data Datenkodierung: Skalar Datentyp: serialisierte PHP-Daten Beinhaltet: IPv4, IPv6 Beispiel: a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";} Tabelle: wh_user_session.session_data_json Datenkodierung: Skalar Datentyp: JSON Beinhaltet: IPv4, IPv6 Beispiel: {\"data\":{\"last_ip\":\"107.66.23.195\"}} Ein \"Pseudonymizer Profile\" modellieren Ein \"Profile\" anlegen Lege im Ordner src/Profiles eine PHP Datei mit einem beliebigen Namen an. Im Beispiel wird die Datei TestPseudonymizeProfile.php genannt. Die Datei bekommt folgenden Inhalt: <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); return $tableDefinition; } } Die Methode getIdentifier() muss eine eindeutige Bezeichnung Deines Profils wiedergeben und sollte nur aus Buchstaben, Zahlen oder den Zeichen - und _ bestehen und darf keine Leerzeichen enthalten. Nach der Erzeugung des Profils muss der Cache geleert werden $ docker run -it -v $(pwd):/data \\ ghcr.io/waldhacker/pseudify cache:clear Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun bereits (leere) Informationen \u00fcber Dein Profil aus $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ------- -------- --------------- ------------------- Table column data decoders data manipulators ------- -------- --------------- ------------------- Daten einer Datenbankspalten pseudonymisieren Wir beginnen damit, die skalaren Datenbankdaten zu modellieren. Dazu erweiterst Du die Methode getTableDefinition() im Profil <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username'), Column::create(identifier: 'password'), Column::create(identifier: 'first_name'), Column::create(identifier: 'last_name'), Column::create(identifier: 'email'), Column::create(identifier: 'city'), ]) ->addTable(table: 'wh_log', columns: [ Column::create(identifier: 'ip'), ]) ; return $tableDefinition; } } Mit der Methode addTable() sagst Du pseudify, dass Du eine Datenbanktabelle modellieren willst. Im Parameter columns k\u00f6nnen eine oder mehrere Datenbankspalten modelliert werden ( Column::create() ). Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun unter Pseudonymize data in this tables die eben modellierten Datenbankspalten aus. Unter data decoders steht Scalar , was bedeutet, dass die Daten w\u00e4hrend der Pseudonymisierung nicht dekodiert werden. $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- --------- --------------------- --------------- ------------------- Table column data decoders data manipulators --------- --------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar --------- --------------------- --------------- ------------------- Encodierte Datenbankspalten Wie bereits im Kapitel \"Enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss vor der Pseudonymisierung dekodiert werden und nach der Pseudonymisierung wieder enkodiert werden. In unserem Beispiel enth\u00e4lt die Datenbankspalte log_message der Tabelle wh_log und die Datenbankspalte session_data_json der Tabelle wh_user_session enkodierte Daten im JSON-Format. Die Datenbankspalte session_data der Tabelle wh_user_session enth\u00e4lt enkodierte Daten in Form von serialisierten PHP-Daten. Wie diese Daten enkodiert sind, musst Du anhand des Quellcodes oder der Dokumentation der Applikation, welche die Datenbank verwendet, herausfinden. Damit pseudify die Daten pseudonymisieren kann, m\u00fcssen die Daten erst dekodiert werden. Hierzu kann der Definition einer Datenbankspalte ( Column::create() ) der Datentyp (Parameter dataType ) \u00fcbergeben werden. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message', dataType: Column::DATA_TYPE_JSON), ]) ->addTable(table: 'wh_user_session', columns: [ Column::create(identifier: 'session_data', dataType: Column::DATA_TYPE_SERIALIZED), Column::create(identifier: 'session_data_json', dataType: Column::DATA_TYPE_JSON), ]) ; return $tableDefinition; } } Der Methode Column::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Dies ist gleichbedeutend mit der ausgeschriebenen Variante ->setEncoder(encoder: new JsonEncoder()) bzw. ->setEncoder(encoder: new SerializedEncoder()) : <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\JsonEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message')->setEncoder(encoder: new JsonEncoder()), ]) ->addTable(table: 'wh_user_session', columns: [ Column::create(identifier: 'session_data')->setEncoder(encoder: new SerializedEncoder()), Column::create(identifier: 'session_data_json')->setEncoder(encoder: new JsonEncoder()), ]) ; return $tableDefinition; } } Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun unter Pseudonymize data in this tables die eben modellierten Datenbankspalten aus. Unter data decoders steht werden nun die gerade definierten Dekodierer gelistet ( Json / Serialized ). pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json ----------------- -------------------------- --------------- ------------------- Mehrfach enkodierte Datenbankspalten Wie bereits im Kapitel \"Mehrfach enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in mehrfach enkodierter Form abgespeichert sind. In unserem Beispiel enth\u00e4lt die Datenbankspalte meta_data der Tabelle wh_meta_data mehrfach enkodierte Daten. Damit pseudify die Daten pseudonymisieren kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform in ein Bin\u00e4rformat umgewandelt werden und dann m\u00fcssen die Bin\u00e4rdaten noch im ZLIB-Format dekomprimiert werden. Um mehrfache Dekodierung durchzuf\u00fchren, kann der ChainedEncoder verwendet werden. Mit dem ChainedEncoder k\u00f6nnen mehrere Dekodierer konfiguriert werden, welche dann der Reihe nach die Daten dekodieren. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_meta_data', columns: [ Column::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ]) ; return $tableDefinition; } } Bei der Pseudonymisierung der Datenbankspalte meta_data der Tabelle wh_meta_data wird pseudify die Daten der Datenbankspalte dann zuerst mittels der Methode decode() des HexEncoder und dann mittels der Methode decode() des GzEncodeEncoder verarbeiten, damit das Resultat anschlie\u00dfend pseudonymisiert werden kann. Danach wird pseudify die pseudonymisierten Daten mittels der Methode encode() des GzEncodeEncoder und dann mittels der Methode encode() des HexEncoder verarbeiten und zur\u00fcck in die Datenbank schreiben. pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ------------------- Du siehst unter Pseudonymize data in this tables nun, dass unter data decoders der Datenbankspalte wh_meta_data die Namen Hex<>GzEncode aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden und dann mittels des GzEncodeEncoder. Unterschiedlich enkodierte Datenbankspalten Wie bereits im Kapitel \"Unterschiedlich enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Anhand von Bedingungen speichern Applikationen die Daten in anderen Formen ab. In unserem Beispiel sind die Daten der Datenbankspalte log_data der Tabelle wh_log serialisierte PHP-Data, welche im Base64-Format enkodiert wurden und dann in hexadezimaler Form abgespeichert wurden, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Die Daten der Datenbankspalte log_data sind im JSON-Format, welche in hexadezimaler Form abgespeichert wurden, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. In beiden F\u00e4llen ( log_type == foo und log_type == bar ) k\u00f6nnen die Daten zuerst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Die weiteren Dekodierungen m\u00fcssen manuell modelliert werden: <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\JsonEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_data', dataType: Column::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'process logs', processor: function (DataManipulatorContext $context): void { $row = $context->getDatebaseRow(); if ('foo' === $row['log_type']) { $encoder = new ChainedEncoder(encoders: [new Base64Encoder(), new JsonEncoder()]); } else if ('bar' === $row['log_type']) { $encoder = new SerializedEncoder(); } else { return; } $logData = $encoder->decode(data: $context->getDecodedData()); // pseudonymize the data // ... } )), ]) // ... ; return $tableDefinition; } } Mit der Methode addDataProcessing() k\u00f6nnen zus\u00e4tzlich zur Dekodierung der Daten weitere manuelle Datentransformationen programmiert werden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ DataManipulatorContext aufgerufen. Durch den DataManipulatorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird $context->getProcessedData() : Enth\u00e4lt die verarbeiteten Daten welche mittels $context->setProcessedData() gesetzt wurden, anderenfalls die Daten der Datenbankspalte nach der Dekodierung In unserem Beispiel ermitteln wir anhand des Wertes der Datenbankspalte log_type , wie die Daten noch weiter dekodiert werden sollen. Ist der Wert von log_type gleich foo , so werden die Daten mittels des Base64Encoder() und dann mittels des JsonEncoder() dekodiert. Ist der Wert von log_type gleich bar , so werden die Daten mittels des SerializedEncoder() dekodiert. Die Daten sind nun dekodiert und k\u00f6nnen im Anschluss pseudonymisiert werden. pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex process logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ------------------- Skalare Daten Faken (pseudonymisieren) Die Pseudonymisierung wird auf Spaltenebene mittels der Methode addDataProcessing() implementiert. Im Kapitel Unterschiedlich enkodierte Datenbankspalten wurden bereits die DataProcessings beschrieben. In einem DataProcessing findet nicht nur eine ggf. ben\u00f6tigte erweiterte Dekodierung / Enkodierung der Daten statt, sonder vor allem die Pseudonymisierung selbst. Jede definierte Datenbankspalte ( Column::create() ) ben\u00f6tigt mindestens ein DataProcessing damit pseudify wei\u00df, wie es die Daten in der Datenbankspalte pseudonymisieren muss. Wir beginnen wieder mit den leicht zu pseudonymisierenden skalaren Datenstrukturen. Dazu erweiterst Du die definierten Datenbankspalten ( Column::create() ) im Profil <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Faker\\Provider\\Person; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'userName' )), Column::create(identifier: 'password') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'argon2iPassword' )), Column::create(identifier: 'first_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'firstName', fakerArguments: [Person::GENDER_FEMALE] )), Column::create(identifier: 'last_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'lastName' )), Column::create(identifier: 'email') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'safeEmail' )), Column::create(identifier: 'city') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'city' )), ]) // ... ; return $tableDefinition; } } Der Methode addDataProcessing() wird das vorgefertigte DataProcessing DataManipulatorPreset::scalarData() \u00fcbergeben. Info DataManipulatorPreset::scalarData() implementiert bereits alles, was n\u00f6tig ist, um einfache Datenstrukturen in der Datenbank zu pseudonymisieren. Dem Argument fakerFormatter \u00fcbergibst Du einen von der FakerPHP/Faker Komponente bereitgestellten oder selbst implementierten Formatierer z.B. email . Unterst\u00fctzt ein Formatierer Argumente wie z.B. beim firstName Formatierer , so k\u00f6nnen diese mit dem Argument fakerArguments \u00fcbergeben werden. Eine Analyse des Profils sieht nun so aus: $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ----------------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ----------------------------- wh_user username (string) Scalar autogenerated-63db8d8426b5f wh_user password (string) Scalar autogenerated-63db8d8426b64 wh_user first_name (string) Scalar autogenerated-63db8d84270ab wh_user last_name (string) Scalar autogenerated-63db8d84270b0 wh_user email (string) Scalar autogenerated-63db8d84270b1 wh_user city (string) Scalar autogenerated-63db8d84270b2 wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex foo logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ----------------------------- Unter data manipulators kannst Du nun sehen, dass f\u00fcr einige Spalten DataProcessings modelliert wurden. Die Werte (z.B. autogenerated-63db8d8426b5f ) werden von pseudify automatisch generiert. M\u00f6chtest Du zur besseren \u00dcbersicht menschenlesbare Bezeichnungen aufgelistet bekommen, so kannst Du der Methode DataManipulatorPreset::scalarData() das Argument processingIdentifier \u00fcbergeben. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Faker\\Provider\\Person; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'userName', processingIdentifier: 'fake user names' )), Column::create(identifier: 'password') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'argon2iPassword', processingIdentifier: 'fake argon2i passwords' )), Column::create(identifier: 'first_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'firstName', fakerArguments: [Person::GENDER_FEMALE], processingIdentifier: 'fake female first names' )), Column::create(identifier: 'last_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'lastName', processingIdentifier: 'fake last names' )), Column::create(identifier: 'email') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'safeEmail', processingIdentifier: 'fake safe email addresses' )), Column::create(identifier: 'city') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'city', processingIdentifier: 'fake citiy names' )), ]) // ... ; return $tableDefinition; } } $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- --------------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- --------------------------- wh_user username (string) Scalar fake user names wh_user password (string) Scalar fake argon2i passwords wh_user first_name (string) Scalar fake female first names wh_user last_name (string) Scalar fake last names wh_user email (string) Scalar fake safe email addresses wh_user city (string) Scalar fake citiy names wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex foo logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- --------------------------- Nicht-Skalare Daten Faken (pseudonymisieren) In komplexen Datenstrukturen m\u00f6chte man in der Regel nur ganz bestimmte Eigenschaften pseudonymisieren. Als Beispiel eignen sich die Daten der Datenbankspalte session_data_json in der Tabelle wh_meta_data . Darin befinden sich JSON-Strings wie z.B. {\"data\":{\"last_ip\":\"107.66.23.195\"}} . Wir m\u00f6chten nun gezielt den Wert der Eigenschaft last_ip mit Fakedaten ersetzten. Daf\u00fcr definieren wir ein DataProcessing ( addDataProcessing() ) an der Datenbankspalte ( Column::create() ). Im Kapitel Unterschiedlich enkodierte Datenbankspalten wurden bereits der DataManipulatorContext erw\u00e4hnt, welcher an die anonyme Funktion eines DataProcessing \u00fcbergeben wird. Durch den DataManipulatorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird $context->getProcessedData() : Enth\u00e4lt die verarbeiteten Daten welche mittels $context->setProcessedData() gesetzt wurden, anderenfalls die Daten der Datenbankspalte nach der Dekodierung Mittels des DataManipulatorContext k\u00f6nnen die Daten ebenfalls pseudonymisiert und zur\u00fcck an pseudify \u00fcbergeben werden: Mit der Methode fake() kann die FakerPHP/Faker Komponente initialisiert werden, um pseudonyme zu erzeugen. Mit der Methode setProcessedData() kann die pseudonymisierte Datenstruktur zur\u00fcck an pseudify \u00fcbergeben werden. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_user_session', columns: [ // ... Column::create(identifier: 'session_data_json', dataType: Column::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'fake IPv4', processor: function (DataManipulatorContext $context): void { $data = $context->getDecodedData(); $ip = $data['data']['last_ip']; $fakeIp = $context->fake(source: $ip)->ipv4(); $data['data']['last_ip'] = $fakeIp; $context->setProcessedData(processedData: $data); } )), ]) // ... ; return $tableDefinition; } } Mit $data = $context->getDecodedData(); bekommen wir den dekodierten JSON-String in Form eines assoziativen arrays geliefert. Mit $ip = $data['data']['last_ip']; holen wir uns gezielt den Wert aus der Datenstruktur (die IP-Adresse), welchen wir pseudonymisieren wollen. Der Aufruf $context->fake(source: $ip); initialisiert den Faker. Dem Argument source wird der zu pseudonymisierende Eingangswert \u00fcbergeben, im Beispiel ist das die IP-Adresse. Es folgt der Aufruf eines von der FakerPHP/Faker Komponente bereitgestellten oder selbst implementierten Formatierers, z.B. ->ipv4() . Info Unterst\u00fctzt ein Formatierer Argumente, wie z.B. beim firstName Formatierer , so k\u00f6nnen die Argumente dem Aufruf \u00fcbergeben werden (z.B. ->firstName(gender: \\Faker\\Provider\\Person::GENDER_FEMALE) ). Die pseudonymisierten Daten ( $fakeIp ) m\u00fcssen dann in die Datenstruktur zur\u00fcckgeschrieben werden ( $data['data']['last_ip'] = $fakeIp; ). Mit $context->setProcessedData(processedData: $data); wird die nun pseudonymisierte Datenstruktur an pseudify \u00fcbergeben. Pseudify wird die Datenstruktur dann wieder enkodieren und zur\u00fcck in die Datenbank schreiben. Unterschiedliche Datenformate in einer Datenbankspalte Faken (pseudonymisieren) Wie bereits im Kapitel Unterschiedlich enkodierte Datenbankspalten und \"Unterschiedlich enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Es kann auch vorkommen, dass Daten in Datenbankspalten in unterschiedlichen Datenformaten abgespeichert sind. Anhand von Bedingungen muss detektiert werden, in welchem Datenformat die Daten vorliegen, um sie dann entsprechend pseudonymisieren zu k\u00f6nnen. In unserem Beispiel sind die Plaintext-Daten der Datenbankspalte log_data der Tabelle wh_log serialisierte PHP-Data, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Die Plaintext-Daten der Datenbankspalte log_data sind im JSON-Format, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. Wenn die Datenbankspalte log_data der Tabelle wh_log den Wert foo enth\u00e4lt, dann sieht die Datenstruktur so aus: {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} ^ ^ Benutzername E-Mail Adresse Wenn die Datenbankspalte log_data der Tabelle wh_log den Wert bar enth\u00e4lt, dann sieht die Datenstruktur so aus: {\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"} ^ ^ Nachname Benutzername Anhand der Daten aus dem DataManipulatorContext k\u00f6nnen wir nun differenzieren, um welche Datenstruktur es sich gerade handelt ( 'foo' === $row['log_type'] ), um diese dann entsprechend zu pseudonymisieren. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message', dataType: Column::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'process log messages', processor: function (DataManipulatorContext $context): void { $logMessage = $context->getProcessedData(); preg_match('/^.*(\".*\").*(\".*\")$/', $logMessage['message'], $matches); array_shift($matches); $row = $context->getDatebaseRow(); if ('foo' === $row['log_type']) { $userName = trim($matches[0], '\"'); $mail = trim($matches[1], '\"'); $logMessage['message'] = strtr($logMessage['message'], [ $matches[0] => sprintf('\"%s\"', $context->fake(source: $userName)->userName()), $matches[1] => sprintf('\"%s\"', $context->fake(source: $mail)->safeEmail()), ]); } else { $lastName = trim($matches[0], '\"'); $userName = trim($matches[1], '\"'); $logMessage['message'] = strtr($logMessage['message'], [ $matches[0] => sprintf('\"%s\"', $context->fake(source: $lastName)->lastName()), $matches[1] => sprintf('\"%s\"', $context->fake(source: $userName)->userName()), ]); } $context->setProcessedData(processedData: $logMessage); } )), // ... ]) // ... ; return $tableDefinition; } } Mit $context->setProcessedData(processedData: $logMessage); wird die pseudonymisierte Datenstruktur an pseudify \u00fcbergeben. Pseudify wird die Datenstruktur nun wieder enkodieren und zur\u00fcck in die Datenbank schreiben. Erweiterte Anwendung Unterschiedliche Pseudonyme f\u00fcr gleiche Eingangsdaten verwenden Um Datenintegrit\u00e4t zu wahren ist pseudify so gestaltet, dass es w\u00e4hren eines Pseudonymisierungslaufs f\u00fcr gleiche Eingangsdaten immer das gleiche Pseudonym liefert. Das bedeutet, dass w\u00e4hrend der Ausf\u00fchrung einer Pseudonymisierung mittels pseudify pseudify:pseudonymize test-profile bei allen Aufrufen von $context->fake(source: 'Stan')->userName() jedes Mal z.B. das Pseudonym Klaus erzeugt wird und nicht jedes Mal ein anderes. Eine erneute Pseudonymisierung der Originaldatenbank mittels pseudify pseudify:pseudonymize test-profile wird bei allen Aufrufen von $context->fake(source: 'Stan')->userName() jedes Mal z.B. das Pseudonym Roger erzeugen und nicht Klaus wie im ersten Pseudonymisierungslauf. Somit sind 2 Dinge sichergestellt: Innerhalb eines Pseudonymisierungslaufs werden gleiche Originaldaten immer mit demselben Pseudonymen ersetzt (Der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 wird in Tabelle 1 und Tabelle 2 mit \"Klaus\" ersetzt) Zwischen verschiedenen Pseudonymisierungsl\u00e4ufen erzeugen gleiche Originaldaten unterschiedliche Pseudonyme (Bei der ersten Pseudonymisierung wird der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 in beiden Tabellen mit \"Klaus\" ersetzt, bei der zweiten Pseudonymisierung wird der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 in beiden Tabellen mit dem Wert \"Roger\" ersetzt usw.) M\u00f6chte man aus irgendwelchen Gr\u00fcnden dieses Verhalten \u00e4ndern, so kann der Methode $context->fake() der Parameter scope mitgegeben werden. Mit diesem Parameter kannst Du pseudify anweisen f\u00fcr gleiche Eingangsdaten unterschiedliche Pseudonyme pro scope zu bilden. Beispiel: $context->fake(source: 'Stan')->userName() liefert Greg $context->fake(source: 'Stan', scope: 'something_else')->userName() liefert Terry $context->fake(source: 'Stan')->userName() liefert Greg $context->fake(source: 'Stan', scope: 'something_else')->userName() liefert Terry $context->fake(source: 'Terry')->userName() liefert Brian $context->fake(source: 'Terry', scope: 'something_else')->userName() liefert Lewis Info Aufrufe von $context->fake() erzeugen gleiche Pseudonyme auf Basis der folgenden Variablen : gleiche Quelldaten gleicher Formatierer gleiche Formatierer-Argumente gleicher scope gleiches APP_SECRET Dies gilt innerhalb eines Pseudonymisierungslaufs. Ein erneuter Pseudonymisierungslauf wird mit den gleichen Variablen andere Pseudonyme bilden. Die onBeforeUpdateData() Lebenszyklus-Methode Kurz bevor pseudify die pseudonymisierten Daten in die Datenbank zur\u00fcckschreibt, wird die Lebenszyklus-Methode aufgerufen . Diese kann an einer Datenbankspalte ( Column::create() ) definiert werden . <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Doctrine\\DBAL\\Query\\QueryBuilder; use Doctrine\\DBAL\\Schema\\Column as DoctrineColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Table; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ Column::create(identifier: 'log_message') // ... ->onBeforeUpdateData(onBeforeUpdateData: function (QueryBuilder $queryBuilder, Table $table, Column $column, DoctrineColumn $columnInfo, mixed $originalData, mixed $processedData, array $databaseRow): void { // ... }), // ... ]) // ... ; return $tableDefinition; } } In diesem callback hast Du Zugriff auf alle wichtigen Objekte und Daten, um in irgendwelchen verr\u00fcckten Szenarien noch Datenmanipulationen vornehmen zu k\u00f6nnen: $originalData : Die Originaldaten in der Datenbank, welche gleich ersetzt werden $processedData : Die pseudonymisierten Daten, welche gleich geschrieben werden $databaseRow : Der gesamte Originaldatensatz $queryBuilder : Die Query Builder Instanz , die verwendet wird, um die Daten zu schreiben $table : Die pseudify Table Instanz , die von Dir modelliert wurde $column : Die pseudify Column Instanz , die von Dir modelliert wurde $columnInfo : Die doctrine Column Instanz mit n\u00fctzlichen technischen Informationen \u00fcber die Datenbankspalte M\u00f6chtest Du vor dem Update der Daten noch etwas manipulieren, so ist dies mittels der $queryBuilder Instanz m\u00f6glich. Eine \u00c4nderung der anderen Objekte und Daten wird keinerlei Auswirkung haben. Ein \"Pseudonymizer Profile\" anwenden Ein \"Pseudonymizer Profile\" kann mit dem Kommando pseudify:pseudonymize <profil-name> ausgef\u00fchrt werden. Nach der Pseudonymisierung wird das Wort done ausgegeben. $ pseudify pseudify:pseudonymize test-profile done dry run Du kannst Dein Profil testen, ohne die Daten in der Datenbank zu \u00fcberschreiben. Mit dem Parameter --dry-run werden Dir alle SQL Anweisungen aufgelistet, die pseudify ausf\u00fchren w\u00fcrde. pseudify pseudify:pseudonymize test-profile --dry-run UPDATE `wh_user` SET `username` = :dcValue1:'tavares.satterfield' WHERE `username` = :dcValue2:'karl13' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$WUlUVS9HOW1PN1dXd1pyeg$GTKopoFTAlCufz2QS/c/DzcaLKm/6xMo80ZNiph48Q4' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$amo3Z28zNTlwZG84TG1YZg$1Ka95oewxn3xs/jLrTN0R9lhIxtNnQynBFRdE/70cAQ' UPDATE `wh_user` SET `first_name` = :dcValue1:'Annalise' WHERE `first_name` = :dcValue2:'Jordyn' UPDATE `wh_user` SET `last_name` = :dcValue1:'Strosin' WHERE `last_name` = :dcValue2:'Shields' UPDATE `wh_user` SET `email` = :dcValue1:'ugutkowski@example.com' WHERE `email` = :dcValue2:'madaline30@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Schoenborough' WHERE `city` = :dcValue2:'Lake Tanner' UPDATE `wh_user` SET `username` = :dcValue1:'hollie.walter' WHERE `username` = :dcValue2:'reilly.chase' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$S1ZHRS54Z1FsNzBMSE11Mg$40Wr1wY7Az1e/cLZA04Jd25dGUYa5Xwcx1hyVsJv6QI' WHERE `password` = :dcValue2:'$2y$04$O0XKmRw3wl9mni55dSEJXuj3vygjCgdyUviihec.PTiTAu2SS/C6u' UPDATE `wh_user` SET `first_name` = :dcValue1:'Daphnee' WHERE `first_name` = :dcValue2:'Keenan' UPDATE `wh_user` SET `last_name` = :dcValue1:'Dietrich' WHERE `last_name` = :dcValue2:'King' UPDATE `wh_user` SET `email` = :dcValue1:'felicia63@example.org' WHERE `email` = :dcValue2:'johns.percy@example.com' UPDATE `wh_user` SET `city` = :dcValue1:'Juddport' WHERE `city` = :dcValue2:'Edwardotown' UPDATE `wh_user` SET `username` = :dcValue1:'miller.ullrich' WHERE `username` = :dcValue2:'hpagac' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$NHlRS2E2Y0E5Z2JlWEJTLg$Rn20zQq0a+RDa0+x3YfWmaQ27duZdQyHEF7RcnODPFk' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U' UPDATE `wh_user` SET `first_name` = :dcValue1:'Susanna' WHERE `first_name` = :dcValue2:'Donato' UPDATE `wh_user` SET `last_name` = :dcValue1:'O\\'Kon' WHERE `last_name` = :dcValue2:'Keeling' UPDATE `wh_user` SET `email` = :dcValue1:'hjaskolski@example.com' WHERE `email` = :dcValue2:'mcclure.ofelia@example.com' UPDATE `wh_user` SET `city` = :dcValue1:'Teresachester' WHERE `city` = :dcValue2:'North Elenamouth' UPDATE `wh_user` SET `username` = :dcValue1:'caleigh.mayert' WHERE `username` = :dcValue2:'georgiana59' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$TEVqLm5JQncyWVZubWExbg$juQQzt5GPMHodHYEii5LhFK1l7kQQB4twaTLi5WId+k' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q' UPDATE `wh_user` SET `first_name` = :dcValue1:'Kaya' WHERE `first_name` = :dcValue2:'Maybell' UPDATE `wh_user` SET `last_name` = :dcValue1:'Ullrich' WHERE `last_name` = :dcValue2:'Anderson' UPDATE `wh_user` SET `email` = :dcValue1:'meggie.stracke@example.com' WHERE `email` = :dcValue2:'cassin.bernadette@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Leschmouth' WHERE `city` = :dcValue2:'South Wilfordland' UPDATE `wh_user` SET `username` = :dcValue1:'smith.tianna' WHERE `username` = :dcValue2:'howell.damien' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$UG5xNENBektsOTk3bmpyTw$BAj6FBUDYe2t6QnW14qC+5S22gsI0iVLWawob1YiXKo' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs' UPDATE `wh_user` SET `first_name` = :dcValue1:'Kelly' WHERE `first_name` = :dcValue2:'Mckayla' UPDATE `wh_user` SET `last_name` = :dcValue1:'Block' WHERE `last_name` = :dcValue2:'Stoltenberg' UPDATE `wh_user` SET `email` = :dcValue1:'shanny.gulgowski@example.org' WHERE `email` = :dcValue2:'conn.abigale@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Port Wilberfurt' WHERE `city` = :dcValue2:'Dorothyfort' UPDATE `wh_log` SET `ip` = :dcValue1:'973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168' WHERE `ip` = :dcValue2:'1321:57fc:460b:d4d0:d83f:c200:4b:f1c8' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"foo text \\\\\"jamison59\\\\\", another \\\\\"hjaskolski@example.com\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"foo text \\\\\"ronaldo15\\\\\", another \\\\\"mcclure.ofelia@example.com\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'187.165.144.16' WHERE `ip` = :dcValue2:'155.215.67.191' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"foo text \\\\\"jerald.harber\\\\\", another \\\\\"sporer.tierra@example.org\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"foo text \\\\\"stark.judd\\\\\", another \\\\\"srowe@example.net\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7' WHERE `ip` = :dcValue2:'4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Volkman\\\\\", another \\\\\"bayer.casandra\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Tromp\\\\\", another \\\\\"freida.mante\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'237.29.53.144' WHERE `ip` = :dcValue2:'243.202.241.67' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Ruecker\\\\\", another \\\\\"caleigh.mayert\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Block\\\\\", another \\\\\"georgiana59\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'253.3.54.48' WHERE `ip` = :dcValue2:'132.188.241.155' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Braun\\\\\", another \\\\\"johann.thompson\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Homenick\\\\\", another \\\\\"cyril06\\\\\"\"}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:39:\"6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"223.86.155.35\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:13:\"107.66.23.195\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"223.86.155.35\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"107.66.23.195\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"49.170.101.59\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"49.170.101.59\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"244.166.32.78\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:39:\"973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"78.176.79.162\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"78.176.79.162\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"197.110.248.18\"}}' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551b14ec33010fd15e48181c1c44e429bcb0002d105211531b0118ec64dac3a7664bb6a23e8bf6387462d62bbe7f7eededd33420a5f0e32201b3130522214117320b226a584bc743007b275c26aec04099005d275d2b7d44bd41ac9afa447e776c6d6a324e045fa5e3e5c7af2a15f96c9d3d5fa9b4ecca4ac5a746de5875e1c47a06d8ce6b2fe27ec154aedc5de8f4c0a442ff232b9b9d5eef55a3f8e8f0990b5b4ce57d39a3320cf58a31a7444051085676c0ee45e99d5e6588b0ea58a350fb6ae0d670db4d9aac6ecdc46de893d76bd12d4d8266a42582be987d136f42e8df5176f527d0abbdedab0e261ca93c73cf99f3cd32940e19c34baaad18f01662c9c0f2c6a67c755653f5d9b1594cd12ca1246f322cc3fb348a3053b7d6136f6847a9e077d46194f2867f3d071f8013d717beaeb010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365525d4f023110fc2fcd3d9a4a7bc7570951236234011340455fc8c215aea1d7d66b112e86ff6e7b7211e3db4e77ba33d32db0987d599630b4e525413d60dd80294322453dc19a3dcb3a0ced2c2f14e41c7948628632bde752e21472c115fae118b076af8b34c0ae1f1041b1d18a8ae8b34fba51deef5cb83eb9307d12bdcb347f7a4de96cf03859c6c3d9f8c5dc8f6fa2a7c9c3deb44abe9d1c1a34ff1825afb7b3974ccacddc3c9bddf0f19d8cf2e5dbfe6634b7958f33cd4506365bb8d2f093999376fa8f682408e5f8c1d551d4b0d96bb4ae949d5eaabbeab0c1d05a14d62deac46d8646ab2d9412aa6c0c4938eb12c2d0d469e9b85af262138e9a0cf11c840c35f56fbbd24a61588a0d487ecd0f901bc9b1e29587d016aeac270d74a15d56ae75e1bbc77a33346c86fed94c1c2e7864b9b542ab450aaeb297f821c048e0b64f4e85a9c3d224c1a4d5c231c5ed8e9f7f26110709f2fb1912741220711777086e605f78fef11bb387fddf33020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551cb4ec33010fc15e403070e26cea3259b0308442f08a9880337c2d2b88955c78e6c576d04fd776cd3a845dc763cb33bbb63840cbe2ce440367c64a44228034e81888654028acac20d90ade54661cf8987cc93b617aea34ea052487e25035abbd3a689128f17d97bf570e9c8877a59264f57eb6f3a3193b2eed076b51b077e1c81a6d52a15cd3fe1205128c7f72e321910b528aa6476abecebb57a8c8f0990b530d6d5d39a7320cfd8a01c5540251089676c01e45eead5e658f31e850c75ea6d6de7cf1a69bb95added98db8e37bec07c9a9366dd0f8b056c28dd1d6f72eb571176f427e72b3de1abfe261ca330d79a67ff2cca600b9b542abba411703cc993f1f58d0ce8fab8a61ba362f299b2794258c16a59f7f6691050b76fac23cf6e4b127cd67949519652c341d7e0050c4f2c6eb010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365525b4fc23014fe2fcd1ecda4ddc6a5842851319a800920282fe4cc55d6d0b5752dc262f8efb693458c0f4d7a6edfa5a74023fa65684cd1965518f581f67c4c28e219ea739af40ded52b433ac945030e4421c5194ab3d1322cca0e04ca29f1e0dc6ec5599f9b0e7000228374a121e7c0e702f2806dd0b3bc0177a808395c88aa76546e6b78fd3341acd270b7d3f19064fd387bd6e576c3b3db448f1318e9737f3452ec4e6453febdde87185c745faba1f8e5f4cade38c739d83c9d7b6d2ec24e6c49dfd6bd402b8b4ec601b2b7294f45bed2b696697f2ae4eb6287ae7a5b1ebc67187a2f1db162a01b5378a049c5531a6686695b04ca6acdcf85442112b800b7f27ee6ddf949421a47c03825db303145ab050b25a832f735b3548b7aa5436afde55e9aac76633c46f86fcd94ce4075c6498315cc97506b696173b10a0d8f7764e4ab96ecc92380e71bb1d4624ec741dfe1945e429f0ef6788eb19e704773b218e9290443d7fdcc8f11b4093841d36020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036591416fc3200c85ff0b937a8c0aa149ea5e769b2a6dc749532f99076e820a4914a8d6a8eb7f1f748dd669379efdc17bd808399c3d4860079a38db20ac9316c08c661b0372e3a10276f43476e88845c923acd09269dacce14463603fd080de7ff6a3be422b60bbf7b35b368b7e11e881b6876bf90eab5bf46d1da6816ef7716cfa4e18fd0f1c2c9a2ed0e96ac49731ced36eabbef04deab9b237a30ff51cb104f6829aecd425b50666f16ff7d5dad1a836a918941c1a9bcea200e6a8690c653e8ca80ef448277483a54cf52e11e9ef264cb3ed3379d5bafe18e25397798c228d51fc1b238fca93f7a6ef6a8d01d31b45cc82c0135bde529a2135f2187a5de6711d5228f858ab12341715ec2b2d4149b5875cf322d68a2a3adf99e7c99cffee54cedb10ab3c137299f1b2c8b888d8e5f20dabf0038ffd010000' WHERE `meta_data` = :dcValue2:'1f8b08000000000000036592dd6ea33010855f65657159116ca0818922f52fca6ea5d52a4bab46bd89066c821b302c769246ddbcfbda6ca246eae5f11cfb3be31984103e34444036e240c90421759a01919c4c2444130d0990ad16bdc246102b2905b2166dbf96a8304ec97f47875aefdb9e3b99daeb1ef6eb5631e9eda634f59a697265a6f4aa9b522f7b7e7c142faff36c3edb67ac624fb37dfcbcf636f78b261ac50f7fd4dbb21885995cee65639eee76f9c3aff47bf07b4bcbb8da2c76b3d1624871c15c55a8ab953974e214e6c4e65f8c5d8d5219f16e864a601b9bbffe28fee232e2e79352f6daaccecd8e81fcc4432eea7a680c488d1755fbf4ade2a2d7ad723206221a948395596f61b152f9b9fb3b2e8c1137e21d9bae16be124302fbed853487016d4959bb35d5b7175997366b8dca663a9e67c3dc6cd897d950abb4b09856ad381a744f5ddb1c08d479c7a7c0b27385d04a1a320af1b82c20ba0e72e0110f80276109050b02887228699158ee053a7468fab926d1790b58e0533f4e7c1ad92d381eff01fdaee8ae4c020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551cb4ec33010fc15e403070ea6cea349370710885e105211076e84a57113ab8e1dd98eda08faefd82111957adbf1cceeec8e1162f8b69000d9f3819102611570044454a4109016167220bde54661cb8987cc93b615aea14ea05248fe241d5a7bd0a61a251eafe38fe2f1da914ff5ba593cdfec7ee8cccccab241db946ee8f834024dad5524aa0b61275128c78f6e6462206a9d168be59db26fb7ea697c5c00d909635d39af990179c10ae5a0025a019178c6a6401ea4deeea79ab72864a8236f6b1b7fd640eb5ed6fa60f7e29e1fb1ed24a7dad441e3c3da0a378cb6be77a38dbb7a17f28b9b5d6ffc8aa739cf28e4195de43906c8ad155a9515ba31c084f9f381056d36ad2abaf9da2ca72c5bd26c45d9d2cf3c9d59c4c182fd7f6132ff104b539ae7344e7d8fd79f7e01b01c72f9e9010000' WHERE `meta_data` = :dcValue2:'1f8b08000000000000036552616bc23010fd2fa11fa5336dd51a299bcc3926e8409d3abfc8d5461b4c93ac89d332fcef4b3bcb043f047277efde7b970b109ffc68121074a005463d20dd32f6086209ea31d2ea69121274d4341790516443ec1394ca13e5dc4d206354a03f8c02ad4f324fcab06b091cc8f75278ccf98e70d7c9a2b06122dc501176d63cc9de9789371f8ca6b13f9c4f16ea75d277dea76f27d52ee8617a6e7ad9d738583ecf1729e7fb95fa50c7e1688dc759fc79ea8f57baf271a3b94941a71b53287a3573d54eee808a0313869e4d3d8a18b67acdf6a3d0b307f152259b04ed58aecda69eb843d0787b808243351b411c6eaa18133433921b2a629aefcb548b209a01e3e5ddb36fbb9542b810b33d70fa44cf90294e5d412b0f659999a2661ac85c9ab4d8c9dc562ff566bc7233dedd66b08d34d59a49b149c054f6029b03824b6ce7ea94a98add52e16ec7c5b8e97a41e8e2d00adc68f8a506feff0d41dd14fa166f0f6edbde96edb8fc020ca4e19b36020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b080000000000000365514d4fc3300cfd2f06895bb4a42ba5ee85cb8410425cb8200e95d5863534fd509cc12ab4ff4ed2ad6268a7f8c9cfcf7e2f8409fe30ae115a3d492808f3881582a9a13098148c77083bd6aea74e438032903b63ad766267ad33550347d248ccdf83ab23bc4578ebdaebcd669e386b960d7153fa699cb5320472dba157e682375a32bdd77b7f527fafbf1eeaabede34c5c217c18c7be5c8e4a119e0dfb29d63982a5ffbd979ba7a13fd5ba236363ad82cbe693b81d2cb7e65eefa91bad16d5d0c56e705999a3a04c105eb5d34c55a3d96b07c561c94cc5ccd445663220d6cc66e8cb9a3ccd8a32b84519b9d9e944332efaeb5cc86c25e44a8a340ffa672b92b842fe7dd37a9991a9506922940a6f16060ebfc7a9a250ce010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365915f4fc23014c5bf8aa97b240bedc6c64a480c22c428448828c10772dd0a6b5cd7ba967f1abebbedc448c25b4feeb9f7776e2fd0807e6b1a52f4c10e187580264e138a78863a9c061d4ddb146d34ab4a100c591951942b58438a7e6b0ab4dec92a7332b18d1e546b5912ee6dbb38f144b7dd305ddc505dec4de6e3f9fbf374b478dd0b56f6a6b3af6cb798783cca4b33eb3f42b0187c8adb61381835f953a5462acac27e7bbeaac63d73e88b9764e618f88cb9cc41e74b735075b298a213fbc2a70ae0a5617b730afd966d87d9f5fabe3636295af14a9be5d98a7d598291f54e14157056b49407c60a5eae9d6a51c404f0c2bd89ed13695a6c2ae6cb95b5c00ddb835005f353299cc3fe73cacda1a65af3585626bfba2b989d2d3726479de3df2d88bb05b9b805b64a33adb92c971918a88762bb37c5ce1b9fb2725523028a4818fa388afc80f871dbce3f43040e81ffcf1fa2138004894f62bf15fbd8c6381e7f00628e8a6d25020000' Note Die Originaldaten und die pseudonymisierten Daten werden nicht 1:1 ausgegeben. Valides SQL der ersten Zeile m\u00fcsste UPDATE wh_user SET username = 'tavares.satterfield' WHERE username = 'karl13' lauten. --dry-run listet jedoch zus\u00e4tzlich vor den Daten den Namen des intern verwendeten Platzhalters (z.B. :dcValue1: , :dcValue2: ...) auf, was das Debugging vereinfachen kann.","title":"Pseudonymisiere die Datenbank"},{"location":"de/usage/pseudonymize/#pseudonymisieren","text":"","title":"Pseudonymisieren"},{"location":"de/usage/pseudonymize/#die-pseudonymisierung-modellieren","text":"Info Alle in diesem Tutorial beschriebenen Modellierungen kannst Du Dir mit Kommentaren im Testordner der Profile Templates (TestPseudonymizeProfile.php) anschauen.","title":"Die Pseudonymisierung modellieren"},{"location":"de/usage/pseudonymize/#einen-uberblick-verschaffen","text":"Um die Pseudonymisierung modellieren zu k\u00f6nnen, musst Du genau wissen, in welchen Datenbankspalten sich die Daten befinden welche Du pseudonymisieren m\u00f6chtest. Pseudify liefert Dir f\u00fcr diese Aufgabe Werkzeuge, welche im Kapitel Analysieren dokumentiert sind. Wir analysieren die Datenbank mit folgendem Profil (siehe Kapitel Analysieren ): <?php namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderContext; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Analyze\\TargetDataDecoderPreset; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Profile\\Analyze\\ProfileInterface; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Analyze\\TargetTable; class TestAnalyzeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition->setTargetDataFrameCuttingLength(length: 0); $tableDefinition ->addSourceTable(table: 'wh_user', columns: [ 'username', 'password', 'first_name', 'last_name', 'email', 'city', ]) ->addSourceString(string: 'regex:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}') ->excludeTargetColumnTypes(columnTypes: TableDefinition::COMMON_EXCLUED_TARGET_COLUMN_TYPES) ->addTargetTable(table: TargetTable::create(identifier: 'wh_log', columns: [ TargetColumn::create(identifier: 'log_data', dataType: TargetColumn::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'decode conditional log data', processor: function (TargetDataDecoderContext $context): void { $row = $context->getDatebaseRow(); if ('foo' !== $row['log_type']) { return; } $data = $context->getDecodedData(); $encoder = new Base64Encoder(); $logData = $encoder->decode(data: $data); $context->setDecodedData(decodedData: $logData); } )), TargetColumn::create(identifier: 'log_message')->addDataProcessing(dataProcessing: TargetDataDecoderPreset::normalizedJsonString()), ] )) ->addTargetTable(table: TargetTable::create(identifier: 'wh_meta_data', columns: [ TargetColumn::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ] )) ; return $tableDefinition; } } Bereits bekannt ist uns, dass sich in der Tabelle wh_user in den Spalten username , password , first_name , last_name , email , city Daten befinden, welche pseudonymisiert werden sollen. Diese Daten liegen in skalarer Form vor. Sie m\u00fcssen also nicht dekodiert werden. Die Analyse liefert uns nun die Fundstellen in der Datenbank und zeigt uns die betreffenden Datenstrukturen an: $ pseudify pseudify:analyze test-profile -vv wh_user.username (hpagac) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.first_name (Donato) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.last_name (Keeling) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) wh_user.last_name (Keeling) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.email (mcclure.ofelia@example.com) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) wh_user.email (mcclure.ofelia@example.com) -> wh_log.log_message ({\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"}) wh_user.email (mcclure.ofelia@example.com) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.city (North Elenamouth) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) wh_user.username (georgiana59) -> wh_log.log_data (a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}}) wh_user.username (georgiana59) -> wh_log.log_message ({\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"}) wh_user.username (georgiana59) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.first_name (Maybell) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.last_name (Anderson) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.email (cassin.bernadette@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.city (South Wilfordland) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.username (howell.damien) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.password ($argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.first_name (Mckayla) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.last_name (Stoltenberg) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.email (conn.abigale@example.net) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) wh_user.city (Dorothyfort) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_log.log_data ({\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_log.ip (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) __custom__.__custom__ (155.215.67.191) -> wh_log.log_data ({\"userName\":\"stark.judd\",\"email\":\"srowe@example.net\",\"lastName\":\"Boyer\",\"ip\":\"155.215.67.191\"}) __custom__.__custom__ (155.215.67.191) -> wh_log.ip (155.215.67.191) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_log.log_data (a:2:{i:0;s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:12:\"freida.mante\";s:8:\"lastName\";s:5:\"Tromp\";s:5:\"email\";s:23:\"lafayette64@example.net\";s:2:\"id\";i:10;s:4:\"user\";R:3;}}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_log.ip (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) __custom__.__custom__ (243.202.241.67) -> wh_log.log_data (a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}}) __custom__.__custom__ (243.202.241.67) -> wh_log.ip (243.202.241.67) __custom__.__custom__ (132.188.241.155) -> wh_log.log_data (a:2:{i:0;s:15:\"132.188.241.155\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:7:\"cyril06\";s:8:\"lastName\";s:8:\"Homenick\";s:5:\"email\";s:21:\"clinton44@example.net\";s:2:\"id\";i:91;s:4:\"user\";R:3;}}) __custom__.__custom__ (132.188.241.155) -> wh_log.ip (132.188.241.155) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) __custom__.__custom__ (139.81.0.139) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"139.81.0.139\";}}) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) __custom__.__custom__ (187.135.239.239) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:15:\"187.135.239.239\";}}) __custom__.__custom__ (20.1.58.149) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:4;s:8:\"username\";s:11:\"georgiana59\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:10:\"uGZIc|aX4d\";s:10:\"first_name\";s:7:\"Maybell\";s:9:\"last_name\";s:8:\"Anderson\";s:5:\"email\";s:29:\"cassin.bernadette@example.net\";s:4:\"city\";s:17:\"South Wilfordland\";}s:4:\"key2\";a:2:{s:2:\"id\";i:4;s:12:\"session_data\";s:65:\"a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:11:\"20.1.58.149\";}}) __custom__.__custom__ (197.110.248.18) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (83.243.216.115) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:5;s:8:\"username\";s:13:\"howell.damien\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs\";s:18:\"password_hash_type\";s:8:\"argon2id\";s:18:\"password_plaintext\";s:13:\"nF5;06?nsS/nE\";s:10:\"first_name\";s:7:\"Mckayla\";s:9:\"last_name\";s:11:\"Stoltenberg\";s:5:\"email\";s:24:\"conn.abigale@example.net\";s:4:\"city\";s:11:\"Dorothyfort\";}s:4:\"key2\";a:2:{s:2:\"id\";i:5;s:12:\"session_data\";s:42:\"a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:14:\"83.243.216.115\";}}) __custom__.__custom__ (244.166.32.78) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) __custom__.__custom__ (239.27.57.12) -> wh_meta_data.meta_data (a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";}) __custom__.__custom__ (4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}}) __custom__.__custom__ (107.66.23.195) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:13:\"107.66.23.195\";}) __custom__.__custom__ (107.66.23.195) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"107.66.23.195\"}}) __custom__.__custom__ (244.166.32.78) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}) __custom__.__custom__ (244.166.32.78) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"244.166.32.78\"}}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}) __custom__.__custom__ (1321:57fc:460b:d4d0:d83f:c200:4b:f1c8) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}}) __custom__.__custom__ (197.110.248.18) -> wh_user_session.session_data (a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}) __custom__.__custom__ (197.110.248.18) -> wh_user_session.session_data_json ({\"data\":{\"last_ip\":\"197.110.248.18\"}}) 1209/1209 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100% < 1 sec/< 1 sec 4.0 MiB summary ======= ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- source data seems to be in ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- __custom__.__custom__ 132.188.241.155 wh_log.ip __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.ip __custom__.__custom__ 155.215.67.191 wh_log.ip __custom__.__custom__ 243.202.241.67 wh_log.ip __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.ip __custom__.__custom__ 132.188.241.155 wh_log.log_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_log.log_data __custom__.__custom__ 155.215.67.191 wh_log.log_data __custom__.__custom__ 243.202.241.67 wh_log.log_data __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_log.log_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_meta_data.meta_data __custom__.__custom__ 139.81.0.139 wh_meta_data.meta_data __custom__.__custom__ 187.135.239.239 wh_meta_data.meta_data __custom__.__custom__ 197.110.248.18 wh_meta_data.meta_data __custom__.__custom__ 20.1.58.149 wh_meta_data.meta_data __custom__.__custom__ 239.27.57.12 wh_meta_data.meta_data __custom__.__custom__ 244.166.32.78 wh_meta_data.meta_data __custom__.__custom__ 83.243.216.115 wh_meta_data.meta_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data __custom__.__custom__ 197.110.248.18 wh_user_session.session_data __custom__.__custom__ 244.166.32.78 wh_user_session.session_data __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data __custom__.__custom__ 107.66.23.195 wh_user_session.session_data_json __custom__.__custom__ 1321:57fc:460b:d4d0:d83f:c200:4b:f1c8 wh_user_session.session_data_json __custom__.__custom__ 197.110.248.18 wh_user_session.session_data_json __custom__.__custom__ 244.166.32.78 wh_user_session.session_data_json __custom__.__custom__ 4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98 wh_user_session.session_data_json wh_user.city Dorothyfort wh_meta_data.meta_data wh_user.city North Elenamouth wh_meta_data.meta_data wh_user.city South Wilfordland wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_log.log_data wh_user.email mcclure.ofelia@example.com wh_log.log_message wh_user.email cassin.bernadette@example.net wh_meta_data.meta_data wh_user.email conn.abigale@example.net wh_meta_data.meta_data wh_user.email mcclure.ofelia@example.com wh_meta_data.meta_data wh_user.first_name Donato wh_meta_data.meta_data wh_user.first_name Maybell wh_meta_data.meta_data wh_user.first_name Mckayla wh_meta_data.meta_data wh_user.last_name Keeling wh_log.log_data wh_user.last_name Anderson wh_meta_data.meta_data wh_user.last_name Keeling wh_meta_data.meta_data wh_user.last_name Stoltenberg wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q wh_meta_data.meta_data wh_user.password $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs wh_meta_data.meta_data wh_user.username georgiana59 wh_log.log_data wh_user.username georgiana59 wh_log.log_message wh_user.username georgiana59 wh_meta_data.meta_data wh_user.username howell.damien wh_meta_data.meta_data wh_user.username hpagac wh_meta_data.meta_data ----------------------- ---------------------------------------------------------------------------------------------- ----------------------------------- Wir k\u00f6nnen anhand der Analyseergebnisse folgende Datenstrukturen und Inhalte erkennen: Tabelle: wh_user.username Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Benutzername Beispiel: georgiana59 Tabelle: wh_user.password Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Passwort-Hash Beispiel: $argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs Tabelle: wh_user.first_name Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Vorname Beispiel: Mckayla Tabelle: wh_user.last_name Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Nachname Beispiel: Keeling Tabelle: wh_user.email Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: E-Mail Beispiel: mcclure.ofelia@example.com Tabelle: wh_user.city Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: Stadt Beispiel: North Elenamouth Tabelle: wh_meta_data.meta_data Datenkodierung: Hex > GzEncode Datentyp: serialisierte PHP-Daten Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, Stadt, Passwort, IPv4, IPv6 Beispiel: a:3:{s:4:\"key1\";a:9:{s:2:\"id\";i:3;s:8:\"username\";s:6:\"hpagac\";s:8:\"password\";s:92:\"$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U\";s:18:\"password_hash_type\";s:7:\"argon2i\";s:18:\"password_plaintext\";s:8:\"[dvGd#gI\";s:10:\"first_name\";s:6:\"Donato\";s:9:\"last_name\";s:7:\"Keeling\";s:5:\"email\";s:26:\"mcclure.ofelia@example.com\";s:4:\"city\";s:16:\"North Elenamouth\";}s:4:\"key2\";a:2:{s:2:\"id\";i:3;s:12:\"session_data\";s:41:\"a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}\";}s:4:\"key3\";a:1:{s:4:\"key4\";s:12:\"239.27.57.12\";}} Tabelle: wh_log.log_data (logType == foo) Datenkodierung: Hex Datentyp: JSON Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, IPv4, IPv6 Beispiel: {\"userName\":\"ronaldo15\",\"email\":\"mcclure.ofelia@example.com\",\"lastName\":\"Keeling\",\"ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"} Tabelle: wh_log.log_data (logType == bar) Datenkodierung: Hex > Base64 Datentyp: serialisierte PHP-Daten Beinhaltet: Benutzername, Vorname, Nachname, E-Mail, IPv4, IPv6 Beispiel: a:2:{i:0;s:14:\"243.202.241.67\";s:4:\"user\";O:8:\"stdClass\":5:{s:8:\"userName\";s:11:\"georgiana59\";s:8:\"lastName\";s:5:\"Block\";s:5:\"email\";s:19:\"nolan11@example.net\";s:2:\"id\";i:2;s:4:\"user\";R:3;}} Tabelle: wh_log.log_message (logType == foo) Datenkodierung: Skalar Datentyp: JSON Beinhaltet: Benutzername, E-Mail Beispiel: {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} Tabelle: wh_log.log_message (logType == bar) Datenkodierung: Skalar Datentyp: JSON Beinhaltet: Benutzername, Nachname Beispiel: {\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"} Tabelle: wh_log.ip Datenkodierung: Skalar Datentyp: Skalar Beinhaltet: IPv4, IPv6 Beispiel: 155.215.67.191 Tabelle: wh_user_session.session_data Datenkodierung: Skalar Datentyp: serialisierte PHP-Daten Beinhaltet: IPv4, IPv6 Beispiel: a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";} Tabelle: wh_user_session.session_data_json Datenkodierung: Skalar Datentyp: JSON Beinhaltet: IPv4, IPv6 Beispiel: {\"data\":{\"last_ip\":\"107.66.23.195\"}}","title":"Einen \u00dcberblick verschaffen"},{"location":"de/usage/pseudonymize/#ein-pseudonymizer-profile-modellieren","text":"","title":"Ein \"Pseudonymizer Profile\" modellieren"},{"location":"de/usage/pseudonymize/#ein-profile-anlegen","text":"Lege im Ordner src/Profiles eine PHP Datei mit einem beliebigen Namen an. Im Beispiel wird die Datei TestPseudonymizeProfile.php genannt. Die Datei bekommt folgenden Inhalt: <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); return $tableDefinition; } } Die Methode getIdentifier() muss eine eindeutige Bezeichnung Deines Profils wiedergeben und sollte nur aus Buchstaben, Zahlen oder den Zeichen - und _ bestehen und darf keine Leerzeichen enthalten. Nach der Erzeugung des Profils muss der Cache geleert werden $ docker run -it -v $(pwd):/data \\ ghcr.io/waldhacker/pseudify cache:clear Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun bereits (leere) Informationen \u00fcber Dein Profil aus $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ------- -------- --------------- ------------------- Table column data decoders data manipulators ------- -------- --------------- -------------------","title":"Ein \"Profile\" anlegen"},{"location":"de/usage/pseudonymize/#daten-einer-datenbankspalten-pseudonymisieren","text":"Wir beginnen damit, die skalaren Datenbankdaten zu modellieren. Dazu erweiterst Du die Methode getTableDefinition() im Profil <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username'), Column::create(identifier: 'password'), Column::create(identifier: 'first_name'), Column::create(identifier: 'last_name'), Column::create(identifier: 'email'), Column::create(identifier: 'city'), ]) ->addTable(table: 'wh_log', columns: [ Column::create(identifier: 'ip'), ]) ; return $tableDefinition; } } Mit der Methode addTable() sagst Du pseudify, dass Du eine Datenbanktabelle modellieren willst. Im Parameter columns k\u00f6nnen eine oder mehrere Datenbankspalten modelliert werden ( Column::create() ). Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun unter Pseudonymize data in this tables die eben modellierten Datenbankspalten aus. Unter data decoders steht Scalar , was bedeutet, dass die Daten w\u00e4hrend der Pseudonymisierung nicht dekodiert werden. $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- --------- --------------------- --------------- ------------------- Table column data decoders data manipulators --------- --------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar --------- --------------------- --------------- -------------------","title":"Daten einer Datenbankspalten pseudonymisieren"},{"location":"de/usage/pseudonymize/#encodierte-datenbankspalten","text":"Wie bereits im Kapitel \"Enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in enkodierter Form vorliegen. Das bedeutet, der kodierte Klartext muss vor der Pseudonymisierung dekodiert werden und nach der Pseudonymisierung wieder enkodiert werden. In unserem Beispiel enth\u00e4lt die Datenbankspalte log_message der Tabelle wh_log und die Datenbankspalte session_data_json der Tabelle wh_user_session enkodierte Daten im JSON-Format. Die Datenbankspalte session_data der Tabelle wh_user_session enth\u00e4lt enkodierte Daten in Form von serialisierten PHP-Daten. Wie diese Daten enkodiert sind, musst Du anhand des Quellcodes oder der Dokumentation der Applikation, welche die Datenbank verwendet, herausfinden. Damit pseudify die Daten pseudonymisieren kann, m\u00fcssen die Daten erst dekodiert werden. Hierzu kann der Definition einer Datenbankspalte ( Column::create() ) der Datentyp (Parameter dataType ) \u00fcbergeben werden. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message', dataType: Column::DATA_TYPE_JSON), ]) ->addTable(table: 'wh_user_session', columns: [ Column::create(identifier: 'session_data', dataType: Column::DATA_TYPE_SERIALIZED), Column::create(identifier: 'session_data_json', dataType: Column::DATA_TYPE_JSON), ]) ; return $tableDefinition; } } Der Methode Column::create() kann mit dem Parameter dataType ein Name eines Built-in Dekodierers mitgegeben werden. Dies ist gleichbedeutend mit der ausgeschriebenen Variante ->setEncoder(encoder: new JsonEncoder()) bzw. ->setEncoder(encoder: new SerializedEncoder()) : <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\JsonEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\SerializedEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message')->setEncoder(encoder: new JsonEncoder()), ]) ->addTable(table: 'wh_user_session', columns: [ Column::create(identifier: 'session_data')->setEncoder(encoder: new SerializedEncoder()), Column::create(identifier: 'session_data_json')->setEncoder(encoder: new JsonEncoder()), ]) ; return $tableDefinition; } } Der Befehl pseudify pseudify:debug:pseudonymize test-profile gibt Dir nun unter Pseudonymize data in this tables die eben modellierten Datenbankspalten aus. Unter data decoders steht werden nun die gerade definierten Dekodierer gelistet ( Json / Serialized ). pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json ----------------- -------------------------- --------------- -------------------","title":"Encodierte Datenbankspalten"},{"location":"de/usage/pseudonymize/#mehrfach-enkodierte-datenbankspalten","text":"Wie bereits im Kapitel \"Mehrfach enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in mehrfach enkodierter Form abgespeichert sind. In unserem Beispiel enth\u00e4lt die Datenbankspalte meta_data der Tabelle wh_meta_data mehrfach enkodierte Daten. Damit pseudify die Daten pseudonymisieren kann, m\u00fcssen die Daten erst von hexadezimaler Darstellungsform in ein Bin\u00e4rformat umgewandelt werden und dann m\u00fcssen die Bin\u00e4rdaten noch im ZLIB-Format dekomprimiert werden. Um mehrfache Dekodierung durchzuf\u00fchren, kann der ChainedEncoder verwendet werden. Mit dem ChainedEncoder k\u00f6nnen mehrere Dekodierer konfiguriert werden, welche dann der Reihe nach die Daten dekodieren. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_meta_data', columns: [ Column::create(identifier: 'meta_data')->setEncoder(encoder: new ChainedEncoder(encoders: [ new HexEncoder(), new GzEncodeEncoder(defaultContext: [ GzEncodeEncoder::ENCODE_LEVEL => 5, GzEncodeEncoder::ENCODE_ENCODING => ZLIB_ENCODING_GZIP, ]), ])), ]) ; return $tableDefinition; } } Bei der Pseudonymisierung der Datenbankspalte meta_data der Tabelle wh_meta_data wird pseudify die Daten der Datenbankspalte dann zuerst mittels der Methode decode() des HexEncoder und dann mittels der Methode decode() des GzEncodeEncoder verarbeiten, damit das Resultat anschlie\u00dfend pseudonymisiert werden kann. Danach wird pseudify die pseudonymisierten Daten mittels der Methode encode() des GzEncodeEncoder und dann mittels der Methode encode() des HexEncoder verarbeiten und zur\u00fcck in die Datenbank schreiben. pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ------------------- Du siehst unter Pseudonymize data in this tables nun, dass unter data decoders der Datenbankspalte wh_meta_data die Namen Hex<>GzEncode aufgelistet wird. Dies signalisiert Dir, dass die Daten zuerst mittels des HexEncoder dekodiert werden und dann mittels des GzEncodeEncoder.","title":"Mehrfach enkodierte Datenbankspalten"},{"location":"de/usage/pseudonymize/#unterschiedlich-enkodierte-datenbankspalten","text":"Wie bereits im Kapitel \"Unterschiedlich enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Anhand von Bedingungen speichern Applikationen die Daten in anderen Formen ab. In unserem Beispiel sind die Daten der Datenbankspalte log_data der Tabelle wh_log serialisierte PHP-Data, welche im Base64-Format enkodiert wurden und dann in hexadezimaler Form abgespeichert wurden, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Die Daten der Datenbankspalte log_data sind im JSON-Format, welche in hexadezimaler Form abgespeichert wurden, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. In beiden F\u00e4llen ( log_type == foo und log_type == bar ) k\u00f6nnen die Daten zuerst von hexadezimaler Darstellungsform zum Bin\u00e4rformat umgewandelt werden. Die weiteren Dekodierungen m\u00fcssen manuell modelliert werden: <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\Base64Encoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\ChainedEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\GzEncodeEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\HexEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Encoder\\JsonEncoder; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_data', dataType: Column::DATA_TYPE_HEX) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'process logs', processor: function (DataManipulatorContext $context): void { $row = $context->getDatebaseRow(); if ('foo' === $row['log_type']) { $encoder = new ChainedEncoder(encoders: [new Base64Encoder(), new JsonEncoder()]); } else if ('bar' === $row['log_type']) { $encoder = new SerializedEncoder(); } else { return; } $logData = $encoder->decode(data: $context->getDecodedData()); // pseudonymize the data // ... } )), ]) // ... ; return $tableDefinition; } } Mit der Methode addDataProcessing() k\u00f6nnen zus\u00e4tzlich zur Dekodierung der Daten weitere manuelle Datentransformationen programmiert werden. Die DataProcessings werden nach der Dekodierung der Daten aufgef\u00fchrt. Es k\u00f6nnen beliebig viele DataProcessings definiert werden, welche nacheinander abgearbeitet werden. Ein DataProcessing besteht aus einer eindeutigen Identifizierung pro Datenbankspalte (Parameter identifier ) und einer anonymen Funktion (Parameter processor ). Die anonyme Funktion wird mit einem Parameter context vom Typ DataManipulatorContext aufgerufen. Durch den DataManipulatorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird $context->getProcessedData() : Enth\u00e4lt die verarbeiteten Daten welche mittels $context->setProcessedData() gesetzt wurden, anderenfalls die Daten der Datenbankspalte nach der Dekodierung In unserem Beispiel ermitteln wir anhand des Wertes der Datenbankspalte log_type , wie die Daten noch weiter dekodiert werden sollen. Ist der Wert von log_type gleich foo , so werden die Daten mittels des Base64Encoder() und dann mittels des JsonEncoder() dekodiert. Ist der Wert von log_type gleich bar , so werden die Daten mittels des SerializedEncoder() dekodiert. Die Daten sind nun dekodiert und k\u00f6nnen im Anschluss pseudonymisiert werden. pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ------------------- wh_user username (string) Scalar wh_user password (string) Scalar wh_user first_name (string) Scalar wh_user last_name (string) Scalar wh_user email (string) Scalar wh_user city (string) Scalar wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex process logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- -------------------","title":"Unterschiedlich enkodierte Datenbankspalten"},{"location":"de/usage/pseudonymize/#skalare-daten-faken-pseudonymisieren","text":"Die Pseudonymisierung wird auf Spaltenebene mittels der Methode addDataProcessing() implementiert. Im Kapitel Unterschiedlich enkodierte Datenbankspalten wurden bereits die DataProcessings beschrieben. In einem DataProcessing findet nicht nur eine ggf. ben\u00f6tigte erweiterte Dekodierung / Enkodierung der Daten statt, sonder vor allem die Pseudonymisierung selbst. Jede definierte Datenbankspalte ( Column::create() ) ben\u00f6tigt mindestens ein DataProcessing damit pseudify wei\u00df, wie es die Daten in der Datenbankspalte pseudonymisieren muss. Wir beginnen wieder mit den leicht zu pseudonymisierenden skalaren Datenstrukturen. Dazu erweiterst Du die definierten Datenbankspalten ( Column::create() ) im Profil <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Faker\\Provider\\Person; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'userName' )), Column::create(identifier: 'password') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'argon2iPassword' )), Column::create(identifier: 'first_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'firstName', fakerArguments: [Person::GENDER_FEMALE] )), Column::create(identifier: 'last_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'lastName' )), Column::create(identifier: 'email') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'safeEmail' )), Column::create(identifier: 'city') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'city' )), ]) // ... ; return $tableDefinition; } } Der Methode addDataProcessing() wird das vorgefertigte DataProcessing DataManipulatorPreset::scalarData() \u00fcbergeben. Info DataManipulatorPreset::scalarData() implementiert bereits alles, was n\u00f6tig ist, um einfache Datenstrukturen in der Datenbank zu pseudonymisieren. Dem Argument fakerFormatter \u00fcbergibst Du einen von der FakerPHP/Faker Komponente bereitgestellten oder selbst implementierten Formatierer z.B. email . Unterst\u00fctzt ein Formatierer Argumente wie z.B. beim firstName Formatierer , so k\u00f6nnen diese mit dem Argument fakerArguments \u00fcbergeben werden. Eine Analyse des Profils sieht nun so aus: $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- ----------------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- ----------------------------- wh_user username (string) Scalar autogenerated-63db8d8426b5f wh_user password (string) Scalar autogenerated-63db8d8426b64 wh_user first_name (string) Scalar autogenerated-63db8d84270ab wh_user last_name (string) Scalar autogenerated-63db8d84270b0 wh_user email (string) Scalar autogenerated-63db8d84270b1 wh_user city (string) Scalar autogenerated-63db8d84270b2 wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex foo logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ----------------------------- Unter data manipulators kannst Du nun sehen, dass f\u00fcr einige Spalten DataProcessings modelliert wurden. Die Werte (z.B. autogenerated-63db8d8426b5f ) werden von pseudify automatisch generiert. M\u00f6chtest Du zur besseren \u00dcbersicht menschenlesbare Bezeichnungen aufgelistet bekommen, so kannst Du der Methode DataManipulatorPreset::scalarData() das Argument processingIdentifier \u00fcbergeben. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Faker\\Provider\\Person; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorPreset; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition ->addTable(table: 'wh_user', columns: [ Column::create(identifier: 'username') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'userName', processingIdentifier: 'fake user names' )), Column::create(identifier: 'password') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'argon2iPassword', processingIdentifier: 'fake argon2i passwords' )), Column::create(identifier: 'first_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'firstName', fakerArguments: [Person::GENDER_FEMALE], processingIdentifier: 'fake female first names' )), Column::create(identifier: 'last_name') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'lastName', processingIdentifier: 'fake last names' )), Column::create(identifier: 'email') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'safeEmail', processingIdentifier: 'fake safe email addresses' )), Column::create(identifier: 'city') ->addDataProcessing(dataProcessing: DataManipulatorPreset::scalarData( fakerFormatter: 'city', processingIdentifier: 'fake citiy names' )), ]) // ... ; return $tableDefinition; } } $ pseudify pseudify:debug:pseudonymize test-profile Pseudonymization profile \"test-profile\" ======================================= Pseudonymize data in this tables -------------------------------- ----------------- -------------------------- --------------- --------------------------- Table column data decoders data manipulators ----------------- -------------------------- --------------- --------------------------- wh_user username (string) Scalar fake user names wh_user password (string) Scalar fake argon2i passwords wh_user first_name (string) Scalar fake female first names wh_user last_name (string) Scalar fake last names wh_user email (string) Scalar fake safe email addresses wh_user city (string) Scalar fake citiy names wh_log ip (string) Scalar wh_log log_message (text) Json wh_log log_data (blob) Hex foo logs wh_user_session session_data (blob) Serialized wh_user_session session_data_json (text) Json wh_meta_data meta_data (blob) Hex<>GzEncode ----------------- -------------------------- --------------- ---------------------------","title":"Skalare Daten Faken (pseudonymisieren)"},{"location":"de/usage/pseudonymize/#nicht-skalare-daten-faken-pseudonymisieren","text":"In komplexen Datenstrukturen m\u00f6chte man in der Regel nur ganz bestimmte Eigenschaften pseudonymisieren. Als Beispiel eignen sich die Daten der Datenbankspalte session_data_json in der Tabelle wh_meta_data . Darin befinden sich JSON-Strings wie z.B. {\"data\":{\"last_ip\":\"107.66.23.195\"}} . Wir m\u00f6chten nun gezielt den Wert der Eigenschaft last_ip mit Fakedaten ersetzten. Daf\u00fcr definieren wir ein DataProcessing ( addDataProcessing() ) an der Datenbankspalte ( Column::create() ). Im Kapitel Unterschiedlich enkodierte Datenbankspalten wurden bereits der DataManipulatorContext erw\u00e4hnt, welcher an die anonyme Funktion eines DataProcessing \u00fcbergeben wird. Durch den DataManipulatorContext k\u00f6nnen diverse Informationen \u00fcber den zu verarbeitenden Datensatz erhalten werden: $context->getRawData() : Die Originaldaten der Datenbankspalte $context->getDecodedData() : Die Daten der Datenbankspalte nach der Dekodierung $context->getDatebaseRow() : Enth\u00e4lt die Originaldaten aller Datenbankspalten der Datenbankzeile die verarbeitet wird $context->getProcessedData() : Enth\u00e4lt die verarbeiteten Daten welche mittels $context->setProcessedData() gesetzt wurden, anderenfalls die Daten der Datenbankspalte nach der Dekodierung Mittels des DataManipulatorContext k\u00f6nnen die Daten ebenfalls pseudonymisiert und zur\u00fcck an pseudify \u00fcbergeben werden: Mit der Methode fake() kann die FakerPHP/Faker Komponente initialisiert werden, um pseudonyme zu erzeugen. Mit der Methode setProcessedData() kann die pseudonymisierte Datenstruktur zur\u00fcck an pseudify \u00fcbergeben werden. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_user_session', columns: [ // ... Column::create(identifier: 'session_data_json', dataType: Column::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'fake IPv4', processor: function (DataManipulatorContext $context): void { $data = $context->getDecodedData(); $ip = $data['data']['last_ip']; $fakeIp = $context->fake(source: $ip)->ipv4(); $data['data']['last_ip'] = $fakeIp; $context->setProcessedData(processedData: $data); } )), ]) // ... ; return $tableDefinition; } } Mit $data = $context->getDecodedData(); bekommen wir den dekodierten JSON-String in Form eines assoziativen arrays geliefert. Mit $ip = $data['data']['last_ip']; holen wir uns gezielt den Wert aus der Datenstruktur (die IP-Adresse), welchen wir pseudonymisieren wollen. Der Aufruf $context->fake(source: $ip); initialisiert den Faker. Dem Argument source wird der zu pseudonymisierende Eingangswert \u00fcbergeben, im Beispiel ist das die IP-Adresse. Es folgt der Aufruf eines von der FakerPHP/Faker Komponente bereitgestellten oder selbst implementierten Formatierers, z.B. ->ipv4() . Info Unterst\u00fctzt ein Formatierer Argumente, wie z.B. beim firstName Formatierer , so k\u00f6nnen die Argumente dem Aufruf \u00fcbergeben werden (z.B. ->firstName(gender: \\Faker\\Provider\\Person::GENDER_FEMALE) ). Die pseudonymisierten Daten ( $fakeIp ) m\u00fcssen dann in die Datenstruktur zur\u00fcckgeschrieben werden ( $data['data']['last_ip'] = $fakeIp; ). Mit $context->setProcessedData(processedData: $data); wird die nun pseudonymisierte Datenstruktur an pseudify \u00fcbergeben. Pseudify wird die Datenstruktur dann wieder enkodieren und zur\u00fcck in die Datenbank schreiben.","title":"Nicht-Skalare Daten Faken (pseudonymisieren)"},{"location":"de/usage/pseudonymize/#unterschiedliche-datenformate-in-einer-datenbankspalte-faken-pseudonymisieren","text":"Wie bereits im Kapitel Unterschiedlich enkodierte Datenbankspalten und \"Unterschiedlich enkodierte Daten durchsuchen\" gelernt, kann es vorkommen, dass Daten in Datenbankspalten in unterschiedlich enkodierter Form abgespeichert sind. Es kann auch vorkommen, dass Daten in Datenbankspalten in unterschiedlichen Datenformaten abgespeichert sind. Anhand von Bedingungen muss detektiert werden, in welchem Datenformat die Daten vorliegen, um sie dann entsprechend pseudonymisieren zu k\u00f6nnen. In unserem Beispiel sind die Plaintext-Daten der Datenbankspalte log_data der Tabelle wh_log serialisierte PHP-Data, wenn die Datenbankspalte log_type den Wert bar enth\u00e4lt. Die Plaintext-Daten der Datenbankspalte log_data sind im JSON-Format, wenn die Datenbankspalte log_type den Wert foo enth\u00e4lt. Wenn die Datenbankspalte log_data der Tabelle wh_log den Wert foo enth\u00e4lt, dann sieht die Datenstruktur so aus: {\"message\":\"foo text \\\"ronaldo15\\\", another \\\"mcclure.ofelia@example.com\\\"\"} ^ ^ Benutzername E-Mail Adresse Wenn die Datenbankspalte log_data der Tabelle wh_log den Wert bar enth\u00e4lt, dann sieht die Datenstruktur so aus: {\"message\":\"bar text \\\"Block\\\", another \\\"georgiana59\\\"\"} ^ ^ Nachname Benutzername Anhand der Daten aus dem DataManipulatorContext k\u00f6nnen wir nun differenzieren, um welche Datenstruktur es sich gerade handelt ( 'foo' === $row['log_type'] ), um diese dann entsprechend zu pseudonymisieren. <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\DataProcessing; use Waldhacker\\Pseudify\\Core\\Processor\\Processing\\Pseudonymize\\DataManipulatorContext; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ // ... Column::create(identifier: 'log_message', dataType: Column::DATA_TYPE_JSON) ->addDataProcessing(dataProcessing: new DataProcessing(identifier: 'process log messages', processor: function (DataManipulatorContext $context): void { $logMessage = $context->getProcessedData(); preg_match('/^.*(\".*\").*(\".*\")$/', $logMessage['message'], $matches); array_shift($matches); $row = $context->getDatebaseRow(); if ('foo' === $row['log_type']) { $userName = trim($matches[0], '\"'); $mail = trim($matches[1], '\"'); $logMessage['message'] = strtr($logMessage['message'], [ $matches[0] => sprintf('\"%s\"', $context->fake(source: $userName)->userName()), $matches[1] => sprintf('\"%s\"', $context->fake(source: $mail)->safeEmail()), ]); } else { $lastName = trim($matches[0], '\"'); $userName = trim($matches[1], '\"'); $logMessage['message'] = strtr($logMessage['message'], [ $matches[0] => sprintf('\"%s\"', $context->fake(source: $lastName)->lastName()), $matches[1] => sprintf('\"%s\"', $context->fake(source: $userName)->userName()), ]); } $context->setProcessedData(processedData: $logMessage); } )), // ... ]) // ... ; return $tableDefinition; } } Mit $context->setProcessedData(processedData: $logMessage); wird die pseudonymisierte Datenstruktur an pseudify \u00fcbergeben. Pseudify wird die Datenstruktur nun wieder enkodieren und zur\u00fcck in die Datenbank schreiben.","title":"Unterschiedliche Datenformate in einer Datenbankspalte Faken (pseudonymisieren)"},{"location":"de/usage/pseudonymize/#erweiterte-anwendung","text":"","title":"Erweiterte Anwendung"},{"location":"de/usage/pseudonymize/#unterschiedliche-pseudonyme-fur-gleiche-eingangsdaten-verwenden","text":"Um Datenintegrit\u00e4t zu wahren ist pseudify so gestaltet, dass es w\u00e4hren eines Pseudonymisierungslaufs f\u00fcr gleiche Eingangsdaten immer das gleiche Pseudonym liefert. Das bedeutet, dass w\u00e4hrend der Ausf\u00fchrung einer Pseudonymisierung mittels pseudify pseudify:pseudonymize test-profile bei allen Aufrufen von $context->fake(source: 'Stan')->userName() jedes Mal z.B. das Pseudonym Klaus erzeugt wird und nicht jedes Mal ein anderes. Eine erneute Pseudonymisierung der Originaldatenbank mittels pseudify pseudify:pseudonymize test-profile wird bei allen Aufrufen von $context->fake(source: 'Stan')->userName() jedes Mal z.B. das Pseudonym Roger erzeugen und nicht Klaus wie im ersten Pseudonymisierungslauf. Somit sind 2 Dinge sichergestellt: Innerhalb eines Pseudonymisierungslaufs werden gleiche Originaldaten immer mit demselben Pseudonymen ersetzt (Der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 wird in Tabelle 1 und Tabelle 2 mit \"Klaus\" ersetzt) Zwischen verschiedenen Pseudonymisierungsl\u00e4ufen erzeugen gleiche Originaldaten unterschiedliche Pseudonyme (Bei der ersten Pseudonymisierung wird der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 in beiden Tabellen mit \"Klaus\" ersetzt, bei der zweiten Pseudonymisierung wird der Wert \"Stan\" aus Tabelle 1 und Tabelle 2 in beiden Tabellen mit dem Wert \"Roger\" ersetzt usw.) M\u00f6chte man aus irgendwelchen Gr\u00fcnden dieses Verhalten \u00e4ndern, so kann der Methode $context->fake() der Parameter scope mitgegeben werden. Mit diesem Parameter kannst Du pseudify anweisen f\u00fcr gleiche Eingangsdaten unterschiedliche Pseudonyme pro scope zu bilden. Beispiel: $context->fake(source: 'Stan')->userName() liefert Greg $context->fake(source: 'Stan', scope: 'something_else')->userName() liefert Terry $context->fake(source: 'Stan')->userName() liefert Greg $context->fake(source: 'Stan', scope: 'something_else')->userName() liefert Terry $context->fake(source: 'Terry')->userName() liefert Brian $context->fake(source: 'Terry', scope: 'something_else')->userName() liefert Lewis Info Aufrufe von $context->fake() erzeugen gleiche Pseudonyme auf Basis der folgenden Variablen : gleiche Quelldaten gleicher Formatierer gleiche Formatierer-Argumente gleicher scope gleiches APP_SECRET Dies gilt innerhalb eines Pseudonymisierungslaufs. Ein erneuter Pseudonymisierungslauf wird mit den gleichen Variablen andere Pseudonyme bilden.","title":"Unterschiedliche Pseudonyme f\u00fcr gleiche Eingangsdaten verwenden"},{"location":"de/usage/pseudonymize/#die-onbeforeupdatedata-lebenszyklus-methode","text":"Kurz bevor pseudify die pseudonymisierten Daten in die Datenbank zur\u00fcckschreibt, wird die Lebenszyklus-Methode aufgerufen . Diese kann an einer Datenbankspalte ( Column::create() ) definiert werden . <?php declare(strict_types=1); namespace Waldhacker\\Pseudify\\Profiles; use Doctrine\\DBAL\\Query\\QueryBuilder; use Doctrine\\DBAL\\Schema\\Column as DoctrineColumn; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Column; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\TableDefinition; use Waldhacker\\Pseudify\\Core\\Profile\\Model\\Pseudonymize\\Table; use Waldhacker\\Pseudify\\Core\\Profile\\Pseudonymize\\ProfileInterface; class TestPseudonymizeProfile implements ProfileInterface { public function getIdentifier(): string { return 'test-profile'; } public function getTableDefinition(): TableDefinition { $tableDefinition = new TableDefinition(identifier: $this->getIdentifier()); $tableDefinition // ... ->addTable(table: 'wh_log', columns: [ Column::create(identifier: 'log_message') // ... ->onBeforeUpdateData(onBeforeUpdateData: function (QueryBuilder $queryBuilder, Table $table, Column $column, DoctrineColumn $columnInfo, mixed $originalData, mixed $processedData, array $databaseRow): void { // ... }), // ... ]) // ... ; return $tableDefinition; } } In diesem callback hast Du Zugriff auf alle wichtigen Objekte und Daten, um in irgendwelchen verr\u00fcckten Szenarien noch Datenmanipulationen vornehmen zu k\u00f6nnen: $originalData : Die Originaldaten in der Datenbank, welche gleich ersetzt werden $processedData : Die pseudonymisierten Daten, welche gleich geschrieben werden $databaseRow : Der gesamte Originaldatensatz $queryBuilder : Die Query Builder Instanz , die verwendet wird, um die Daten zu schreiben $table : Die pseudify Table Instanz , die von Dir modelliert wurde $column : Die pseudify Column Instanz , die von Dir modelliert wurde $columnInfo : Die doctrine Column Instanz mit n\u00fctzlichen technischen Informationen \u00fcber die Datenbankspalte M\u00f6chtest Du vor dem Update der Daten noch etwas manipulieren, so ist dies mittels der $queryBuilder Instanz m\u00f6glich. Eine \u00c4nderung der anderen Objekte und Daten wird keinerlei Auswirkung haben.","title":"Die onBeforeUpdateData() Lebenszyklus-Methode"},{"location":"de/usage/pseudonymize/#ein-pseudonymizer-profile-anwenden","text":"Ein \"Pseudonymizer Profile\" kann mit dem Kommando pseudify:pseudonymize <profil-name> ausgef\u00fchrt werden. Nach der Pseudonymisierung wird das Wort done ausgegeben. $ pseudify pseudify:pseudonymize test-profile done","title":"Ein \"Pseudonymizer Profile\" anwenden"},{"location":"de/usage/pseudonymize/#dry-run","text":"Du kannst Dein Profil testen, ohne die Daten in der Datenbank zu \u00fcberschreiben. Mit dem Parameter --dry-run werden Dir alle SQL Anweisungen aufgelistet, die pseudify ausf\u00fchren w\u00fcrde. pseudify pseudify:pseudonymize test-profile --dry-run UPDATE `wh_user` SET `username` = :dcValue1:'tavares.satterfield' WHERE `username` = :dcValue2:'karl13' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$WUlUVS9HOW1PN1dXd1pyeg$GTKopoFTAlCufz2QS/c/DzcaLKm/6xMo80ZNiph48Q4' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$amo3Z28zNTlwZG84TG1YZg$1Ka95oewxn3xs/jLrTN0R9lhIxtNnQynBFRdE/70cAQ' UPDATE `wh_user` SET `first_name` = :dcValue1:'Annalise' WHERE `first_name` = :dcValue2:'Jordyn' UPDATE `wh_user` SET `last_name` = :dcValue1:'Strosin' WHERE `last_name` = :dcValue2:'Shields' UPDATE `wh_user` SET `email` = :dcValue1:'ugutkowski@example.com' WHERE `email` = :dcValue2:'madaline30@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Schoenborough' WHERE `city` = :dcValue2:'Lake Tanner' UPDATE `wh_user` SET `username` = :dcValue1:'hollie.walter' WHERE `username` = :dcValue2:'reilly.chase' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$S1ZHRS54Z1FsNzBMSE11Mg$40Wr1wY7Az1e/cLZA04Jd25dGUYa5Xwcx1hyVsJv6QI' WHERE `password` = :dcValue2:'$2y$04$O0XKmRw3wl9mni55dSEJXuj3vygjCgdyUviihec.PTiTAu2SS/C6u' UPDATE `wh_user` SET `first_name` = :dcValue1:'Daphnee' WHERE `first_name` = :dcValue2:'Keenan' UPDATE `wh_user` SET `last_name` = :dcValue1:'Dietrich' WHERE `last_name` = :dcValue2:'King' UPDATE `wh_user` SET `email` = :dcValue1:'felicia63@example.org' WHERE `email` = :dcValue2:'johns.percy@example.com' UPDATE `wh_user` SET `city` = :dcValue1:'Juddport' WHERE `city` = :dcValue2:'Edwardotown' UPDATE `wh_user` SET `username` = :dcValue1:'miller.ullrich' WHERE `username` = :dcValue2:'hpagac' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$NHlRS2E2Y0E5Z2JlWEJTLg$Rn20zQq0a+RDa0+x3YfWmaQ27duZdQyHEF7RcnODPFk' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$QXNXbTRMZWxmenBRUzdwZQ$i6hntUDLa3ZFqmCG4FM0iPrpMp6d4D8XfrNBtyDmV9U' UPDATE `wh_user` SET `first_name` = :dcValue1:'Susanna' WHERE `first_name` = :dcValue2:'Donato' UPDATE `wh_user` SET `last_name` = :dcValue1:'O\\'Kon' WHERE `last_name` = :dcValue2:'Keeling' UPDATE `wh_user` SET `email` = :dcValue1:'hjaskolski@example.com' WHERE `email` = :dcValue2:'mcclure.ofelia@example.com' UPDATE `wh_user` SET `city` = :dcValue1:'Teresachester' WHERE `city` = :dcValue2:'North Elenamouth' UPDATE `wh_user` SET `username` = :dcValue1:'caleigh.mayert' WHERE `username` = :dcValue2:'georgiana59' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$TEVqLm5JQncyWVZubWExbg$juQQzt5GPMHodHYEii5LhFK1l7kQQB4twaTLi5WId+k' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$SUJJeWZGSGEwS2h2TEw5Ug$kCQm4/5DqnjXc/3SiXwimtTBvbDO9H0Ru1f5hkQvE/Q' UPDATE `wh_user` SET `first_name` = :dcValue1:'Kaya' WHERE `first_name` = :dcValue2:'Maybell' UPDATE `wh_user` SET `last_name` = :dcValue1:'Ullrich' WHERE `last_name` = :dcValue2:'Anderson' UPDATE `wh_user` SET `email` = :dcValue1:'meggie.stracke@example.com' WHERE `email` = :dcValue2:'cassin.bernadette@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Leschmouth' WHERE `city` = :dcValue2:'South Wilfordland' UPDATE `wh_user` SET `username` = :dcValue1:'smith.tianna' WHERE `username` = :dcValue2:'howell.damien' UPDATE `wh_user` SET `password` = :dcValue1:'$argon2i$v=19$m=8,t=1,p=1$UG5xNENBektsOTk3bmpyTw$BAj6FBUDYe2t6QnW14qC+5S22gsI0iVLWawob1YiXKo' WHERE `password` = :dcValue2:'$argon2i$v=19$m=8,t=1,p=1$ZldmOWd2TDJRb3FTNVpGNA$ORIwp6yekRx02mqM4WCTVhllgXpUpuFJZ1MmbYwAMXs' UPDATE `wh_user` SET `first_name` = :dcValue1:'Kelly' WHERE `first_name` = :dcValue2:'Mckayla' UPDATE `wh_user` SET `last_name` = :dcValue1:'Block' WHERE `last_name` = :dcValue2:'Stoltenberg' UPDATE `wh_user` SET `email` = :dcValue1:'shanny.gulgowski@example.org' WHERE `email` = :dcValue2:'conn.abigale@example.net' UPDATE `wh_user` SET `city` = :dcValue1:'Port Wilberfurt' WHERE `city` = :dcValue2:'Dorothyfort' UPDATE `wh_log` SET `ip` = :dcValue1:'973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168' WHERE `ip` = :dcValue2:'1321:57fc:460b:d4d0:d83f:c200:4b:f1c8' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"foo text \\\\\"jamison59\\\\\", another \\\\\"hjaskolski@example.com\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"foo text \\\\\"ronaldo15\\\\\", another \\\\\"mcclure.ofelia@example.com\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'187.165.144.16' WHERE `ip` = :dcValue2:'155.215.67.191' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"foo text \\\\\"jerald.harber\\\\\", another \\\\\"sporer.tierra@example.org\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"foo text \\\\\"stark.judd\\\\\", another \\\\\"srowe@example.net\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7' WHERE `ip` = :dcValue2:'4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Volkman\\\\\", another \\\\\"bayer.casandra\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Tromp\\\\\", another \\\\\"freida.mante\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'237.29.53.144' WHERE `ip` = :dcValue2:'243.202.241.67' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Ruecker\\\\\", another \\\\\"caleigh.mayert\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Block\\\\\", another \\\\\"georgiana59\\\\\"\"}' UPDATE `wh_log` SET `ip` = :dcValue1:'253.3.54.48' WHERE `ip` = :dcValue2:'132.188.241.155' UPDATE `wh_log` SET `log_message` = :dcValue1:'{\"message\":\"bar text \\\\\"Braun\\\\\", another \\\\\"johann.thompson\\\\\"\"}' WHERE `log_message` = :dcValue2:'{\"message\":\"bar text \\\\\"Homenick\\\\\", another \\\\\"cyril06\\\\\"\"}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:39:\"6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:38:\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"6f5a:517a:963e:86fd:d691:c2a9:fe4f:4ea7\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"4fb:1447:defb:9d47:a2e0:a36a:10d3:fd98\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"223.86.155.35\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:13:\"107.66.23.195\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"223.86.155.35\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"107.66.23.195\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"49.170.101.59\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:13:\"244.166.32.78\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"49.170.101.59\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"244.166.32.78\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:39:\"973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:37:\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"973a:942c:b9c7:d128:f8d4:c4cf:3d16:d168\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"1321:57fc:460b:d4d0:d83f:c200:4b:f1c8\"}}' UPDATE `wh_user_session` SET `session_data` = :dcValue1:'a:1:{s:7:\"last_ip\";s:13:\"78.176.79.162\";}' WHERE `session_data` = :dcValue2:'a:1:{s:7:\"last_ip\";s:14:\"197.110.248.18\";}' UPDATE `wh_user_session` SET `session_data_json` = :dcValue1:'{\"data\":{\"last_ip\":\"78.176.79.162\"}}' WHERE `session_data_json` = :dcValue2:'{\"data\":{\"last_ip\":\"197.110.248.18\"}}' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551b14ec33010fd15e48181c1c44e429bcb0002d105211531b0118ec64dac3a7664bb6a23e8bf6387462d62bbe7f7eededd33420a5f0e32201b3130522214117320b226a584bc743007b275c26aec04099005d275d2b7d44bd41ac9afa447e776c6d6a324e045fa5e3e5c7af2a15f96c9d3d5fa9b4ecca4ac5a746de5875e1c47a06d8ce6b2fe27ec154aedc5de8f4c0a442ff232b9b9d5eef55a3f8e8f0990b5b4ce57d39a3320cf58a31a7444051085676c0ee45e99d5e6588b0ea58a350fb6ae0d670db4d9aac6ecdc46de893d76bd12d4d8266a42582be987d136f42e8df5176f527d0abbdedab0e261ca93c73cf99f3cd32940e19c34baaad18f01662c9c0f2c6a67c755653f5d9b1594cd12ca1246f322cc3fb348a3053b7d6136f6847a9e077d46194f2867f3d071f8013d717beaeb010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365525d4f023110fc2fcd3d9a4a7bc7570951236234011340455fc8c215aea1d7d66b112e86ff6e7b7211e3db4e77ba33d32db0987d599630b4e525413d60dd80294322453dc19a3dcb3a0ced2c2f14e41c7948628632bde752e21472c115fae118b076af8b34c0ae1f1041b1d18a8ae8b34fba51deef5cb83eb9307d12bdcb347f7a4de96cf03859c6c3d9f8c5dc8f6fa2a7c9c3deb44abe9d1c1a34ff1825afb7b3974ccacddc3c9bddf0f19d8cf2e5dbfe6634b7958f33cd4506365bb8d2f093999376fa8f682408e5f8c1d551d4b0d96bb4ae949d5eaabbeab0c1d05a14d62deac46d8646ab2d9412aa6c0c4938eb12c2d0d469e9b85af262138e9a0cf11c840c35f56fbbd24a61588a0d487ecd0f901bc9b1e29587d016aeac270d74a15d56ae75e1bbc77a33346c86fed94c1c2e7864b9b542ab450aaeb297f821c048e0b64f4e85a9c3d224c1a4d5c231c5ed8e9f7f26110709f2fb1912741220711777086e605f78fef11bb387fddf33020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551cb4ec33010fc15e403070e26cea3259b0308442f08a9880337c2d2b88955c78e6c576d04fd776cd3a845dc763cb33bbb63840cbe2ce440367c64a44228034e81888654028acac20d90ade54661cf8987cc93b617aea34ea052487e25035abbd3a689128f17d97bf570e9c8877a59264f57eb6f3a3193b2eed076b51b077e1c81a6d52a15cd3fe1205128c7f72e321910b528aa6476abecebb57a8c8f0990b530d6d5d39a7320cfd8a01c5540251089676c01e45eead5e658f31e850c75ea6d6de7cf1a69bb95added98db8e37bec07c9a9366dd0f8b056c28dd1d6f72eb571176f427e72b3de1abfe261ca330d79a67ff2cca600b9b542abba411703cc993f1f58d0ce8fab8a61ba362f299b2794258c16a59f7f6691050b76fac23cf6e4b127cd67949519652c341d7e0050c4f2c6eb010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365525b4fc23014fe2fcd1ecda4ddc6a5842851319a800920282fe4cc55d6d0b5752dc262f8efb693458c0f4d7a6edfa5a74023fa65684cd1965518f581f67c4c28e219ea739af40ded52b433ac945030e4421c5194ab3d1322cca0e04ca29f1e0dc6ec5599f9b0e7000228374a121e7c0e702f2806dd0b3bc0177a808395c88aa76546e6b78fd3341acd270b7d3f19064fd387bd6e576c3b3db448f1318e9737f3452ec4e6453febdde87185c745faba1f8e5f4cade38c739d83c9d7b6d2ec24e6c49dfd6bd402b8b4ec601b2b7294f45bed2b696697f2ae4eb6287ae7a5b1ebc67187a2f1db162a01b5378a049c5531a6686695b04ca6acdcf85442112b800b7f27ee6ddf949421a47c03825db303145ab050b25a832f735b3548b7aa5436afde55e9aac76633c46f86fcd94ce4075c6498315cc97506b696173b10a0d8f7764e4ab96ecc92380e71bb1d4624ec741dfe1945e429f0ef6788eb19e704773b218e9290443d7fdcc8f11b4093841d36020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036591416fc3200c85ff0b937a8c0aa149ea5e769b2a6dc749532f99076e820a4914a8d6a8eb7f1f748dd669379efdc17bd808399c3d4860079a38db20ac9316c08c661b0372e3a10276f43476e88845c923acd09269dacce14463603fd080de7ff6a3be422b60bbf7b35b368b7e11e881b6876bf90eab5bf46d1da6816ef7716cfa4e18fd0f1c2c9a2ed0e96ac49731ced36eabbef04deab9b237a30ff51cb104f6829aecd425b50666f16ff7d5dad1a836a918941c1a9bcea200e6a8690c653e8ca80ef448277483a54cf52e11e9ef264cb3ed3379d5bafe18e25397798c228d51fc1b238fca93f7a6ef6a8d01d31b45cc82c0135bde529a2135f2187a5de6711d5228f858ab12341715ec2b2d4149b5875cf322d68a2a3adf99e7c99cffee54cedb10ab3c137299f1b2c8b888d8e5f20dabf0038ffd010000' WHERE `meta_data` = :dcValue2:'1f8b08000000000000036592dd6ea33010855f65657159116ca0818922f52fca6ea5d52a4bab46bd89066c821b302c769246ddbcfbda6ca246eae5f11cfb3be31984103e34444036e240c90421759a01919c4c2444130d0990ad16bdc246102b2905b2166dbf96a8304ec97f47875aefdb9e3b99daeb1ef6eb5631e9eda634f59a697265a6f4aa9b522f7b7e7c142faff36c3edb67ac624fb37dfcbcf636f78b261ac50f7fd4dbb21885995cee65639eee76f9c3aff47bf07b4bcbb8da2c76b3d1624871c15c55a8ab953974e214e6c4e65f8c5d8d5219f16e864a601b9bbffe28fee232e2e79352f6daaccecd8e81fcc4432eea7a680c488d1755fbf4ade2a2d7ad723206221a948395596f61b152f9b9fb3b2e8c1137e21d9bae16be124302fbed853487016d4959bb35d5b7175997366b8dca663a9e67c3dc6cd897d950abb4b09856ad381a744f5ddb1c08d479c7a7c0b27385d04a1a320af1b82c20ba0e72e0110f80276109050b02887228699158ee053a7468fab926d1790b58e0533f4e7c1ad92d381eff01fdaee8ae4c020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b08000000000000036551cb4ec33010fc15e403070ea6cea349370710885e105211076e84a57113ab8e1dd98eda08faefd82111957adbf1cceeec8e1162f8b69000d9f3819102611570044454a4109016167220bde54661cb8987cc93b615aea14ea05248fe241d5a7bd0a61a251eafe38fe2f1da914ff5ba593cdfec7ee8cccccab241db946ee8f834024dad5524aa0b61275128c78f6e6462206a9d168be59db26fb7ea697c5c00d909635d39af990179c10ae5a0025a019178c6a6401ea4deeea79ab72864a8236f6b1b7fd640eb5ed6fa60f7e29e1fb1ed24a7dad441e3c3da0a378cb6be77a38dbb7a17f28b9b5d6ffc8aa739cf28e4195de43906c8ad155a9515ba31c084f9f381056d36ad2abaf9da2ca72c5bd26c45d9d2cf3c9d59c4c182fd7f6132ff104b539ae7344e7d8fd79f7e01b01c72f9e9010000' WHERE `meta_data` = :dcValue2:'1f8b08000000000000036552616bc23010fd2fa11fa5336dd51a299bcc3926e8409d3abfc8d5461b4c93ac89d332fcef4b3bcb043f047277efde7b970b109ffc68121074a005463d20dd32f6086209ea31d2ea69121274d4341790516443ec1394ca13e5dc4d206354a03f8c02ad4f324fcab06b091cc8f75278ccf98e70d7c9a2b06122dc501176d63cc9de9789371f8ca6b13f9c4f16ea75d277dea76f27d52ee8617a6e7ad9d738583ecf1729e7fb95fa50c7e1688dc759fc79ea8f57baf271a3b94941a71b53287a3573d54eee808a0313869e4d3d8a18b67acdf6a3d0b307f152259b04ed58aecda69eb843d0787b808243351b411c6eaa18133433921b2a629aefcb548b209a01e3e5ddb36fbb9542b810b33d70fa44cf90294e5d412b0f659999a2661ac85c9ab4d8c9dc562ff566bc7233dedd66b08d34d59a49b149c054f6029b03824b6ce7ea94a98add52e16ec7c5b8e97a41e8e2d00adc68f8a506feff0d41dd14fa166f0f6edbde96edb8fc020ca4e19b36020000' UPDATE `wh_meta_data` SET `meta_data` = :dcValue1:'1f8b080000000000000365514d4fc3300cfd2f06895bb4a42ba5ee85cb8410425cb8200e95d5863534fd509cc12ab4ff4ed2ad6268a7f8c9cfcf7e2f8409fe30ae115a3d492808f3881582a9a13098148c77083bd6aea74e438032903b63ad766267ad33550347d248ccdf83ab23bc4578ebdaebcd669e386b960d7153fa699cb5320472dba157e682375a32bdd77b7f527fafbf1eeaabede34c5c217c18c7be5c8e4a119e0dfb29d63982a5ffbd979ba7a13fd5ba236363ad82cbe693b81d2cb7e65eefa91bad16d5d0c56e705999a3a04c105eb5d34c55a3d96b07c561c94cc5ccd445663220d6cc66e8cb9a3ccd8a32b84519b9d9e944332efaeb5cc86c25e44a8a340ffa672b92b842fe7dd37a9991a9506922940a6f16060ebfc7a9a250ce010000' WHERE `meta_data` = :dcValue2:'1f8b080000000000000365915f4fc23014c5bf8aa97b240bedc6c64a480c22c428448828c10772dd0a6b5cd7ba967f1abebbedc448c25b4feeb9f7776e2fd0807e6b1a52f4c10e187580264e138a78863a9c061d4ddb146d34ab4a100c591951942b58438a7e6b0ab4dec92a7332b18d1e546b5912ee6dbb38f144b7dd305ddc505dec4de6e3f9fbf374b478dd0b56f6a6b3af6cb798783cca4b33eb3f42b0187c8adb61381835f953a5462acac27e7bbeaac63d73e88b9764e618f88cb9cc41e74b735075b298a213fbc2a70ae0a5617b730afd966d87d9f5fabe3636295af14a9be5d98a7d598291f54e14157056b49407c60a5eae9d6a51c404f0c2bd89ed13695a6c2ae6cb95b5c00ddb835005f353299cc3fe73cacda1a65af3585626bfba2b989d2d3726479de3df2d88bb05b9b805b64a33adb92c971918a88762bb37c5ce1b9fb2725523028a4818fa388afc80f871dbce3f43040e81ffcf1fa2138004894f62bf15fbd8c6381e7f00628e8a6d25020000' Note Die Originaldaten und die pseudonymisierten Daten werden nicht 1:1 ausgegeben. Valides SQL der ersten Zeile m\u00fcsste UPDATE wh_user SET username = 'tavares.satterfield' WHERE username = 'karl13' lauten. --dry-run listet jedoch zus\u00e4tzlich vor den Daten den Namen des intern verwendeten Platzhalters (z.B. :dcValue1: , :dcValue2: ...) auf, was das Debugging vereinfachen kann.","title":"dry run"}]}